<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="../assets/xml/rss.xsl" media="all"?><rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>chimez's blog (关于 macro 的文章)</title><link>https://chimez.github.io/</link><description></description><atom:link href="https://chimez.github.io/categories/macro.xml" rel="self" type="application/rss+xml"></atom:link><language>zh_cn</language><copyright>Contents © 2023 &lt;a href="mailto:chimez@163.com"&gt;chimez&lt;/a&gt; </copyright><lastBuildDate>Wed, 18 Oct 2023 02:37:53 GMT</lastBuildDate><generator>Nikola (getnikola.com)</generator><docs>http://blogs.law.harvard.edu/tech/rss</docs><item><title>Rust macro</title><link>https://chimez.github.io/posts/rust-macro/</link><dc:creator>chimez</dc:creator><description>&lt;div id="outline-container-org11b95ce" class="outline-2"&gt;
&lt;h2 id="org11b95ce"&gt;Rust 宏&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-org11b95ce"&gt;
&lt;p&gt;
Rust 的宏分为两类，一种是声明宏 &lt;code&gt;macro_rules!&lt;/code&gt; ,另一种是过程宏 &lt;code&gt;#[...]&lt;/code&gt; .
&lt;/p&gt;
&lt;/div&gt;


&lt;div id="outline-container-org97af11e" class="outline-3"&gt;
&lt;h3 id="org97af11e"&gt;声明宏 &lt;code&gt;macro_rules!&lt;/code&gt;&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-org97af11e"&gt;
&lt;p&gt;
声明宏是 Rust 中最常用的宏，通过对源码的模式匹配来实现功能。
&lt;/p&gt;
&lt;/div&gt;

&lt;div id="outline-container-orge25f8bf" class="outline-4"&gt;
&lt;h4 id="orge25f8bf"&gt;语法&lt;/h4&gt;
&lt;div class="outline-text-4" id="text-orge25f8bf"&gt;
&lt;p&gt;
参考： &lt;a href="https://doc.rust-lang.org/reference/macros-by-example.html"&gt;reference/macro&lt;/a&gt;
&lt;/p&gt;

&lt;ul class="org-ul"&gt;
&lt;li&gt;&lt;code&gt;#[macro_export]&lt;/code&gt; 导出宏&lt;/li&gt;
&lt;li&gt;&lt;code&gt;$x:expr&lt;/code&gt; 表明模式匹配一个 &lt;code&gt;expr&lt;/code&gt; 类型的源码块，并用 &lt;code&gt;$x&lt;/code&gt; 表示它&lt;/li&gt;
&lt;li&gt;&lt;code&gt;$( ... ),*$&lt;/code&gt; 表明匹配括号中的内容 0 次或多次，每个重复的内容直接由 &lt;code&gt;,&lt;/code&gt; 分隔&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-org7f6fcd9" class="outline-4"&gt;
&lt;h4 id="org7f6fcd9"&gt;例子： &lt;code&gt;vec!&lt;/code&gt;&lt;/h4&gt;
&lt;div class="outline-text-4" id="text-org7f6fcd9"&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    #[macro_export]
    macro_rules! vec {
        ( $( $x:expr ),* ) =&amp;gt; {
            {
                let mut temp_vec = Vec::new();
                $(
                    temp_vec.push($x);
                )*
                    temp_vec
            }
        };
    }
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;


&lt;div id="outline-container-org1ff4cea" class="outline-3"&gt;
&lt;h3 id="org1ff4cea"&gt;过程宏&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-org1ff4cea"&gt;
&lt;p&gt;
过程宏是一个函数，不过它的输入输出类型是词法对象 &lt;code&gt;TokenStream&lt;/code&gt; ，由编译器在编译前调用。
&lt;/p&gt;
&lt;/div&gt;

&lt;div id="outline-container-org3cba940" class="outline-4"&gt;
&lt;h4 id="org3cba940"&gt;crate&lt;/h4&gt;
&lt;div class="outline-text-4" id="text-org3cba940"&gt;
&lt;p&gt;
由于技术限制，目前过程宏必须分离在一个单独的 crate 中, 这个 crate 是 &lt;code&gt;proc-macro&lt;/code&gt; 类型的
&lt;/p&gt;


&lt;p&gt;
&lt;code&gt;Cargo.toml&lt;/code&gt;
&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    [lib]
    proc-macro = true
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-org27ae0e7" class="outline-4"&gt;
&lt;h4 id="org27ae0e7"&gt;&lt;code&gt;derive&lt;/code&gt; 宏&lt;/h4&gt;
&lt;div class="outline-text-4" id="text-org27ae0e7"&gt;
&lt;p&gt;
&lt;code&gt;derive&lt;/code&gt; 宏用来为结构体等创建默认的 trait 实现。
&lt;/p&gt;

&lt;p&gt;
下面的例子创建一个 &lt;code&gt;HelloMacro&lt;/code&gt; trait 的默认实现宏。
&lt;/p&gt;
&lt;/div&gt;

&lt;ul class="org-ul"&gt;
&lt;li&gt;&lt;a id="orgd39921f"&gt;&lt;/a&gt;使用&lt;br&gt;
&lt;div class="outline-text-5" id="text-orgd39921f"&gt;
&lt;p&gt;
下面的例子展示了为 &lt;code&gt;struct Pancakes&lt;/code&gt; 创建 trait &lt;code&gt;HelloMacro&lt;/code&gt; 的默认实现的方法，这个 trait 中只有一个函数 &lt;code&gt;hello_macro()&lt;/code&gt;
&lt;/p&gt;

&lt;p&gt;
&lt;code&gt;src/main.rs&lt;/code&gt;
&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;     use hello_macro::HelloMacro;
     use hello_macro_derive::HelloMacro;

     #[derive(HelloMacro)]
     struct Pancakes;

     fn main() {
         Pancakes::hello_macro();
     }
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;

&lt;li&gt;&lt;a id="org12bb42a"&gt;&lt;/a&gt;trait 定义&lt;br&gt;
&lt;div class="outline-text-5" id="text-org12bb42a"&gt;
&lt;p&gt;
&lt;code&gt;hello_macro/src/lib.rs&lt;/code&gt;
&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;     pub trait HelloMacro {
         fn hello_macro();
     }
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;

&lt;li&gt;&lt;a id="orgfcaf5df"&gt;&lt;/a&gt;宏定义&lt;br&gt;
&lt;div class="outline-text-5" id="text-orgfcaf5df"&gt;
&lt;p&gt;
&lt;code&gt;hello_macro_derive/Cargo.toml&lt;/code&gt;
&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;     [lib]
     proc-macro = true

     [dependencies]
     syn = "1.0"
     quote = "1.0"
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
&lt;code&gt;hello_macro_derive/src/lib.rs&lt;/code&gt;
&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;     extern crate proc_macro;

     use proc_macro::TokenStream;
     use quote::quote;
     use syn;

     #[proc_macro_derive(HelloMacro)]
     pub fn hello_macro_derive(input: TokenStream) -&amp;gt; TokenStream {
         // Construct a representation of Rust code as a syntax tree
         // that we can manipulate
         let ast = syn::parse(input).unwrap();

         // Build the trait implementation
         impl_hello_macro(&amp;amp;ast)
     }

     fn impl_hello_macro(ast: &amp;amp;syn::DeriveInput) -&amp;gt; TokenStream {
         let name = &amp;amp;ast.ident;
         let gen = quote! {
             impl HelloMacro for #name {
                 fn hello_macro() {
                     println!("Hello, Macro! My name is {}!", stringify!(#name));
                 }
             }
         };
         gen.into()
     }
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;

&lt;div id="outline-container-orga6a5158" class="outline-4"&gt;
&lt;h4 id="orga6a5158"&gt;&lt;code&gt;Attribute-like&lt;/code&gt; 宏&lt;/h4&gt;
&lt;div class="outline-text-4" id="text-orga6a5158"&gt;
&lt;p&gt;
属性宏可以创建新的属性, 与 &lt;code&gt;derive&lt;/code&gt; 宏的区别在于参数多了一个属性 &lt;code&gt;attr&lt;/code&gt;, 也就是括号里面的部分，另一个参数 &lt;code&gt;item&lt;/code&gt; 就是与 &lt;code&gt;derive&lt;/code&gt; 宏一样的内容了。
&lt;/p&gt;
&lt;/div&gt;

&lt;ul class="org-ul"&gt;
&lt;li&gt;&lt;a id="orgdb44b9d"&gt;&lt;/a&gt;用法&lt;br&gt;
&lt;div class="outline-text-5" id="text-orgdb44b9d"&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;     #[route(GET, "/")]
     fn index() { ... }
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;

&lt;li&gt;&lt;a id="orgeea496d"&gt;&lt;/a&gt;宏定义&lt;br&gt;
&lt;div class="outline-text-5" id="text-orgeea496d"&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;     #[proc_macro_attribute]
     pub fn route(attr: TokenStream, item: TokenStream) -&amp;gt; TokenStream { ... }
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;

&lt;div id="outline-container-orgbf1ba5f" class="outline-4"&gt;
&lt;h4 id="orgbf1ba5f"&gt;&lt;code&gt;Function-like&lt;/code&gt; 宏&lt;/h4&gt;
&lt;div class="outline-text-4" id="text-orgbf1ba5f"&gt;
&lt;p&gt;
函数宏可以定义像函数一样调用的宏。可以用来定义 DSL
&lt;/p&gt;
&lt;/div&gt;

&lt;ul class="org-ul"&gt;
&lt;li&gt;&lt;a id="orged7e4a7"&gt;&lt;/a&gt;用法&lt;br&gt;
&lt;div class="outline-text-5" id="text-orged7e4a7"&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;     let sql = sql!(SELECT * FROM posts WHERE id=1);
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;

&lt;li&gt;&lt;a id="orgd9b0c46"&gt;&lt;/a&gt;宏定义&lt;br&gt;
&lt;div class="outline-text-5" id="text-orgd9b0c46"&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;     #[proc_macro]
     pub fn sql(input: TokenStream) -&amp;gt; TokenStream { ... }
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;

&lt;div id="outline-container-org49db44c" class="outline-4"&gt;
&lt;h4 id="org49db44c"&gt;syn: rust parser&lt;/h4&gt;
&lt;div class="outline-text-4" id="text-org49db44c"&gt;
&lt;p&gt;
&lt;a href="https://crates.io/crates/syn"&gt;syn&lt;/a&gt; 是 rust 代码的 parser，可以将源码字符串 &lt;code&gt;TokenStream&lt;/code&gt; 转换成语法树 &lt;code&gt;syn::DeriveInput&lt;/code&gt; 。
&lt;/p&gt;
&lt;/div&gt;

&lt;ul class="org-ul"&gt;
&lt;li&gt;&lt;a id="orgcdbcf20"&gt;&lt;/a&gt;&lt;code&gt;syn::DeriveInput&lt;/code&gt;&lt;br&gt;
&lt;div class="outline-text-5" id="text-orgcdbcf20"&gt;
&lt;p&gt;
对于输入 &lt;code&gt;TokenStream&lt;/code&gt; 使用 &lt;code&gt;parse_macro_input!&lt;/code&gt; 将它解析为语法树 &lt;code&gt;DeriveInput&lt;/code&gt; ，之后就可以通过对语法树的操作生成新的语法树
&lt;/p&gt;
&lt;/div&gt;
&lt;/li&gt;

&lt;li&gt;&lt;a id="orgbc29f4a"&gt;&lt;/a&gt;&lt;code&gt;syn::spanned::Spanned&lt;/code&gt;&lt;br&gt;
&lt;div class="outline-text-5" id="text-orgbc29f4a"&gt;
&lt;p&gt;
对重复结构的操作，使用 &lt;code&gt;span()&lt;/code&gt; 配合 &lt;code&gt;quote::qoute_spanned!&lt;/code&gt; 实现
&lt;/p&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;

&lt;div id="outline-container-org83c7fa7" class="outline-4"&gt;
&lt;h4 id="org83c7fa7"&gt;quote: rust 代码模板&lt;/h4&gt;
&lt;div class="outline-text-4" id="text-org83c7fa7"&gt;
&lt;p&gt;
&lt;a href="https://crates.io/crates/quote"&gt;quote&lt;/a&gt; 的 &lt;code&gt;quote!&lt;/code&gt; 宏可以将 rust 语法数据结构变成 &lt;code&gt;TokenStream&lt;/code&gt;
&lt;/p&gt;

&lt;p&gt;
&lt;code&gt;qoute_spanned!&lt;/code&gt; 宏可以将重复结构中的一个元素单独操作。
&lt;/p&gt;

&lt;p&gt;
qoute 的宏类似于 &lt;code&gt;macro_rules!&lt;/code&gt; 只是把 &lt;code&gt;$&lt;/code&gt; 换成  &lt;code&gt;#&lt;/code&gt;
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;</description><category>macro</category><category>rust</category><guid>https://chimez.github.io/posts/rust-macro/</guid><pubDate>Fri, 20 Aug 2021 05:32:43 GMT</pubDate></item></channel></rss>