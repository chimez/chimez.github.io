<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="../assets/xml/rss.xsl" media="all"?><rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>chimez's blog (Posts about Rust)</title><link>https://chimez.github.io/</link><description></description><atom:link href="https://chimez.github.io/categories/cat_rust.xml" rel="self" type="application/rss+xml"></atom:link><language>en</language><copyright>Contents © 2021 &lt;a href="mailto:chimez@163.com"&gt;chimez&lt;/a&gt; </copyright><lastBuildDate>Wed, 06 Oct 2021 13:35:56 GMT</lastBuildDate><generator>Nikola (getnikola.com)</generator><docs>http://blogs.law.harvard.edu/tech/rss</docs><item><title>Rust macro</title><link>https://chimez.github.io/posts/rust-macro/</link><dc:creator>chimez</dc:creator><description>&lt;div id="outline-container-org9e21e83" class="outline-2"&gt;
&lt;h2 id="org9e21e83"&gt;Rust 宏&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-org9e21e83"&gt;
&lt;p&gt;
Rust 的宏分为两类，一种是声明宏 &lt;code&gt;macro_rules!&lt;/code&gt; ,另一种是过程宏 &lt;code&gt;#[...]&lt;/code&gt; .
&lt;/p&gt;
&lt;/div&gt;


&lt;div id="outline-container-org00438ff" class="outline-3"&gt;
&lt;h3 id="org00438ff"&gt;声明宏 &lt;code&gt;macro_rules!&lt;/code&gt;&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-org00438ff"&gt;
&lt;p&gt;
声明宏是 Rust 中最常用的宏，通过对源码的模式匹配来实现功能。
&lt;/p&gt;
&lt;/div&gt;

&lt;div id="outline-container-org0eabae1" class="outline-4"&gt;
&lt;h4 id="org0eabae1"&gt;语法&lt;/h4&gt;
&lt;div class="outline-text-4" id="text-org0eabae1"&gt;
&lt;p&gt;
参考： &lt;a href="https://doc.rust-lang.org/reference/macros-by-example.html"&gt;reference/macro&lt;/a&gt;
&lt;/p&gt;

&lt;ul class="org-ul"&gt;
&lt;li&gt;&lt;code&gt;#[macro_export]&lt;/code&gt; 导出宏&lt;/li&gt;
&lt;li&gt;&lt;code&gt;$x:expr&lt;/code&gt; 表明模式匹配一个 &lt;code&gt;expr&lt;/code&gt; 类型的源码块，并用 &lt;code&gt;$x&lt;/code&gt; 表示它&lt;/li&gt;
&lt;li&gt;&lt;code&gt;$( ... ),*$&lt;/code&gt; 表明匹配括号中的内容 0 次或多次，每个重复的内容直接由 &lt;code&gt;,&lt;/code&gt; 分隔&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-org9bb41e5" class="outline-4"&gt;
&lt;h4 id="org9bb41e5"&gt;例子： &lt;code&gt;vec!&lt;/code&gt;&lt;/h4&gt;
&lt;div class="outline-text-4" id="text-org9bb41e5"&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    #[macro_export]
    macro_rules! vec {
	( $( $x:expr ),* ) =&amp;gt; {
	    {
		let mut temp_vec = Vec::new();
		$(
		    temp_vec.push($x);
		)*
		    temp_vec
	    }
	};
    }
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;


&lt;div id="outline-container-org3450c30" class="outline-3"&gt;
&lt;h3 id="org3450c30"&gt;过程宏&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-org3450c30"&gt;
&lt;p&gt;
过程宏是一个函数，不过它的输入输出类型是词法对象 &lt;code&gt;TokenStream&lt;/code&gt; ，由编译器在编译前调用。
&lt;/p&gt;
&lt;/div&gt;

&lt;div id="outline-container-org6a0fb39" class="outline-4"&gt;
&lt;h4 id="org6a0fb39"&gt;crate&lt;/h4&gt;
&lt;div class="outline-text-4" id="text-org6a0fb39"&gt;
&lt;p&gt;
由于技术限制，目前过程宏必须分离在一个单独的 crate 中, 这个 crate 是 &lt;code&gt;proc-macro&lt;/code&gt; 类型的
&lt;/p&gt;


&lt;p&gt;
&lt;code&gt;Cargo.toml&lt;/code&gt;
&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    [lib]
    proc-macro = true
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-org7765bbd" class="outline-4"&gt;
&lt;h4 id="org7765bbd"&gt;&lt;code&gt;derive&lt;/code&gt; 宏&lt;/h4&gt;
&lt;div class="outline-text-4" id="text-org7765bbd"&gt;
&lt;p&gt;
&lt;code&gt;derive&lt;/code&gt; 宏用来为结构体等创建默认的 trait 实现。
&lt;/p&gt;

&lt;p&gt;
下面的例子创建一个 &lt;code&gt;HelloMacro&lt;/code&gt; trait 的默认实现宏。
&lt;/p&gt;
&lt;/div&gt;

&lt;ul class="org-ul"&gt;
&lt;li&gt;&lt;a id="org6aec40b"&gt;&lt;/a&gt;使用&lt;br&gt;
&lt;div class="outline-text-5" id="text-org6aec40b"&gt;
&lt;p&gt;
下面的例子展示了为 &lt;code&gt;struct Pancakes&lt;/code&gt; 创建 trait &lt;code&gt;HelloMacro&lt;/code&gt; 的默认实现的方法，这个 trait 中只有一个函数 &lt;code&gt;hello_macro()&lt;/code&gt;
&lt;/p&gt;

&lt;p&gt;
&lt;code&gt;src/main.rs&lt;/code&gt;
&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;     use hello_macro::HelloMacro;
     use hello_macro_derive::HelloMacro;

     #[derive(HelloMacro)]
     struct Pancakes;

     fn main() {
	 Pancakes::hello_macro();
     }
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;

&lt;li&gt;&lt;a id="org5e35bea"&gt;&lt;/a&gt;trait 定义&lt;br&gt;
&lt;div class="outline-text-5" id="text-org5e35bea"&gt;
&lt;p&gt;
&lt;code&gt;hello_macro/src/lib.rs&lt;/code&gt;
&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;     pub trait HelloMacro {
	 fn hello_macro();
     }
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;

&lt;li&gt;&lt;a id="org8e74709"&gt;&lt;/a&gt;宏定义&lt;br&gt;
&lt;div class="outline-text-5" id="text-org8e74709"&gt;
&lt;p&gt;
&lt;code&gt;hello_macro_derive/Cargo.toml&lt;/code&gt;
&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;     [lib]
     proc-macro = true

     [dependencies]
     syn = "1.0"
     quote = "1.0"
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
&lt;code&gt;hello_macro_derive/src/lib.rs&lt;/code&gt;
&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;     extern crate proc_macro;

     use proc_macro::TokenStream;
     use quote::quote;
     use syn;

     #[proc_macro_derive(HelloMacro)]
     pub fn hello_macro_derive(input: TokenStream) -&amp;gt; TokenStream {
	 // Construct a representation of Rust code as a syntax tree
	 // that we can manipulate
	 let ast = syn::parse(input).unwrap();

	 // Build the trait implementation
	 impl_hello_macro(&amp;amp;ast)
     }

     fn impl_hello_macro(ast: &amp;amp;syn::DeriveInput) -&amp;gt; TokenStream {
	 let name = &amp;amp;ast.ident;
	 let gen = quote! {
	     impl HelloMacro for #name {
		 fn hello_macro() {
		     println!("Hello, Macro! My name is {}!", stringify!(#name));
		 }
	     }
	 };
	 gen.into()
     }
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;

&lt;div id="outline-container-org7875d5d" class="outline-4"&gt;
&lt;h4 id="org7875d5d"&gt;&lt;code&gt;Attribute-like&lt;/code&gt; 宏&lt;/h4&gt;
&lt;div class="outline-text-4" id="text-org7875d5d"&gt;
&lt;p&gt;
属性宏可以创建新的属性, 与 &lt;code&gt;derive&lt;/code&gt; 宏的区别在于参数多了一个属性 &lt;code&gt;attr&lt;/code&gt;, 也就是括号里面的部分，另一个参数 &lt;code&gt;item&lt;/code&gt; 就是与 &lt;code&gt;derive&lt;/code&gt; 宏一样的内容了。
&lt;/p&gt;
&lt;/div&gt;

&lt;ul class="org-ul"&gt;
&lt;li&gt;&lt;a id="orgb598b7b"&gt;&lt;/a&gt;用法&lt;br&gt;
&lt;div class="outline-text-5" id="text-orgb598b7b"&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;     #[route(GET, "/")]
     fn index() { ... }
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;

&lt;li&gt;&lt;a id="org6f08530"&gt;&lt;/a&gt;宏定义&lt;br&gt;
&lt;div class="outline-text-5" id="text-org6f08530"&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;     #[proc_macro_attribute]
     pub fn route(attr: TokenStream, item: TokenStream) -&amp;gt; TokenStream { ... }
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;

&lt;div id="outline-container-org374b7a5" class="outline-4"&gt;
&lt;h4 id="org374b7a5"&gt;&lt;code&gt;Function-like&lt;/code&gt; 宏&lt;/h4&gt;
&lt;div class="outline-text-4" id="text-org374b7a5"&gt;
&lt;p&gt;
函数宏可以定义像函数一样调用的宏。可以用来定义 DSL
&lt;/p&gt;
&lt;/div&gt;

&lt;ul class="org-ul"&gt;
&lt;li&gt;&lt;a id="org02c78a4"&gt;&lt;/a&gt;用法&lt;br&gt;
&lt;div class="outline-text-5" id="text-org02c78a4"&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;     let sql = sql!(SELECT * FROM posts WHERE id=1);
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;

&lt;li&gt;&lt;a id="org6797a07"&gt;&lt;/a&gt;宏定义&lt;br&gt;
&lt;div class="outline-text-5" id="text-org6797a07"&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;     #[proc_macro]
     pub fn sql(input: TokenStream) -&amp;gt; TokenStream { ... }
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;

&lt;div id="outline-container-org04a8869" class="outline-4"&gt;
&lt;h4 id="org04a8869"&gt;syn: rust parser&lt;/h4&gt;
&lt;div class="outline-text-4" id="text-org04a8869"&gt;
&lt;p&gt;
&lt;a href="https://crates.io/crates/syn"&gt;syn&lt;/a&gt; 是 rust 代码的 parser，可以将源码字符串 &lt;code&gt;TokenStream&lt;/code&gt; 转换成语法树 &lt;code&gt;syn::DeriveInput&lt;/code&gt; 。
&lt;/p&gt;
&lt;/div&gt;

&lt;ul class="org-ul"&gt;
&lt;li&gt;&lt;a id="orga29f2d4"&gt;&lt;/a&gt;&lt;code&gt;syn::DeriveInput&lt;/code&gt;&lt;br&gt;
&lt;div class="outline-text-5" id="text-orga29f2d4"&gt;
&lt;p&gt;
对于输入 &lt;code&gt;TokenStream&lt;/code&gt; 使用 &lt;code&gt;parse_macro_input!&lt;/code&gt; 将它解析为语法树 &lt;code&gt;DeriveInput&lt;/code&gt; ，之后就可以通过对语法树的操作生成新的语法树
&lt;/p&gt;
&lt;/div&gt;
&lt;/li&gt;

&lt;li&gt;&lt;a id="orgc25fad7"&gt;&lt;/a&gt;&lt;code&gt;syn::spanned::Spanned&lt;/code&gt;&lt;br&gt;
&lt;div class="outline-text-5" id="text-orgc25fad7"&gt;
&lt;p&gt;
对重复结构的操作，使用 &lt;code&gt;span()&lt;/code&gt; 配合 &lt;code&gt;quote::qoute_spanned!&lt;/code&gt; 实现
&lt;/p&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;

&lt;div id="outline-container-orgdec9f69" class="outline-4"&gt;
&lt;h4 id="orgdec9f69"&gt;quote: rust 代码模板&lt;/h4&gt;
&lt;div class="outline-text-4" id="text-orgdec9f69"&gt;
&lt;p&gt;
&lt;a href="https://crates.io/crates/quote"&gt;quote&lt;/a&gt; 的 &lt;code&gt;quote!&lt;/code&gt; 宏可以将 rust 语法数据结构变成 &lt;code&gt;TokenStream&lt;/code&gt;
&lt;/p&gt;

&lt;p&gt;
&lt;code&gt;qoute_spanned!&lt;/code&gt; 宏可以将重复结构中的一个元素单独操作。
&lt;/p&gt;

&lt;p&gt;
qoute 的宏类似于 &lt;code&gt;macro_rules!&lt;/code&gt; 只是把 &lt;code&gt;$&lt;/code&gt; 换成  &lt;code&gt;#&lt;/code&gt;
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/body&gt;
&lt;/html&gt;
</description><category>macro</category><category>rust</category><guid>https://chimez.github.io/posts/rust-macro/</guid><pubDate>Fri, 20 Aug 2021 05:32:43 GMT</pubDate></item><item><title>rust c ffi</title><link>https://chimez.github.io/posts/rust-c-ffi/</link><dc:creator>chimez</dc:creator><description>&lt;div id="outline-container-org565d44d" class="outline-2"&gt;
&lt;h2 id="org565d44d"&gt;Rust C FFI&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-org565d44d"&gt;
&lt;/div&gt;
&lt;div id="outline-container-org39b7e15" class="outline-3"&gt;
&lt;h3 id="org39b7e15"&gt;rust-bindgen: rust 调用 c&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-org39b7e15"&gt;
&lt;p&gt;
&lt;a href="https://github.com/rust-lang/rust-bindgen"&gt;rust-bindgen&lt;/a&gt; 是在编译时由头文件生成绑定代码的工具。由它封装的库称为 &lt;code&gt;xxx-sys&lt;/code&gt;
&lt;/p&gt;
&lt;/div&gt;

&lt;div id="outline-container-org9f1c57e" class="outline-4"&gt;
&lt;h4 id="org9f1c57e"&gt;常量宏&lt;/h4&gt;
&lt;div class="outline-text-4" id="text-org9f1c57e"&gt;
&lt;p&gt;
对于形如 &lt;code&gt;#define XX (int)0&lt;/code&gt; 这样的有类型转换的宏是不能自动生成绑定的，可以在 &lt;code&gt;wrapper.h&lt;/code&gt; 中写
&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;static&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;const&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;_XX&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;XX&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;
来创建绑定。
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-org8318d8b" class="outline-3"&gt;
&lt;h3 id="org8318d8b"&gt;libc: 系统库&lt;/h3&gt;
&lt;/div&gt;


&lt;div id="outline-container-orgf2f69a2" class="outline-3"&gt;
&lt;h3 id="orgf2f69a2"&gt;c 类型&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-orgf2f69a2"&gt;
&lt;p&gt;
一般的类型在 &lt;code&gt;std::os::raw&lt;/code&gt; 中，或者使用在 &lt;code&gt;libc&lt;/code&gt; 中的重新绑定。
&lt;/p&gt;
&lt;/div&gt;

&lt;div id="outline-container-org2d44e2a" class="outline-4"&gt;
&lt;h4 id="org2d44e2a"&gt;字符串&lt;/h4&gt;
&lt;div class="outline-text-4" id="text-org2d44e2a"&gt;
&lt;p&gt;
c 的字符串实际上是 &lt;code&gt;&amp;amp;[u8]&lt;/code&gt; 数组，可以用 &lt;code&gt;std::ffi::CString&lt;/code&gt; 和 &lt;code&gt;std::ffi::CStr&lt;/code&gt;, 其中 &lt;code&gt;CString&lt;/code&gt; 拥有所有权， &lt;code&gt;CStr&lt;/code&gt; 是借用。
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-org07d6fd8" class="outline-4"&gt;
&lt;h4 id="org07d6fd8"&gt;指针&lt;/h4&gt;
&lt;div class="outline-text-4" id="text-org07d6fd8"&gt;
&lt;p&gt;
c 的常量指针 &lt;code&gt;const int *&lt;/code&gt; 对应 &lt;code&gt;*const i32&lt;/code&gt;, 一般指针 &lt;code&gt;int *&lt;/code&gt; 对应 &lt;code&gt;*mut i32&lt;/code&gt;. 两级指针 &lt;code&gt;int **&lt;/code&gt; 对应 &lt;code&gt;*mut *mut int&lt;/code&gt; 以此类推。
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-orge2f5c39" class="outline-4"&gt;
&lt;h4 id="orge2f5c39"&gt;结构体&lt;/h4&gt;
&lt;div class="outline-text-4" id="text-orge2f5c39"&gt;
&lt;p&gt;
rust 中定义与 c 兼容的结构体的方法为
&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct MyStruct {
	pub a: ::std::os::raw::c_int,
    }
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-org739fb7c" class="outline-4"&gt;
&lt;h4 id="org739fb7c"&gt;&lt;code&gt;sizeof&lt;/code&gt;&lt;/h4&gt;
&lt;div class="outline-text-4" id="text-org739fb7c"&gt;
&lt;p&gt;
与 c 的 &lt;code&gt;sizeof&lt;/code&gt; 相同的是 &lt;code&gt;std::mem::sizeof&lt;/code&gt;
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-org3a631b2" class="outline-4"&gt;
&lt;h4 id="org3a631b2"&gt;&lt;code&gt;offsetof&lt;/code&gt;&lt;/h4&gt;
&lt;div class="outline-text-4" id="text-org3a631b2"&gt;
&lt;p&gt;
使用 &lt;a href="https://github.com/Gilnaa/memoffset"&gt;memoffset&lt;/a&gt; 的 &lt;code&gt;offset_of!&lt;/code&gt; 宏来获得。
&lt;/p&gt;

&lt;p&gt;
如果不希望结构体内存对齐，使用 &lt;code&gt;#[repr(packed)]&lt;/code&gt;
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-org436f60d" class="outline-3"&gt;
&lt;h3 id="org436f60d"&gt;问题解决&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-org436f60d"&gt;
&lt;/div&gt;
&lt;div id="outline-container-orgfb29b67" class="outline-4"&gt;
&lt;h4 id="orgfb29b67"&gt;传递 &lt;code&gt;argc, argv&lt;/code&gt;&lt;/h4&gt;
&lt;div class="outline-text-4" id="text-orgfb29b67"&gt;
&lt;p&gt;
参考 &lt;a href="https://stackoverflow.com/questions/34379641/how-do-i-convert-rust-args-into-the-argc-and-argv-c-equivalents"&gt;stackoverflow&lt;/a&gt;
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    extern crate libc;

    use libc::{c_char, c_int, c_void};
    use std::ffi::CString;

    extern "C" {
	fn foo(argc: *mut c_int, argv: *mut *mut *mut c_char);
    }

    fn main() {
	let mut c_args: Vec&amp;lt;*mut c_char&amp;gt; = std::env::args()
	    .map(|arg| CString::new(arg).unwrap().into_raw())
	    .collect();
	unsafe {
	    let mut c_argc: c_int = c_args.len() as c_int;
	    let mut c_argv: *mut *mut c_char = c_args.as_mut_ptr();

	    foo(&amp;amp;mut c_argc as *mut c_int, &amp;amp;mut c_argv);
	}
    }
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/body&gt;
&lt;/html&gt;
</description><category>rust</category><guid>https://chimez.github.io/posts/rust-c-ffi/</guid><pubDate>Thu, 19 Aug 2021 01:49:34 GMT</pubDate></item><item><title>Rust Optimization</title><link>https://chimez.github.io/posts/rust-optimization/</link><dc:creator>chimez</dc:creator><description>&lt;div id="outline-container-orgada2db2" class="outline-2"&gt;
&lt;h2 id="orgada2db2"&gt;Rust 性能优化&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-orgada2db2"&gt;
&lt;p&gt;
这里所称性能优化实际上就是 Rust 的正确打开方式，因为 Rust 的安全特性导致按照 c/c++ 方式直接写程序有可能速度会比较慢。
&lt;/p&gt;
&lt;/div&gt;

&lt;div id="outline-container-orga1805ef" class="outline-3"&gt;
&lt;h3 id="orga1805ef"&gt;避免边界检查&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-orga1805ef"&gt;
&lt;/div&gt;
&lt;div id="outline-container-org9343478" class="outline-4"&gt;
&lt;h4 id="org9343478"&gt;参考资料&lt;/h4&gt;
&lt;div class="outline-text-4" id="text-org9343478"&gt;
&lt;ol class="org-ol"&gt;
&lt;li&gt;&lt;a href="https://users.rust-lang.org/t/how-to-malloc-an-array-in-heap-like-c/27827/40"&gt;这里&lt;/a&gt; 的说明&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-org1dc7415" class="outline-4"&gt;
&lt;h4 id="org1dc7415"&gt;使用 slice 为编译器提示长度&lt;/h4&gt;
&lt;div class="outline-text-4" id="text-org1dc7415"&gt;
&lt;p&gt;
vec 等类型的参数传递给函数后，在函数内部重新用 slice 的方式定义变量
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    fn f_for(a: &amp;amp;Vec&amp;lt;f64&amp;gt;, b: &amp;amp;mut Vec&amp;lt;f64&amp;gt;){
	// 不可变量直接用长度做 slice
	let a = &amp;amp;a[..a.len()];
	// 可变量先定义一个长度再做 slice
	let len_b = b.len();
	let b = &amp;amp;mut b[..len_b];
    }
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-orgf0455da" class="outline-4"&gt;
&lt;h4 id="orgf0455da"&gt;尽可能使用迭代器而不是指标循环&lt;/h4&gt;
&lt;div class="outline-text-4" id="text-orgf0455da"&gt;
&lt;p&gt;
迭代器中的边界检查被优化掉了
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    for (i, ai) in a.iter().enumerate(){
	do_something();
    }

    // 而不是

    for i in 0..n{
	a[i];
    }
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-orge2bf42c" class="outline-4"&gt;
&lt;h4 id="orge2bf42c"&gt;不得不用指标获得值时用 unsafe 的非检查方式&lt;/h4&gt;
&lt;div class="outline-text-4" id="text-orge2bf42c"&gt;
&lt;p&gt;
当确保指标不会越界时就可以大胆使用 unsafe
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    for i in 0..n{
	unsafe {
	    a.get_unchecked(i);
	}
    }

    // not 
    a[i];
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/body&gt;
&lt;/html&gt;
</description><category>rust</category><guid>https://chimez.github.io/posts/rust-optimization/</guid><pubDate>Thu, 20 May 2021 06:33:34 GMT</pubDate></item></channel></rss>