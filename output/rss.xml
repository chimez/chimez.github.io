<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="assets/xml/rss.xsl" media="all"?><rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>chimez's blog</title><link>https://chimez.github.io/</link><description>Blog of chimez</description><atom:link href="https://chimez.github.io/rss.xml" rel="self" type="application/rss+xml"></atom:link><language>zh_cn</language><copyright>Contents © 2025 &lt;a href="mailto:chimez@163.com"&gt;chimez&lt;/a&gt; </copyright><lastBuildDate>Wed, 18 Jun 2025 02:51:08 GMT</lastBuildDate><generator>Nikola (getnikola.com)</generator><docs>http://blogs.law.harvard.edu/tech/rss</docs><item><title>POSIX 多进程编程</title><link>https://chimez.github.io/posts/posix-duo-jin-cheng-bian-cheng/</link><dc:creator>chimez</dc:creator><description>&lt;div id="table-of-contents" role="doc-toc"&gt;
&lt;h2&gt;Table of Contents&lt;/h2&gt;
&lt;div id="text-table-of-contents" role="doc-toc"&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://chimez.github.io/posts/posix-duo-jin-cheng-bian-cheng/#orgd15720c"&gt;启动和终止子进程&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://chimez.github.io/posts/posix-duo-jin-cheng-bian-cheng/#orge1e81eb"&gt;&lt;code&gt;fork&lt;/code&gt; 创建子进程&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://chimez.github.io/posts/posix-duo-jin-cheng-bian-cheng/#orgde4d535"&gt;&lt;code&gt;wait&lt;/code&gt; 等待子进程退出&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://chimez.github.io/posts/posix-duo-jin-cheng-bian-cheng/#org5219533"&gt;&lt;code&gt;waitpid&lt;/code&gt; 等待特定的子进程退出&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://chimez.github.io/posts/posix-duo-jin-cheng-bian-cheng/#org9e4fbb5"&gt;例子：创建一系列子进程并等待&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://chimez.github.io/posts/posix-duo-jin-cheng-bian-cheng/#org9e2d968"&gt;管道 Pipe&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://chimez.github.io/posts/posix-duo-jin-cheng-bian-cheng/#org5060c9e"&gt;&lt;code&gt;pipe&lt;/code&gt; 创建管道&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://chimez.github.io/posts/posix-duo-jin-cheng-bian-cheng/#orgdd4374a"&gt;例子：pingpong&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://chimez.github.io/posts/posix-duo-jin-cheng-bian-cheng/#orgb994410"&gt;信号量 System V Semaphores&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://chimez.github.io/posts/posix-duo-jin-cheng-bian-cheng/#orge575220"&gt;&lt;code&gt;semget&lt;/code&gt; 获得信号量集&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://chimez.github.io/posts/posix-duo-jin-cheng-bian-cheng/#orgc42dca4"&gt;&lt;code&gt;semctl&lt;/code&gt; 配置信号量集&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://chimez.github.io/posts/posix-duo-jin-cheng-bian-cheng/#org025c727"&gt;&lt;code&gt;semop&lt;/code&gt; 操作信号&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://chimez.github.io/posts/posix-duo-jin-cheng-bian-cheng/#orga9bead1"&gt;例子：互斥锁&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
并行计算方案包括多线程并行、多进程并行、异构并行和分布式并行。
这篇文章主要讲如何利用 POSIX 标准库（C语言）进行多进程并行计算，包括如何启动和终止子进程和进程间通信的两种方法：管道（pipe）与信号量（semaphore）。
至于其它的进程间通信方式，例如：共享内存（mmap）、网络（sockets）、信号（signal）和消息队列等，都是适用性更广也更复杂的技术，在这篇短文中无法涉及。
&lt;/p&gt;
&lt;div id="outline-container-orgd15720c" class="outline-2"&gt;
&lt;h2 id="orgd15720c"&gt;启动和终止子进程&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-orgd15720c"&gt;
&lt;p&gt;
使用 &lt;code&gt;fork&lt;/code&gt; 创建子进程，使用 &lt;code&gt;wait&lt;/code&gt; 或 &lt;code&gt;waitpid&lt;/code&gt; 等待运行结束。
&lt;/p&gt;
&lt;/div&gt;
&lt;div id="outline-container-orge1e81eb" class="outline-3"&gt;
&lt;h3 id="orge1e81eb"&gt;&lt;code&gt;fork&lt;/code&gt; 创建子进程&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-orge1e81eb"&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="cp"&gt;#include&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="cpf"&gt;&amp;lt;unistd.h&amp;gt;&lt;/span&gt;

&lt;span class="kt"&gt;pid_t&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;fork&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;void&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
&lt;b&gt;返回值&lt;/b&gt;
&lt;/p&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;执行成功：在父进程中返回子进程的 &lt;code&gt;pid_t&lt;/code&gt;, 在子进程中返回 0；&lt;/li&gt;
&lt;li&gt;执行失败：返回-1，并设置 &lt;code&gt;errno&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;在 GNU C 中 &lt;code&gt;pid_t&lt;/code&gt; 就是 &lt;code&gt;int&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;
&lt;b&gt;说明&lt;/b&gt;
&lt;/p&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;&lt;code&gt;fork&lt;/code&gt; 启动的子进程会获得与此时主进程完全一样的内存上下文，这意味着主进程此时可以访问的一切内容在子进程中都可用，甚至连指针地址都一样。
如果连续启动了两个子进程，在两次 &lt;code&gt;fork&lt;/code&gt; 中有任何变量在主进程被修改了，前面的子进程看到的还是原来的值，后面的子进程看到的是新的值。
同时由于进程之间内存是隔离的，子进程修改任何内存都不会影响到其它子进程。
&lt;code&gt;fork&lt;/code&gt; 对内存使用 copy-on-write 机制，没有修改的内存就访问同样的内容，但如果修改就会复制所有内存。&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-orgde4d535" class="outline-3"&gt;
&lt;h3 id="orgde4d535"&gt;&lt;code&gt;wait&lt;/code&gt; 等待子进程退出&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-orgde4d535"&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="cp"&gt;#include&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="cpf"&gt;&amp;lt;sys/wait.h&amp;gt;&lt;/span&gt;

&lt;span class="kt"&gt;pid_t&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;wait&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;stat_loc&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
&lt;b&gt;参数&lt;/b&gt;
&lt;/p&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;&lt;code&gt;int *stat_loc&lt;/code&gt; 捕获子进程的退出值，设为 &lt;code&gt;NULL&lt;/code&gt; 则忽略退出值。具体的返回参数参看 &lt;a href="https://man7.org/linux/man-pages/man2/wait.2.html"&gt;man 2 wait&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;
&lt;b&gt;返回值&lt;/b&gt;
&lt;/p&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;返回捕获到的子进程ID，失败返回-1，并设置 &lt;code&gt;errno&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-org5219533" class="outline-3"&gt;
&lt;h3 id="org5219533"&gt;&lt;code&gt;waitpid&lt;/code&gt; 等待特定的子进程退出&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-org5219533"&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="cp"&gt;#include&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="cpf"&gt;&amp;lt;sys/wait.h&amp;gt;&lt;/span&gt;

&lt;span class="kt"&gt;pid_t&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;waitpid&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;pid_t&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;pid&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;stat_loc&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;options&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
&lt;b&gt;参数&lt;/b&gt;
&lt;/p&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;&lt;code&gt;pid_t pid&lt;/code&gt; 等待特定的子进程&lt;/li&gt;
&lt;li&gt;&lt;code&gt;int *stat_loc&lt;/code&gt; 捕获子进程的退出值，设为 &lt;code&gt;NULL&lt;/code&gt; 则忽略退出值, 与 &lt;code&gt;wait&lt;/code&gt; 的参数相同&lt;/li&gt;
&lt;li&gt;&lt;code&gt;int options&lt;/code&gt; 等待的行为可以通过一系列选项来设置，具体的返回参数参看 &lt;a href="https://man7.org/linux/man-pages/man2/wait.2.html"&gt;man 2 waitpid&lt;/a&gt;，设成 &lt;code&gt;0&lt;/code&gt; 则与 &lt;code&gt;wait&lt;/code&gt; 行为相同。&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;
&lt;b&gt;返回值&lt;/b&gt;
&lt;/p&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;返回捕获到的子进程ID，失败返回-1&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-org9e4fbb5" class="outline-3"&gt;
&lt;h3 id="org9e4fbb5"&gt;例子：创建一系列子进程并等待&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-org9e4fbb5"&gt;
&lt;p&gt;
在这个例子中创建了 10 个子进程，按照创建顺序给它们标号，让这些进程按照创建顺序的逆序打印自己的序号，主进程则会等待到所有子进程退出再结束。
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="cp"&gt;#include&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="cpf"&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;
&lt;span class="cp"&gt;#include&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="cpf"&gt;&amp;lt;stdlib.h&amp;gt;&lt;/span&gt;
&lt;span class="cp"&gt;#include&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="cpf"&gt;&amp;lt;unistd.h&amp;gt;&lt;/span&gt;
&lt;span class="cp"&gt;#include&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="cpf"&gt;&amp;lt;sys/wait.h&amp;gt;&lt;/span&gt;

&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;

&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;n_process&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="kt"&gt;pid_t&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;pids&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;calloc&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n_process&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;sizeof&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;pid_t&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;

&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;n_process&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;pids&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;fork&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;pids&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="cm"&gt;/* in child process */&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="n"&gt;sleep&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n_process&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="n"&gt;printf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"child %d&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="n"&gt;printf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"child %d, pid_t: %d&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;pids&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="cm"&gt;/* pointer address is the same */&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="n"&gt;printf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"child %d, pids ptr: %p&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;pids&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="cm"&gt;/* but value is different */&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="n"&gt;printf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"child %d, all pids: "&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;n_process&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="n"&gt;printf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"%d "&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;pids&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="n"&gt;printf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="n"&gt;exit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="cm"&gt;/* in parent process */&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="n"&gt;printf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"all pids: &lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;n_process&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;printf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"%d "&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;pids&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="n"&gt;printf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="cm"&gt;/* get parent pid */&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="n"&gt;printf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"pid: %d&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;getpid&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;

&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="cm"&gt;/* wait subprocess to finish */&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;n_process&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="cm"&gt;/* wait(NULL); */&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;waitpid&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;pids&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;NULL&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="n"&gt;free&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;pids&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-org9e2d968" class="outline-2"&gt;
&lt;h2 id="org9e2d968"&gt;管道 Pipe&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-org9e2d968"&gt;
&lt;p&gt;
POSIX 提供了单向管道，可以从一个进程向另一个进程单向地传输信息。
&lt;/p&gt;
&lt;/div&gt;
&lt;div id="outline-container-org5060c9e" class="outline-3"&gt;
&lt;h3 id="org5060c9e"&gt;&lt;code&gt;pipe&lt;/code&gt; 创建管道&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-org5060c9e"&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="cp"&gt;#include&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="cpf"&gt;&amp;lt;unistd.h&amp;gt;&lt;/span&gt;

&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;pipe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;fildes&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
&lt;b&gt;参数&lt;/b&gt;
&lt;/p&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;&lt;code&gt;int fildes[2]&lt;/code&gt; 创建一个管道的两端，值是整数文件标识, &lt;code&gt;fildes[0]&lt;/code&gt; 是管道的出口， &lt;code&gt;fildes[1]&lt;/code&gt; 是管道的入口&lt;/li&gt;
&lt;li&gt;发送信息的进程应该先把管道出口关闭，而接收信息的进程应该先把管道入口关闭&lt;/li&gt;
&lt;li&gt;如果管道的两端在同一个进程里都关闭了，再向这个管道发送信息会产生 &lt;code&gt;SIGPIPE&lt;/code&gt; 信号&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;
&lt;b&gt;返回值&lt;/b&gt;
&lt;/p&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;成功创建管道返回 &lt;code&gt;0&lt;/code&gt;, 失败返回 &lt;code&gt;-1&lt;/code&gt; 并设置 &lt;code&gt;errno&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-orgdd4374a" class="outline-3"&gt;
&lt;h3 id="orgdd4374a"&gt;例子：pingpong&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-orgdd4374a"&gt;
&lt;p&gt;
两个进程之间互相发送数据，一个数据在两个管道之间来回传递，类似打乒乓球，这是 MPI 中最简单的例子
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="cp"&gt;#include&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="cpf"&gt;&amp;lt;sys/types.h&amp;gt;&lt;/span&gt;
&lt;span class="cp"&gt;#include&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="cpf"&gt;&amp;lt;unistd.h&amp;gt;&lt;/span&gt;
&lt;span class="cp"&gt;#include&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="cpf"&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;
&lt;span class="cp"&gt;#include&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="cpf"&gt;&amp;lt;stdlib.h&amp;gt;&lt;/span&gt;

&lt;span class="cp"&gt;#define TOTAL_NUMBER 10&lt;/span&gt;

&lt;span class="kt"&gt;void&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;child&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;pipe_in&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;pipe_out&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="kt"&gt;pid_t&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;pid&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;getpid&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="n"&gt;printf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"start pid: %d&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;pid&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;recv_count&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;send_count&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="kt"&gt;char&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;buf&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;number&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="k"&gt;while&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;recv_count&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;TOTAL_NUMBER&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;||&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;send_count&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;TOTAL_NUMBER&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;

&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="cm"&gt;/* clear buf */&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="n"&gt;buf&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="cm"&gt;/* read from pipe_in into buf */&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;read&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;pipe_in&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;buf&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;recv_count&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;+=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;number&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;atoi&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;buf&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;printf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"pid=%d: recv %d&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;pid&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;number&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="cm"&gt;/* write to pipe_out */&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;number&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;+=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;sprintf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;buf&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;"%d"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;number&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;write&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;pipe_out&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;buf&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;printf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"pid=%d: send %d&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;pid&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;number&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;send_count&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;+=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;void&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;pipe_tochild&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;pipe_fromchild&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;

&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="cm"&gt;/* Create the pipes. */&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;pipe&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;pipe_tochild&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;||&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;pipe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;pipe_fromchild&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;EXIT_FAILURE&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;fork&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="cm"&gt;/* child process */&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;close&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;pipe_tochild&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;close&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;pipe_fromchild&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;child&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;pipe_tochild&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;pipe_fromchild&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;close&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;pipe_tochild&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;close&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;pipe_fromchild&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;exit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="cm"&gt;/* parent process */&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="n"&gt;close&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;pipe_tochild&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="n"&gt;close&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;pipe_fromchild&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;

&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="cm"&gt;/* send first number */&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="kt"&gt;char&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;buf&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="n"&gt;sprintf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;buf&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;"%d"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="n"&gt;write&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;pipe_tochild&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;buf&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="cm"&gt;/* loop */&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="n"&gt;child&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;pipe_fromchild&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;pipe_tochild&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="n"&gt;close&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;pipe_fromchild&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="n"&gt;close&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;pipe_tochild&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;

&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="n"&gt;wait&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;NULL&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-orgb994410" class="outline-2"&gt;
&lt;h2 id="orgb994410"&gt;信号量 System V Semaphores&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-orgb994410"&gt;
&lt;p&gt;
信号量有两种，一个是旧的 System V 一个是标准 POSIX。System V 的支持更广，POSIX 标准在许多系统上都没有实现，所以这里只解释 System V 信号量。
&lt;/p&gt;
&lt;/div&gt;
&lt;div id="outline-container-orge575220" class="outline-3"&gt;
&lt;h3 id="orge575220"&gt;&lt;code&gt;semget&lt;/code&gt; 获得信号量集&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-orge575220"&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="cp"&gt;#include&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="cpf"&gt;&amp;lt;sys/sem.h&amp;gt;&lt;/span&gt;

&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;semget&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;key_t&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;nsems&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;semflg&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
新建或访问已有的信号量集。
&lt;/p&gt;

&lt;p&gt;
&lt;b&gt;参数&lt;/b&gt;
&lt;/p&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;&lt;code&gt;key_t key&lt;/code&gt; 信号量集的键。每个信号量集都有唯一的键，自定义键名通过 &lt;a href="https://man7.org/linux/man-pages/man3/ftok.3.html"&gt;ftok&lt;/a&gt; 创建，也可以设成 &lt;code&gt;IPC_PRIVATE&lt;/code&gt; 来新建一个只有当前进程和子进程可见的信号量集&lt;/li&gt;
&lt;li&gt;&lt;code&gt;int nsems&lt;/code&gt; 信号量集中信号的个数&lt;/li&gt;
&lt;li&gt;&lt;code&gt;int semflg&lt;/code&gt; 控制创建和访问权限。
&lt;ul class="org-ul"&gt;
&lt;li&gt;&lt;code&gt;IPC_CREAT&lt;/code&gt; 表示创建新的信号量集&lt;/li&gt;
&lt;li&gt;&lt;code&gt;IPC_CREAT | IPC_EXCL&lt;/code&gt; 表示创建新的信号量集，并且当之前已经存在信号量集时失败&lt;/li&gt;
&lt;li&gt;&lt;code&gt;IPC_CREAT | 0666&lt;/code&gt; 创建时可以设置权限，与文件的权限规则相同&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;
&lt;b&gt;返回值&lt;/b&gt;
&lt;/p&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;成功时返回信号量集的ID &lt;code&gt;semid&lt;/code&gt; ，失败时返回 -1 并设置 errno&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-orgc42dca4" class="outline-3"&gt;
&lt;h3 id="orgc42dca4"&gt;&lt;code&gt;semctl&lt;/code&gt; 配置信号量集&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-orgc42dca4"&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;#include &amp;lt;sys/sem.h&amp;gt;

int semctl(int semid, int semnum, int cmd, ...); /* union semun sem_perm */

union semun {
    int     val;            /* value for SETVAL */
    struct  semid_ds *buf;  /* buffer for IPC_STAT &amp;amp; IPC_SET */
    u_short *array;         /* array for GETALL &amp;amp; SETALL */
};
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
&lt;code&gt;semctl&lt;/code&gt; 的作用配置信号量集 &lt;code&gt;semid&lt;/code&gt; 中的第 &lt;code&gt;semnum&lt;/code&gt; 个参数的值。
配置行为由 &lt;code&gt;cmd&lt;/code&gt; 指定，配置的值是可选的第四个参数 &lt;code&gt;sem_union&lt;/code&gt; 。
配置的值很多，参看 &lt;a href="https://man7.org/linux/man-pages/man2/semctl.2.html"&gt;man semctl&lt;/a&gt;.
&lt;/p&gt;

&lt;p&gt;
&lt;b&gt;参数&lt;/b&gt;
&lt;/p&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;&lt;code&gt;int semid&lt;/code&gt; 信号量集的 ID&lt;/li&gt;
&lt;li&gt;&lt;code&gt;int semnum&lt;/code&gt; 信号量集中的第几个信号&lt;/li&gt;
&lt;li&gt;&lt;code&gt;int cmd&lt;/code&gt; 要执行的操作，下面是常用的一些选项
&lt;ul class="org-ul"&gt;
&lt;li&gt;&lt;code&gt;SETVAL&lt;/code&gt; 把信号量的值设成 &lt;code&gt;sem_union.val&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;SETALL&lt;/code&gt; 把所有的信号量的值都设成 &lt;code&gt;sem_union.val&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;IPC_RMID&lt;/code&gt; 清除信号量&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;可选的第四个参数 &lt;code&gt;union semun sem_union&lt;/code&gt; 设置的值&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;
&lt;b&gt;返回值&lt;/b&gt;
&lt;/p&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;成功时返回非负值，与 &lt;code&gt;cmd&lt;/code&gt; 设置有关&lt;/li&gt;
&lt;li&gt;失败时返回 -1，并设置 errno&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-org025c727" class="outline-3"&gt;
&lt;h3 id="org025c727"&gt;&lt;code&gt;semop&lt;/code&gt; 操作信号&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-org025c727"&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;#include &amp;lt;sys/sem.h&amp;gt;

int semop(int semid, struct sembuf *sops, size_t nsops);

struct sembuf {
    u_short sem_num;        /* semaphore */
    short   sem_op;         /* semaphore operation */
    short   sem_flg;        /* operation flags */
};
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;
&lt;code&gt;semop&lt;/code&gt; 的作用是在信号量集 &lt;code&gt;semid&lt;/code&gt; 上执行 &lt;code&gt;nsops&lt;/code&gt; 个原子操作，每个操作由数组 &lt;code&gt;sops&lt;/code&gt; 定义。
配置行为由 &lt;code&gt;cmd&lt;/code&gt; 指定，配置的值是可选的第四个参数 &lt;code&gt;sem_union&lt;/code&gt; 。
配置的值很多，参看 &lt;a href="https://man7.org/linux/man-pages/man2/semctl.2.html"&gt;man semctl&lt;/a&gt;.
&lt;/p&gt;

&lt;p&gt;
&lt;b&gt;参数&lt;/b&gt;
&lt;/p&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;&lt;code&gt;int semid&lt;/code&gt; 信号量集的 ID&lt;/li&gt;
&lt;li&gt;&lt;code&gt;struct sembuf *sops&lt;/code&gt; 对信号的操作
&lt;ul class="org-ul"&gt;
&lt;li&gt;&lt;code&gt;u_short sem_num&lt;/code&gt; 对第几个信号操作&lt;/li&gt;
&lt;li&gt;&lt;code&gt;short sem_op&lt;/code&gt; 具体的操作&lt;/li&gt;
&lt;li&gt;&lt;code&gt;short sem_flg&lt;/code&gt; 控制操作的行为&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;size_t nsops&lt;/code&gt; 数组 &lt;code&gt;sops&lt;/code&gt; 的长度&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;
&lt;b&gt;&lt;code&gt;sem_op&lt;/code&gt; 的几种情况&lt;/b&gt;
&lt;/p&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;&lt;code&gt;&amp;gt;0&lt;/code&gt; 新的信号量值 = 旧的信号量值 + &lt;code&gt;sem_op&lt;/code&gt;, 立即执行&lt;/li&gt;
&lt;li&gt;&lt;code&gt;=0&lt;/code&gt; 阻塞直到信号量的值变成 0&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&amp;lt;0&lt;/code&gt; 阻塞直到 &lt;code&gt;旧信号量 + sem_op &amp;gt;= 0&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;
&lt;b&gt;返回值&lt;/b&gt;
&lt;/p&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;成功时返回 0&lt;/li&gt;
&lt;li&gt;失败时返回 -1，并设置 errno&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-orga9bead1" class="outline-3"&gt;
&lt;h3 id="orga9bead1"&gt;例子：互斥锁&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-orga9bead1"&gt;
&lt;p&gt;
这个例子里子进程和主进程一起对共享的变量 &lt;code&gt;shared_int&lt;/code&gt; 数数，如果不加锁，最后输出的数字会比 2000000 少，也就是出现了数据竞争，而加锁之后就不会出现这种问题了。
可以注释掉 &lt;code&gt;lock&lt;/code&gt; 和 &lt;code&gt;unlock&lt;/code&gt; 来自己观察一下。
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="cp"&gt;#include&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="cpf"&gt;&amp;lt;sys/types.h&amp;gt;&lt;/span&gt;
&lt;span class="cp"&gt;#include&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="cpf"&gt;&amp;lt;unistd.h&amp;gt;&lt;/span&gt;
&lt;span class="cp"&gt;#include&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="cpf"&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;
&lt;span class="cp"&gt;#include&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="cpf"&gt;&amp;lt;stdlib.h&amp;gt;&lt;/span&gt;
&lt;span class="cp"&gt;#include&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="cpf"&gt;&amp;lt;sys/sem.h&amp;gt;&lt;/span&gt;
&lt;span class="cp"&gt;#include&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="cpf"&gt;&amp;lt;sys/mman.h&amp;gt;&lt;/span&gt;


&lt;span class="kt"&gt;void&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;lock&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;semid&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="k"&gt;struct&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nc"&gt;sembuf&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;sb&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;-1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="n"&gt;semop&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;semid&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;sb&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kt"&gt;void&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;unlock&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;semid&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="k"&gt;struct&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nc"&gt;sembuf&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;sb&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="n"&gt;semop&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;semid&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;sb&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;

&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;shared_int&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;mmap&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;NULL&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;sizeof&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;PROT_READ&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;PROT_WRITE&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;MAP_SHARED&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;MAP_ANON&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;-1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;shared_int&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;MAP_FAILED&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;perror&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"mmap"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;exit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;EXIT_FAILURE&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;semid&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;semget&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;IPC_PRIVATE&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mo"&gt;0666&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;IPC_CREAT&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="k"&gt;union&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nc"&gt;semun&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;sem_union&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="n"&gt;sem_union&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;val&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="n"&gt;semctl&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;semid&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;SETVAL&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;sem_union&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;fork&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="mi"&gt;1000000&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="n"&gt;lock&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;semid&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;shared_int&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="n"&gt;unlock&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;semid&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;exit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;


&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="mi"&gt;1000000&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;lock&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;semid&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;shared_int&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;unlock&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;semid&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="n"&gt;wait&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;NULL&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="n"&gt;printf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"final, %d&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;shared_int&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="n"&gt;semctl&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;semid&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;IPC_RMID&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;sem_union&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="n"&gt;munmap&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;shared_int&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;sizeof&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;

&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;</description><category>C</category><category>concurrency</category><category>parallel</category><guid>https://chimez.github.io/posts/posix-duo-jin-cheng-bian-cheng/</guid><pubDate>Tue, 24 Oct 2023 04:46:17 GMT</pubDate></item><item><title>TeNPy 调研</title><link>https://chimez.github.io/posts/tenpy-diao-yan/</link><dc:creator>chimez</dc:creator><description>&lt;p&gt;
DMRG / MPS / 张量网络的开源库有很多，例如 &lt;a href="https://github.com/tenpy/tenpy.git"&gt;TeNPy&lt;/a&gt;, &lt;a href="https://itensor.org/"&gt;ITensor&lt;/a&gt;, &lt;a href="https://github.com/jutho/TensorKit.jl"&gt;TensorKit&lt;/a&gt;, &lt;a href="https://bitbucket.org/aweichselbaum/workspace/projects/QS"&gt;QSpace&lt;/a&gt;, &lt;a href="https://github.com/g1257/dmrgpp"&gt;DMRG++&lt;/a&gt;, &lt;a href="https://uni10.gitlab.io/"&gt;uni10&lt;/a&gt;, &lt;a href="https://github.com/cmendl/pytenet"&gt;PyTeNet&lt;/a&gt;, &lt;a href="https://github.com/jcmgray/quimb"&gt;quimb&lt;/a&gt;, &lt;a href="https://github.com/dsuess/mpnum"&gt;mpnum&lt;/a&gt;, &lt;a href="https://green.physics.lsa.umich.edu/alps_legacy/index.php"&gt;ALPS project&lt;/a&gt;, &lt;a href="https://github.com/issp-center-dev/TeNeS"&gt;TeNeS&lt;/a&gt;, &lt;a href="https://syten.eu/"&gt;SyTen&lt;/a&gt;, 等等。
这个系列文章将会从这些库中选择几个来学习和分析一下。
&lt;/p&gt;


&lt;div id="org7415f95" class="figure"&gt;
&lt;p&gt;&lt;img src="https://imgs.xkcd.com/comics/standards.png" alt="standards.png"&gt;
&lt;/p&gt;
&lt;p&gt;&lt;span class="figure-number"&gt;Figure 1: &lt;/span&gt;让我们再造个轮子🤣&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;
&lt;a href="https://github.com/tenpy/tenpy"&gt;TeNPy&lt;/a&gt;由&lt;a href="https://johannes-hauschild.de/"&gt;Johannes Hauschild&lt;/a&gt;主要开发并维护，Hauschild 的博士导师是 Frank Pollmann，现在在到处做博后。
考虑到 Hauschild 一作的文章没有几个，发表情况并不是很好，所以某种程度上他是在全职做 TeNPy 的开发。
&lt;/p&gt;
&lt;div id="outline-container-orgba3ee3b" class="outline-2"&gt;
&lt;h2 id="orgba3ee3b"&gt;安装&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-orgba3ee3b"&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;# 安装依赖
pip install -U pip numpy scipy cython setuptools wheel build
# 下载源码
git clone https://github.com/tenpy/tenpy.git
# 安装
cd tenpy
pip install -e .
# 测试
cd tests
pip install pytest
pytest
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-orgff962a5" class="outline-2"&gt;
&lt;h2 id="orgff962a5"&gt;代码层级&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-orgff962a5"&gt;
&lt;p&gt;
TeNPy 的代码层级如图&lt;a href="https://chimez.github.io/posts/tenpy-diao-yan/#org3f0f99b"&gt;2&lt;/a&gt;。
&lt;/p&gt;

&lt;ul class="org-ul"&gt;
&lt;li&gt;&lt;code&gt;tenpy.simulations&lt;/code&gt; 是程序的入口，提供运行程序（进行读取参数、运行计算、执行测量、保存结果和中间过程等等）的功能&lt;/li&gt;
&lt;li&gt;&lt;code&gt;tenpy.algorithms&lt;/code&gt; 中实现了多种算法，包括 DMRG、iDMRG、TEBD和TDVP&lt;/li&gt;
&lt;li&gt;&lt;code&gt;tenpy.models&lt;/code&gt; 中实现了各种模型包括自旋、费米、波色和各种晶格结构。二维晶格通过映射到一维来实现。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;tenpy.networks&lt;/code&gt; 中实现了 MPS 和 MPO 类型&lt;/li&gt;
&lt;li&gt;&lt;code&gt;tenpy.linalg&lt;/code&gt; 中实现了带有守恒量的张量以及迭代对角化算法 Lanczos 和 Arnoldi&lt;/li&gt;
&lt;li&gt;&lt;code&gt;tenpy.tools&lt;/code&gt; 中包括一些需要用到其它功能&lt;/li&gt;
&lt;/ul&gt;


&lt;div id="org3f0f99b" class="figure"&gt;
&lt;p&gt;&lt;img src="https://tenpy.readthedocs.io/en/latest/_images/overview.png" alt="overview.png"&gt;
&lt;/p&gt;
&lt;p&gt;&lt;span class="figure-number"&gt;Figure 2: &lt;/span&gt;TeNPy 的代码层级&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-orgf1e2bfa" class="outline-2"&gt;
&lt;h2 id="orgf1e2bfa"&gt;&lt;code&gt;tenpy.linalg.np_conserved.Array&lt;/code&gt;&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-orgf1e2bfa"&gt;
&lt;p&gt;
TeNPy 的基本数据结构是 &lt;code&gt;tenpy.linalg.np_conserved.Array&lt;/code&gt;, 带有守恒荷的张量。
TeNPy 采用带有箭头的 MPS 记号来表示一个张量。
张量的每个指标有若干可能的量子数，这些信息记录在 &lt;code&gt;Array.legs&lt;/code&gt; 属性里。
对于一个有 \(n\) 个指标的张量,  &lt;code&gt;Array.legs&lt;/code&gt; 是长度为 \(n\) 的数组，每个元素都是 &lt;code&gt;tenpy.linalg.charges.LegCharge&lt;/code&gt; , 这里记录了这个指标所有可能的荷以及它是入指标还是出指标。
张量的属性 &lt;code&gt;Array.qtotal&lt;/code&gt; 记录总量子数，只有那些和等于总量子数的块才会被保存。
每个保存的张量块的数据是数组 &lt;code&gt;Array._data&lt;/code&gt; 的一个元素，它对于的量子数则是矩阵 &lt;code&gt;Array._qdata&lt;/code&gt; 的一行。
&lt;/p&gt;

&lt;pre class="example" id="org0ee4e59"&gt;
class Array{
    legs   : List[LegCharge],
    qtotal : Charge,
    _data  : List[numpy.ndarray],
    _qdata : numpy.ndarray[len(​_data), len(legs)],
}
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-orga3c86c4" class="outline-2"&gt;
&lt;h2 id="orga3c86c4"&gt;&lt;code&gt;tenpy.networks.site.Site&lt;/code&gt;&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-orga3c86c4"&gt;
&lt;p&gt;
&lt;code&gt;tenpy.networks.site.Site&lt;/code&gt; 是一个格点或者一个物理指标所需要的数据。
它保存了物理指标所需要的信息 &lt;code&gt;LegCharge&lt;/code&gt;, 以及作用在一个格点上的所有局域算符 &lt;code&gt;Site.ops&lt;/code&gt;, 写模型的哈密顿量所需要的所有算符都是从这里得到的。
除了一般的算符之外还有 Jordan-Wigner 变换（如果需要）要用到的信息。
&lt;/p&gt;

&lt;p&gt;
TeNPy 中实现的 &lt;code&gt;Site&lt;/code&gt; 有如下这些
&lt;/p&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;&lt;code&gt;BosonSite&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ClockSite&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;FermionSite&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;GroupedSite&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;SpinHalfFermionSite&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;SpinHalfHoleSite&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;SpinHalfSite&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;SpinSite&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-orgdee0945" class="outline-2"&gt;
&lt;h2 id="orgdee0945"&gt;&lt;code&gt;tenpy.networks.mps.MPS&lt;/code&gt;&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-orgdee0945"&gt;
&lt;p&gt;
对于 \(n\) 格点的链， &lt;code&gt;tenpy.networks.mps.MPS&lt;/code&gt; 就是 \(n\) 个 &lt;code&gt;Site&lt;/code&gt; 和 \(n\) 个 &lt;code&gt;Array&lt;/code&gt;, 这些 &lt;code&gt;Array&lt;/code&gt; 都是三阶张量.
TeNPy 的 MPS 表示记录了每个块的形式（左正则、右正则、对称形式或者叫 Vidal 的 \(\Gamma \Lambda\) 形式）以及需要的奇异值。
&lt;/p&gt;

&lt;pre class="example" id="org0dfeef2"&gt;
class MPS{
    sites: List[Site],
    _B: List[Array],
    _S: List[numpy.ndarray[1d]],
    form: List[form],
}
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-orgffc7bbd" class="outline-2"&gt;
&lt;h2 id="orgffc7bbd"&gt;&lt;code&gt;tenpy.networks.mpo.MPO&lt;/code&gt;&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-orgffc7bbd"&gt;
&lt;p&gt;
&lt;code&gt;tenpy.networks.mpo.MPO&lt;/code&gt; 与 MPS 表示类似，只不过每个块现在是四阶张量。
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-orgaf30fe3" class="outline-2"&gt;
&lt;h2 id="orgaf30fe3"&gt;&lt;code&gt;tenpy.models.model.Model&lt;/code&gt;&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-orgaf30fe3"&gt;
&lt;p&gt;
&lt;code&gt;tenpy.models.model.Model&lt;/code&gt; 用来表示模型的哈密顿量，需要指定元胞格点的信息 &lt;code&gt;Site&lt;/code&gt; 以及晶格结构如何映射到一维链 &lt;code&gt;tenpy.models.lattice.Lattice&lt;/code&gt;.
TeNPy 提供的构造模型的方法是通过 &lt;code&gt;add_onsite&lt;/code&gt;, &lt;code&gt;add_coupling&lt;/code&gt; 等设置哈密顿量里的各项，然后根据需要自动构造 MPO。
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-org6c5420b" class="outline-2"&gt;
&lt;h2 id="org6c5420b"&gt;DMRG 算法&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-org6c5420b"&gt;
&lt;p&gt;
TeNPy 的抽象层次是
&lt;/p&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;由 &lt;code&gt;tenpy.algorithms.algorithm.Algorithm&lt;/code&gt; 提供运行、重启等功能&lt;/li&gt;
&lt;li&gt;然后由 &lt;code&gt;tenpy.algorithms.mps_common.Sweep&lt;/code&gt; 提供扫描的抽象&lt;/li&gt;
&lt;li&gt;每个扫描步骤则使用 &lt;code&gt;tenpy.algorithms.dmrg.DMRGEngine&lt;/code&gt; 它可以是 &lt;code&gt;SingleSiteDMRGEngine&lt;/code&gt; 或者 &lt;code&gt;TwoSiteDMRGEngine&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;</description><category>python</category><guid>https://chimez.github.io/posts/tenpy-diao-yan/</guid><pubDate>Wed, 18 Oct 2023 03:03:14 GMT</pubDate></item><item><title>wsl</title><link>https://chimez.github.io/posts/wsl/</link><dc:creator>chimez</dc:creator><description>&lt;div id="outline-container-orgd67e950" class="outline-2"&gt;
&lt;h2 id="orgd67e950"&gt;WSL&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-orgd67e950"&gt;
&lt;/div&gt;
&lt;div id="outline-container-orgfb09315" class="outline-3"&gt;
&lt;h3 id="orgfb09315"&gt;配置 ssh&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-orgfb09315"&gt;
&lt;ol class="org-ol"&gt;
&lt;li&gt;安装 &lt;code&gt;openssh-server&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;
编辑 &lt;code&gt;/etc/ssh/sshd_config&lt;/code&gt;
&lt;/p&gt;
&lt;pre class="example" id="org8c727b4"&gt;
# change port
Port 9922
ListenAddress 0.0.0.0
PasswordAuthentication yes
&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;重启服务器 &lt;code&gt;sudo service ssh restart&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;
windows 重定向端口
&lt;/p&gt;
&lt;pre class="example" id="org73921cb"&gt;
netsh interface portproxy add v4tov4 listenaddress=0.0.0.0 listenport=9922 connectaddress=172.23.241.25 connectport=9922
&lt;/pre&gt;
&lt;ol class="org-ol"&gt;
&lt;li&gt;端口号就是 ssh 的&lt;/li&gt;
&lt;li&gt;wsl 的 ip 地址可以从 &lt;code&gt;ifconfig&lt;/code&gt; 命令获得&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ifconfig&lt;/code&gt; 在 &lt;code&gt;net-tools&lt;/code&gt; 包中&lt;/li&gt;
&lt;/ol&gt;&lt;/li&gt;
&lt;li&gt;在 windows 防火墙中添加端口&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;</description><category>windows</category><category>wsl</category><guid>https://chimez.github.io/posts/wsl/</guid><pubDate>Thu, 21 Oct 2021 04:27:51 GMT</pubDate></item><item><title>setuptools</title><link>https://chimez.github.io/posts/setuptools/</link><dc:creator>chimez</dc:creator><description>&lt;div id="outline-container-org4d8e295" class="outline-2"&gt;
&lt;h2 id="org4d8e295"&gt;setuptools: python 的打包工具&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-org4d8e295"&gt;
&lt;p&gt;
&lt;a href="https://setuptools.pypa.io"&gt;setuptools&lt;/a&gt; 是 pypa 的项目。
&lt;/p&gt;
&lt;/div&gt;
&lt;div id="outline-container-org1f981f3" class="outline-3"&gt;
&lt;h3 id="org1f981f3"&gt;基本使用&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-org1f981f3"&gt;
&lt;/div&gt;
&lt;div id="outline-container-orge245c5d" class="outline-4"&gt;
&lt;h4 id="orge245c5d"&gt;&lt;code&gt;pyproject.toml&lt;/code&gt;&lt;/h4&gt;
&lt;div class="outline-text-4" id="text-orge245c5d"&gt;
&lt;p&gt;
PEP 517 要求所有 python 项目需要一个配置文件 &lt;code&gt;pyproject.toml&lt;/code&gt; 其中描述项目的基本信息和依赖等。
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    [build-system]
    requires = ["setuptools", "wheel"]
    build-backend = "setuptools.build_meta"
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-org70b108b" class="outline-4"&gt;
&lt;h4 id="org70b108b"&gt;&lt;code&gt;setup.cfg&lt;/code&gt; or &lt;code&gt;setup.py&lt;/code&gt;&lt;/h4&gt;
&lt;div class="outline-text-4" id="text-org70b108b"&gt;
&lt;p&gt;
&lt;code&gt;setup.cfg&lt;/code&gt; 是 setuptools 的 DSL，而 &lt;code&gt;setup.py&lt;/code&gt; 用一般的 python 代码。
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    &lt;span class="kn"&gt;from&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nn"&gt;setuptools&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;setup&lt;/span&gt;

    &lt;span class="n"&gt;setup&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;'mypackage'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;version&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;'0.0.1'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;packages&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'mypackage'&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
        &lt;span class="n"&gt;install_requires&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;
            &lt;span class="s1"&gt;'requests'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="s1"&gt;'importlib; python_version == "2.6"'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="p"&gt;],&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;ul class="org-ul"&gt;
&lt;li&gt;&lt;code&gt;packages&lt;/code&gt; 指定 setuptools 要处理的包，可以使用 &lt;code&gt;find_packages&lt;/code&gt;, &lt;code&gt;find_namespace_packages&lt;/code&gt; 来自动找到所有包&lt;/li&gt;
&lt;li&gt;&lt;code&gt;install_requires&lt;/code&gt; 指定安装包需要的依赖, setuptools 可以自动从 pypa 安装依赖&lt;/li&gt;
&lt;li&gt;&lt;code&gt;setup_requires&lt;/code&gt; 指定依赖，但 setuptools 不会自动安装它&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-org8c26278" class="outline-3"&gt;
&lt;h3 id="org8c26278"&gt;开发模式&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-org8c26278"&gt;
&lt;p&gt;
使用开发模式，可以完成构建而不需要将文件复制到包目录。
&lt;/p&gt;

&lt;ul class="org-ul"&gt;
&lt;li&gt;开发模式安装 &lt;code&gt;setup.py develop&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;开发模式卸载 &lt;code&gt;setup.py develop --uninstall&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;开发模式与 PEP 517 不兼容，所以用 pip 安装的方式是 &lt;code&gt;pip install --editable .&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-orgfa07b16" class="outline-3"&gt;
&lt;h3 id="orgfa07b16"&gt;cython&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-orgfa07b16"&gt;
&lt;p&gt;
setuptools 会自动检查 cython 是否安装，如果没有，就会忽略所有 &lt;code&gt;.pyx&lt;/code&gt; 文件。
&lt;/p&gt;

&lt;p&gt;
PEP 517 要求在 &lt;code&gt;pyproject.toml&lt;/code&gt; 中加入
&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;   [build-system]
   requires=[..., "cython"]
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
为了兼容性，推荐在 &lt;code&gt;setup.py&lt;/code&gt; 中也加入依赖 &lt;code&gt;setup_requires = ['cython', ...]&lt;/code&gt;
&lt;/p&gt;

&lt;p&gt;
&lt;code&gt;setup.py&lt;/code&gt;
&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;   &lt;span class="kn"&gt;from&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nn"&gt;setuptools&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;setup&lt;/span&gt;
   &lt;span class="kn"&gt;from&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nn"&gt;Cython.Build&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;cythonize&lt;/span&gt;

   &lt;span class="n"&gt;setup&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
       &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;'Hello world app'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
       &lt;span class="n"&gt;ext_modules&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;cythonize&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"hello.pyx"&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
       &lt;span class="n"&gt;zip_safe&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="kc"&gt;False&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
       &lt;span class="n"&gt;setup_requires&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'cython'&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
   &lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;</description><category>cython</category><category>python</category><guid>https://chimez.github.io/posts/setuptools/</guid><pubDate>Wed, 06 Oct 2021 12:00:12 GMT</pubDate></item><item><title>apache</title><link>https://chimez.github.io/posts/apache/</link><dc:creator>chimez</dc:creator><description>&lt;div id="outline-container-org6b6384f" class="outline-2"&gt;
&lt;h2 id="org6b6384f"&gt;Apache HTTP 服务器&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-org6b6384f"&gt;
&lt;/div&gt;
&lt;div id="outline-container-orga34a31c" class="outline-3"&gt;
&lt;h3 id="orga34a31c"&gt;配置文件&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-orga34a31c"&gt;
&lt;p&gt;
参考： &lt;a href="https://httpd.apache.org/docs/current/configuring.html"&gt;apache-httpd/configuring&lt;/a&gt;
&lt;/p&gt;

&lt;p&gt;
配置文件叫做 &lt;code&gt;httpd.conf&lt;/code&gt; 在 debian 是 &lt;code&gt;/etc/apache2/apache.conf&lt;/code&gt;
&lt;/p&gt;
&lt;/div&gt;
&lt;div id="outline-container-orgf1fcaf3" class="outline-4"&gt;
&lt;h4 id="orgf1fcaf3"&gt;语法&lt;/h4&gt;
&lt;div class="outline-text-4" id="text-orgf1fcaf3"&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;每行一个指令，反斜线可以折行&lt;/li&gt;
&lt;li&gt;指令大小写不敏感，但参数大小写敏感&lt;/li&gt;
&lt;li&gt;指令的参数用空格分隔&lt;/li&gt;
&lt;li&gt;指令之前的空格都忽略，所以可以任意缩进&lt;/li&gt;
&lt;li&gt;变量用 &lt;code&gt;Define&lt;/code&gt; 指令定义，用 &lt;code&gt;${VAR}&lt;/code&gt; 格式使用&lt;/li&gt;
&lt;li&gt;使用 &lt;code&gt;apachectl configtest&lt;/code&gt; 检查配置文件的语法错误&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-orgb513132" class="outline-2"&gt;
&lt;h2 id="orgb513132"&gt;配置&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-orgb513132"&gt;
&lt;/div&gt;
&lt;div id="outline-container-org8e7dabf" class="outline-3"&gt;
&lt;h3 id="org8e7dabf"&gt;反向代理 jupyterlab&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-org8e7dabf"&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;需要的模块： &lt;code&gt;a2enmod ssl rewrite proxy proxy_http proxy_wstunnel&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;jupyterlab 需要配置
&lt;ul class="org-ul"&gt;
&lt;li&gt;&lt;code&gt;c.ServerApp.allow_origin = '*'&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;c.ServerApp.base_url = '/jupyterlab'&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;c.ServerApp.port = 11413&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;lt;Location "/jupyterlab/"&amp;gt;
    RewriteEngine On
    RewriteRule /jupyterlab/(.*) ws://127.0.0.1:11413/jupyterlab/$1 [P]
    RewriteRule /jupyterlab/(.*) http://127.0.0.1:11413/jupyterlab/$1 [P]

    ProxyPreserveHost on
    ProxyPass         http://127.0.0.1:11413/jupyterlab/
    ProxyPassReverse  http://127.0.0.1:11413/jupyterlab/
&amp;lt;/Location&amp;gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;</description><category>apache</category><category>php</category><category>web</category><guid>https://chimez.github.io/posts/apache/</guid><pubDate>Sat, 18 Sep 2021 02:45:41 GMT</pubDate></item><item><title>PBLAS &amp; ScaLAPACK &amp; BLACS</title><link>https://chimez.github.io/posts/pblas-scalapack/</link><dc:creator>chimez</dc:creator><description>&lt;div id="outline-container-orgbc0f84b" class="outline-2"&gt;
&lt;h2 id="orgbc0f84b"&gt;PBLAS &amp;amp; ScaLAPACK &amp;amp; BLACS&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-orgbc0f84b"&gt;
&lt;p&gt;
&lt;a href="https://www.netlib.org/scalapack/"&gt;ScaLAPACK&lt;/a&gt; 是基于 MPI 的并行版本 LAPACK, &lt;a href="https://www.netlib.org/scalapack/pblas_qref.html"&gt;PBLAS&lt;/a&gt; 则是并行版本的 BLAS. 其中 PBLAS 是嵌入到 ScaLAPACK 里的，这与 LAPACK 经常嵌入到 BLAS 里刚好反过来
&lt;/p&gt;
&lt;/div&gt;
&lt;div id="outline-container-org4afa186" class="outline-3"&gt;
&lt;h3 id="org4afa186"&gt;编译&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-org4afa186"&gt;
&lt;ol class="org-ol"&gt;
&lt;li&gt;从 github 下载 &lt;a href="https://github.com/Reference-ScaLAPACK/scalapack/"&gt;https://github.com/Reference-ScaLAPACK/scalapack/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;修改 &lt;code&gt;SLmake.inc&lt;/code&gt; 文件中的 &lt;code&gt;FC&lt;/code&gt;, &lt;code&gt;CC&lt;/code&gt;, &lt;code&gt;BLASLIB&lt;/code&gt;, &lt;code&gt;LAPACKLIB&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;
示例
&lt;/p&gt;
&lt;pre class="example" id="org8a2f33f"&gt;
FC            = /home/beacon/app/openmpi/bin/mpif90
CC            = /home/beacon/app/openmpi/bin/mpicc 
NOOPT         = -O0 -std=legacy
FCFLAGS       = -O3 -std=legacy
CCFLAGS       = -O3


BLASLIB       = -L/usr/lib/x86_64-linux-gnu/openblas-openmp/ -lblas
LAPACKLIB     = -L/usr/lib/x86_64-linux-gnu/openblas-openmp/ -llapack

&lt;/pre&gt;
&lt;/div&gt;
&lt;div id="outline-container-orgbe346f5" class="outline-4"&gt;
&lt;h4 id="orgbe346f5"&gt;GCC 10 不兼容&lt;/h4&gt;
&lt;div class="outline-text-4" id="text-orgbe346f5"&gt;
&lt;p&gt;
由于 GCC 10 根据最新的 fortran 标准，要求参数类型匹配，所以老代码不给通过，可以添加 &lt;code&gt;-fallow-argument-mismatch&lt;/code&gt; 或 &lt;code&gt;-std=legacy&lt;/code&gt; 来编译。
&lt;/p&gt;

&lt;p&gt;
参考 &lt;a href="https://gcc.gnu.org/gcc-10/porting_to.html"&gt;Porting to GCC 10&lt;/a&gt;
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-org5181841" class="outline-3"&gt;
&lt;h3 id="org5181841"&gt;BLACS&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-org5181841"&gt;
&lt;p&gt;
&lt;a href="https://www.netlib.org/blacs/index.html"&gt;BLACS&lt;/a&gt; 的目的是提供一组在分布内存系统上的线性代数的标准通信接口，主要是作为 ScaLAPACK 的通信层。
&lt;/p&gt;

&lt;p&gt;
除了 MPI 外, BLACS 还支持多种通信方案。当然现在 MPI 基本成为主流， 这部分作用已经意义不大了。
&lt;/p&gt;

&lt;p&gt;
&lt;a href="https://software.intel.com/content/www/us/en/develop/documentation/onemkl-developer-reference-c/top/blacs-routines.html"&gt;oneAPI/MKL/BLACS&lt;/a&gt;
&lt;/p&gt;
&lt;/div&gt;
&lt;div id="outline-container-org6a66968" class="outline-4"&gt;
&lt;h4 id="org6a66968"&gt;基本概念&lt;/h4&gt;
&lt;div class="outline-text-4" id="text-org6a66968"&gt;
&lt;/div&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;&lt;a id="org71ea3dd"&gt;&lt;/a&gt;进程网格和范围操作&lt;br&gt;
&lt;div class="outline-text-5" id="text-org71ea3dd"&gt;
&lt;p&gt;
一个分布式机器上有 \(P\) 个进程，编号从 \(0\) 到 \(P-1\), 我们人为地将它们排列成 \(R\) 行 \(C\) 列的网格，用行列指标 \((i,j)\) 来表示其中一个进程。
&lt;/p&gt;

&lt;p&gt;
这样划分的好处在于线性代数操作时，二维数组被分散到 &lt;b&gt;进程网格&lt;/b&gt; (process grid)中，数据的行列与进程的行列有直接的对应，很适合编程。
&lt;/p&gt;

&lt;p&gt;
当进行的通信涉及两个以上的进程时，就将这种操作称作 &lt;b&gt;范围操作&lt;/b&gt; (scoped operations)。
基本的范围操作有
&lt;/p&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;行通信&lt;/li&gt;
&lt;li&gt;列通信&lt;/li&gt;
&lt;li&gt;全部通信&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a id="org67a9702"&gt;&lt;/a&gt;上下文&lt;br&gt;
&lt;div class="outline-text-5" id="text-org67a9702"&gt;
&lt;p&gt;
&lt;b&gt;上下文&lt;/b&gt; (context) 表示一个通信空间，每个进程网格都有自己的上下文，在同一个上下文内部的通信不会被其它上下文的覆盖。
&lt;/p&gt;

&lt;p&gt;
上下文的主要作用是可以将同一组进程标记成不同的进程网格，来方便进行通信操作。
&lt;/p&gt;

&lt;p&gt;
BLACS 中有关上下文的函数有
&lt;/p&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;&lt;code&gt;BLACS_GRIDINIT&lt;/code&gt;, &lt;code&gt;BLACS_GRIDMAP&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;BLACS_GRIDEXIT&lt;/code&gt;, &lt;code&gt;BLACS_EXIT&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a id="org3eb7666"&gt;&lt;/a&gt;基于数组的通信&lt;br&gt;
&lt;div class="outline-text-5" id="text-org3eb7666"&gt;
&lt;p&gt;
BLACS 中有两个基本的数据模型
&lt;/p&gt;
&lt;/div&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;&lt;a id="org7dc880f"&gt;&lt;/a&gt;矩形矩阵&lt;br&gt;
&lt;div class="outline-text-6" id="text-org7dc880f"&gt;
&lt;p&gt;
一维向量是特殊的矩形矩阵。
&lt;/p&gt;

&lt;p&gt;
矩形矩阵是一个二维数组， &lt;code&gt;M&lt;/code&gt; 行 &lt;code&gt;N&lt;/code&gt; 列，主维数是 &lt;code&gt;LDA&lt;/code&gt;, 主维数就是相邻的两列数在内存中的间隔.
&lt;/p&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a id="org6483dea"&gt;&lt;/a&gt;梯形矩阵&lt;br&gt;
&lt;div class="outline-text-6" id="text-org6483dea"&gt;
&lt;p&gt;
三角矩阵和对角矩阵是特殊的梯形矩阵。
&lt;/p&gt;

&lt;p&gt;
梯形矩阵的最大底边是 &lt;code&gt;M,N&lt;/code&gt; 中最大的数，另一个是梯形的高，梯形的短底边是长底边和高的差。
&lt;/p&gt;

&lt;ul class="org-ul"&gt;
&lt;li&gt;&lt;code&gt;UPLO&lt;/code&gt;: 梯形矩阵， &lt;code&gt;'U','L'&lt;/code&gt; 上下梯形&lt;/li&gt;
&lt;li&gt;&lt;code&gt;DIAG&lt;/code&gt;: 单位对角矩阵&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a id="orgfb914ce"&gt;&lt;/a&gt;无编号通信&lt;br&gt;
&lt;div class="outline-text-5" id="text-orgfb914ce"&gt;
&lt;p&gt;
BLACS 与其它通信层的区别之一是，BLACS不需要用户指定消息的编号 (例如 MPI 的 tag) ,因为编号的选择有时会导致编程的困难，所以 BLACS 通过一个特定的算法自动生成消息编号，用户可以用 &lt;code&gt;SHIFT_RANGE&lt;/code&gt; 来将 BLACS 的消息编号限制在一个范围里，来和用户自定义的消息编号隔离。
&lt;/p&gt;

&lt;p&gt;
BLACS 的通信保证
&lt;/p&gt;
&lt;ol class="org-ol"&gt;
&lt;li&gt;接收端知道消息的来源&lt;/li&gt;
&lt;li&gt;接收的顺序与发送的顺序一致&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div id="outline-container-org10c5c9a" class="outline-4"&gt;
&lt;h4 id="org10c5c9a"&gt;结构&lt;/h4&gt;
&lt;div class="outline-text-4" id="text-org10c5c9a"&gt;
&lt;p&gt;
BLACS 由 4 个部分构成
&lt;/p&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;点到点通信&lt;/li&gt;
&lt;li&gt;广播&lt;/li&gt;
&lt;li&gt;组合&lt;/li&gt;
&lt;li&gt;支持模块&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;
&lt;a href="https://www.netlib.org/blacs/BLACS/QRef.html"&gt;函数参考&lt;/a&gt;
&lt;/p&gt;
&lt;/div&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;&lt;a id="orgcab1afa"&gt;&lt;/a&gt;命名规则&lt;br&gt;
&lt;div class="outline-text-5" id="text-orgcab1afa"&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;点到点通信与广播： &lt;code&gt;vXXYY2D&lt;/code&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;&lt;code&gt;v&lt;/code&gt; 表示数据类型&lt;/li&gt;
&lt;li&gt;&lt;code&gt;XX&lt;/code&gt; 表示矩阵的形状&lt;/li&gt;
&lt;li&gt;&lt;code&gt;YY&lt;/code&gt; 表示通信的类型&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;组合: &lt;code&gt;vGZZZ2D&lt;/code&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;&lt;code&gt;v&lt;/code&gt; 表示数据类型&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ZZZ&lt;/code&gt; 表示操作类型&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;支持模块: &lt;code&gt;BLACS_&amp;lt;name&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;table border="2" cellspacing="0" cellpadding="6" rules="groups" frame="hsides"&gt;


&lt;colgroup&gt;
&lt;col class="org-left"&gt;

&lt;col class="org-left"&gt;
&lt;/colgroup&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th scope="col" class="org-left"&gt;&lt;code&gt;v&lt;/code&gt;&lt;/th&gt;
&lt;th scope="col" class="org-left"&gt;意义&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class="org-left"&gt;&lt;code&gt;I&lt;/code&gt;&lt;/td&gt;
&lt;td class="org-left"&gt;整数&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="org-left"&gt;&lt;code&gt;S&lt;/code&gt;&lt;/td&gt;
&lt;td class="org-left"&gt;单精度&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="org-left"&gt;&lt;code&gt;D&lt;/code&gt;&lt;/td&gt;
&lt;td class="org-left"&gt;双精度&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="org-left"&gt;&lt;code&gt;C&lt;/code&gt;&lt;/td&gt;
&lt;td class="org-left"&gt;单精度复数&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="org-left"&gt;&lt;code&gt;Z&lt;/code&gt;&lt;/td&gt;
&lt;td class="org-left"&gt;双精度复数&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;


&lt;table border="2" cellspacing="0" cellpadding="6" rules="groups" frame="hsides"&gt;


&lt;colgroup&gt;
&lt;col class="org-left"&gt;

&lt;col class="org-left"&gt;
&lt;/colgroup&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th scope="col" class="org-left"&gt;&lt;code&gt;XX&lt;/code&gt;&lt;/th&gt;
&lt;th scope="col" class="org-left"&gt;意义&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class="org-left"&gt;&lt;code&gt;GE&lt;/code&gt;&lt;/td&gt;
&lt;td class="org-left"&gt;矩形矩阵&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="org-left"&gt;&lt;code&gt;TR&lt;/code&gt;&lt;/td&gt;
&lt;td class="org-left"&gt;梯形矩阵&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;


&lt;table border="2" cellspacing="0" cellpadding="6" rules="groups" frame="hsides"&gt;


&lt;colgroup&gt;
&lt;col class="org-left"&gt;

&lt;col class="org-left"&gt;
&lt;/colgroup&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th scope="col" class="org-left"&gt;&lt;code&gt;YY&lt;/code&gt;&lt;/th&gt;
&lt;th scope="col" class="org-left"&gt;意义&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class="org-left"&gt;&lt;code&gt;SD&lt;/code&gt;&lt;/td&gt;
&lt;td class="org-left"&gt;点到点发送&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="org-left"&gt;&lt;code&gt;RV&lt;/code&gt;&lt;/td&gt;
&lt;td class="org-left"&gt;点到点接收&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="org-left"&gt;&lt;code&gt;BS&lt;/code&gt;&lt;/td&gt;
&lt;td class="org-left"&gt;广播发送&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="org-left"&gt;&lt;code&gt;BR&lt;/code&gt;&lt;/td&gt;
&lt;td class="org-left"&gt;广播接收&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;


&lt;table border="2" cellspacing="0" cellpadding="6" rules="groups" frame="hsides"&gt;


&lt;colgroup&gt;
&lt;col class="org-left"&gt;

&lt;col class="org-left"&gt;
&lt;/colgroup&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th scope="col" class="org-left"&gt;&lt;code&gt;ZZZ&lt;/code&gt;&lt;/th&gt;
&lt;th scope="col" class="org-left"&gt;意义&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class="org-left"&gt;&lt;code&gt;AMX&lt;/code&gt;&lt;/td&gt;
&lt;td class="org-left"&gt;最大绝对值&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="org-left"&gt;&lt;code&gt;AMN&lt;/code&gt;&lt;/td&gt;
&lt;td class="org-left"&gt;最小绝对值&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="org-left"&gt;&lt;code&gt;SUM&lt;/code&gt;&lt;/td&gt;
&lt;td class="org-left"&gt;求和&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-org7b71377" class="outline-3"&gt;
&lt;h3 id="org7b71377"&gt;PBLAS&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-org7b71377"&gt;
&lt;p&gt;
&lt;a href="https://www.netlib.org/scalapack/pblas_qref.html"&gt;PBLAS&lt;/a&gt; 的函数类似 BLAS, 由于是作为 ScaLAPACK 的一部分分发的，所以不提供统一的 &lt;code&gt;.h&lt;/code&gt; 头文件，得自己写。
&lt;/p&gt;

&lt;p&gt;
&lt;a href="https://software.intel.com/content/www/us/en/develop/documentation/onemkl-developer-reference-c/top/pblas-routines.html"&gt;oneAPI/MKL/PBLAS&lt;/a&gt;
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-org7493854" class="outline-3"&gt;
&lt;h3 id="org7493854"&gt;ScaLAPACK&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-org7493854"&gt;
&lt;/div&gt;
&lt;div id="outline-container-orgd34da54" class="outline-4"&gt;
&lt;h4 id="orgd34da54"&gt;基本方法&lt;/h4&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;</description><category>BLACS</category><category>BLAS</category><category>C</category><category>LAPACK</category><category>MPI</category><category>PBLAS</category><category>ScaLAPACK</category><guid>https://chimez.github.io/posts/pblas-scalapack/</guid><pubDate>Tue, 24 Aug 2021 04:31:22 GMT</pubDate></item><item><title>Rust macro</title><link>https://chimez.github.io/posts/rust-macro/</link><dc:creator>chimez</dc:creator><description>&lt;div id="outline-container-org59ca368" class="outline-2"&gt;
&lt;h2 id="org59ca368"&gt;Rust 宏&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-org59ca368"&gt;
&lt;p&gt;
Rust 的宏分为两类，一种是声明宏 &lt;code&gt;macro_rules!&lt;/code&gt; ,另一种是过程宏 &lt;code&gt;#[...]&lt;/code&gt; .
&lt;/p&gt;
&lt;/div&gt;
&lt;div id="outline-container-orgcac2d48" class="outline-3"&gt;
&lt;h3 id="orgcac2d48"&gt;声明宏 &lt;code&gt;macro_rules!&lt;/code&gt;&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-orgcac2d48"&gt;
&lt;p&gt;
声明宏是 Rust 中最常用的宏，通过对源码的模式匹配来实现功能。
&lt;/p&gt;
&lt;/div&gt;
&lt;div id="outline-container-orge7057d4" class="outline-4"&gt;
&lt;h4 id="orge7057d4"&gt;语法&lt;/h4&gt;
&lt;div class="outline-text-4" id="text-orge7057d4"&gt;
&lt;p&gt;
参考： &lt;a href="https://doc.rust-lang.org/reference/macros-by-example.html"&gt;reference/macro&lt;/a&gt;
&lt;/p&gt;

&lt;ul class="org-ul"&gt;
&lt;li&gt;&lt;code&gt;#[macro_export]&lt;/code&gt; 导出宏&lt;/li&gt;
&lt;li&gt;&lt;code&gt;$x:expr&lt;/code&gt; 表明模式匹配一个 &lt;code&gt;expr&lt;/code&gt; 类型的源码块，并用 &lt;code&gt;$x&lt;/code&gt; 表示它&lt;/li&gt;
&lt;li&gt;&lt;code&gt;$( ... ),*$&lt;/code&gt; 表明匹配括号中的内容 0 次或多次，每个重复的内容直接由 &lt;code&gt;,&lt;/code&gt; 分隔&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-orgcc627d8" class="outline-4"&gt;
&lt;h4 id="orgcc627d8"&gt;例子： &lt;code&gt;vec!&lt;/code&gt;&lt;/h4&gt;
&lt;div class="outline-text-4" id="text-orgcc627d8"&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    #[macro_export]
    macro_rules! vec {
        ( $( $x:expr ),* ) =&amp;gt; {
            {
                let mut temp_vec = Vec::new();
                $(
                    temp_vec.push($x);
                )*
                    temp_vec
            }
        };
    }
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-orgabf1ae4" class="outline-3"&gt;
&lt;h3 id="orgabf1ae4"&gt;过程宏&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-orgabf1ae4"&gt;
&lt;p&gt;
过程宏是一个函数，不过它的输入输出类型是词法对象 &lt;code&gt;TokenStream&lt;/code&gt; ，由编译器在编译前调用。
&lt;/p&gt;
&lt;/div&gt;
&lt;div id="outline-container-orgcef5031" class="outline-4"&gt;
&lt;h4 id="orgcef5031"&gt;crate&lt;/h4&gt;
&lt;div class="outline-text-4" id="text-orgcef5031"&gt;
&lt;p&gt;
由于技术限制，目前过程宏必须分离在一个单独的 crate 中, 这个 crate 是 &lt;code&gt;proc-macro&lt;/code&gt; 类型的
&lt;/p&gt;


&lt;p&gt;
&lt;code&gt;Cargo.toml&lt;/code&gt;
&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    [lib]
    proc-macro = true
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-org5665a2c" class="outline-4"&gt;
&lt;h4 id="org5665a2c"&gt;&lt;code&gt;derive&lt;/code&gt; 宏&lt;/h4&gt;
&lt;div class="outline-text-4" id="text-org5665a2c"&gt;
&lt;p&gt;
&lt;code&gt;derive&lt;/code&gt; 宏用来为结构体等创建默认的 trait 实现。
&lt;/p&gt;

&lt;p&gt;
下面的例子创建一个 &lt;code&gt;HelloMacro&lt;/code&gt; trait 的默认实现宏。
&lt;/p&gt;
&lt;/div&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;&lt;a id="orga275ccb"&gt;&lt;/a&gt;使用&lt;br&gt;
&lt;div class="outline-text-5" id="text-orga275ccb"&gt;
&lt;p&gt;
下面的例子展示了为 &lt;code&gt;struct Pancakes&lt;/code&gt; 创建 trait &lt;code&gt;HelloMacro&lt;/code&gt; 的默认实现的方法，这个 trait 中只有一个函数 &lt;code&gt;hello_macro()&lt;/code&gt;
&lt;/p&gt;

&lt;p&gt;
&lt;code&gt;src/main.rs&lt;/code&gt;
&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;     use hello_macro::HelloMacro;
     use hello_macro_derive::HelloMacro;

     #[derive(HelloMacro)]
     struct Pancakes;

     fn main() {
         Pancakes::hello_macro();
     }
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a id="orgcfe2ed9"&gt;&lt;/a&gt;trait 定义&lt;br&gt;
&lt;div class="outline-text-5" id="text-orgcfe2ed9"&gt;
&lt;p&gt;
&lt;code&gt;hello_macro/src/lib.rs&lt;/code&gt;
&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;     pub trait HelloMacro {
         fn hello_macro();
     }
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a id="orga88b292"&gt;&lt;/a&gt;宏定义&lt;br&gt;
&lt;div class="outline-text-5" id="text-orga88b292"&gt;
&lt;p&gt;
&lt;code&gt;hello_macro_derive/Cargo.toml&lt;/code&gt;
&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;     [lib]
     proc-macro = true

     [dependencies]
     syn = "1.0"
     quote = "1.0"
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
&lt;code&gt;hello_macro_derive/src/lib.rs&lt;/code&gt;
&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;     extern crate proc_macro;

     use proc_macro::TokenStream;
     use quote::quote;
     use syn;

     #[proc_macro_derive(HelloMacro)]
     pub fn hello_macro_derive(input: TokenStream) -&amp;gt; TokenStream {
         // Construct a representation of Rust code as a syntax tree
         // that we can manipulate
         let ast = syn::parse(input).unwrap();

         // Build the trait implementation
         impl_hello_macro(&amp;amp;ast)
     }

     fn impl_hello_macro(ast: &amp;amp;syn::DeriveInput) -&amp;gt; TokenStream {
         let name = &amp;amp;ast.ident;
         let gen = quote! {
             impl HelloMacro for #name {
                 fn hello_macro() {
                     println!("Hello, Macro! My name is {}!", stringify!(#name));
                 }
             }
         };
         gen.into()
     }
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div id="outline-container-org8d496c0" class="outline-4"&gt;
&lt;h4 id="org8d496c0"&gt;&lt;code&gt;Attribute-like&lt;/code&gt; 宏&lt;/h4&gt;
&lt;div class="outline-text-4" id="text-org8d496c0"&gt;
&lt;p&gt;
属性宏可以创建新的属性, 与 &lt;code&gt;derive&lt;/code&gt; 宏的区别在于参数多了一个属性 &lt;code&gt;attr&lt;/code&gt;, 也就是括号里面的部分，另一个参数 &lt;code&gt;item&lt;/code&gt; 就是与 &lt;code&gt;derive&lt;/code&gt; 宏一样的内容了。
&lt;/p&gt;
&lt;/div&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;&lt;a id="org3c9caf2"&gt;&lt;/a&gt;用法&lt;br&gt;
&lt;div class="outline-text-5" id="text-org3c9caf2"&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;     #[route(GET, "/")]
     fn index() { ... }
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a id="org5355537"&gt;&lt;/a&gt;宏定义&lt;br&gt;
&lt;div class="outline-text-5" id="text-org5355537"&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;     #[proc_macro_attribute]
     pub fn route(attr: TokenStream, item: TokenStream) -&amp;gt; TokenStream { ... }
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div id="outline-container-org395b94e" class="outline-4"&gt;
&lt;h4 id="org395b94e"&gt;&lt;code&gt;Function-like&lt;/code&gt; 宏&lt;/h4&gt;
&lt;div class="outline-text-4" id="text-org395b94e"&gt;
&lt;p&gt;
函数宏可以定义像函数一样调用的宏。可以用来定义 DSL
&lt;/p&gt;
&lt;/div&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;&lt;a id="org72984a2"&gt;&lt;/a&gt;用法&lt;br&gt;
&lt;div class="outline-text-5" id="text-org72984a2"&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;     let sql = sql!(SELECT * FROM posts WHERE id=1);
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a id="org4b2bd2f"&gt;&lt;/a&gt;宏定义&lt;br&gt;
&lt;div class="outline-text-5" id="text-org4b2bd2f"&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;     #[proc_macro]
     pub fn sql(input: TokenStream) -&amp;gt; TokenStream { ... }
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div id="outline-container-org2059c2d" class="outline-4"&gt;
&lt;h4 id="org2059c2d"&gt;syn: rust parser&lt;/h4&gt;
&lt;div class="outline-text-4" id="text-org2059c2d"&gt;
&lt;p&gt;
&lt;a href="https://crates.io/crates/syn"&gt;syn&lt;/a&gt; 是 rust 代码的 parser，可以将源码字符串 &lt;code&gt;TokenStream&lt;/code&gt; 转换成语法树 &lt;code&gt;syn::DeriveInput&lt;/code&gt; 。
&lt;/p&gt;
&lt;/div&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;&lt;a id="org1983ac7"&gt;&lt;/a&gt;&lt;code&gt;syn::DeriveInput&lt;/code&gt;&lt;br&gt;
&lt;div class="outline-text-5" id="text-org1983ac7"&gt;
&lt;p&gt;
对于输入 &lt;code&gt;TokenStream&lt;/code&gt; 使用 &lt;code&gt;parse_macro_input!&lt;/code&gt; 将它解析为语法树 &lt;code&gt;DeriveInput&lt;/code&gt; ，之后就可以通过对语法树的操作生成新的语法树
&lt;/p&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a id="org44df465"&gt;&lt;/a&gt;&lt;code&gt;syn::spanned::Spanned&lt;/code&gt;&lt;br&gt;
&lt;div class="outline-text-5" id="text-org44df465"&gt;
&lt;p&gt;
对重复结构的操作，使用 &lt;code&gt;span()&lt;/code&gt; 配合 &lt;code&gt;quote::qoute_spanned!&lt;/code&gt; 实现
&lt;/p&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div id="outline-container-orgf330ba0" class="outline-4"&gt;
&lt;h4 id="orgf330ba0"&gt;quote: rust 代码模板&lt;/h4&gt;
&lt;div class="outline-text-4" id="text-orgf330ba0"&gt;
&lt;p&gt;
&lt;a href="https://crates.io/crates/quote"&gt;quote&lt;/a&gt; 的 &lt;code&gt;quote!&lt;/code&gt; 宏可以将 rust 语法数据结构变成 &lt;code&gt;TokenStream&lt;/code&gt;
&lt;/p&gt;

&lt;p&gt;
&lt;code&gt;qoute_spanned!&lt;/code&gt; 宏可以将重复结构中的一个元素单独操作。
&lt;/p&gt;

&lt;p&gt;
qoute 的宏类似于 &lt;code&gt;macro_rules!&lt;/code&gt; 只是把 &lt;code&gt;$&lt;/code&gt; 换成  &lt;code&gt;#&lt;/code&gt;
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;</description><category>macro</category><category>rust</category><guid>https://chimez.github.io/posts/rust-macro/</guid><pubDate>Fri, 20 Aug 2021 05:32:43 GMT</pubDate></item><item><title>rust c ffi</title><link>https://chimez.github.io/posts/rust-c-ffi/</link><dc:creator>chimez</dc:creator><description>&lt;div id="outline-container-org39803b1" class="outline-2"&gt;
&lt;h2 id="org39803b1"&gt;Rust C FFI&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-org39803b1"&gt;
&lt;/div&gt;
&lt;div id="outline-container-org3863a7f" class="outline-3"&gt;
&lt;h3 id="org3863a7f"&gt;rust-bindgen: rust 调用 c&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-org3863a7f"&gt;
&lt;p&gt;
&lt;a href="https://github.com/rust-lang/rust-bindgen"&gt;rust-bindgen&lt;/a&gt; 是在编译时由头文件生成绑定代码的工具。由它封装的库称为 &lt;code&gt;xxx-sys&lt;/code&gt;
&lt;/p&gt;
&lt;/div&gt;
&lt;div id="outline-container-org8176304" class="outline-4"&gt;
&lt;h4 id="org8176304"&gt;常量宏&lt;/h4&gt;
&lt;div class="outline-text-4" id="text-org8176304"&gt;
&lt;p&gt;
对于形如 &lt;code&gt;#define XX (int)0&lt;/code&gt; 这样的有类型转换的宏是不能自动生成绑定的，可以在 &lt;code&gt;wrapper.h&lt;/code&gt; 中写
&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;static&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;const&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;_XX&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;XX&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;
来创建绑定。
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-org4c05deb" class="outline-3"&gt;
&lt;h3 id="org4c05deb"&gt;libc: 系统库&lt;/h3&gt;
&lt;/div&gt;


&lt;div id="outline-container-org799d71c" class="outline-3"&gt;
&lt;h3 id="org799d71c"&gt;c 类型&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-org799d71c"&gt;
&lt;p&gt;
一般的类型在 &lt;code&gt;std::os::raw&lt;/code&gt; 中，或者使用在 &lt;code&gt;libc&lt;/code&gt; 中的重新绑定。
&lt;/p&gt;
&lt;/div&gt;
&lt;div id="outline-container-org3937fc1" class="outline-4"&gt;
&lt;h4 id="org3937fc1"&gt;字符串&lt;/h4&gt;
&lt;div class="outline-text-4" id="text-org3937fc1"&gt;
&lt;p&gt;
c 的字符串实际上是 &lt;code&gt;&amp;amp;[u8]&lt;/code&gt; 数组，可以用 &lt;code&gt;std::ffi::CString&lt;/code&gt; 和 &lt;code&gt;std::ffi::CStr&lt;/code&gt;, 其中 &lt;code&gt;CString&lt;/code&gt; 拥有所有权， &lt;code&gt;CStr&lt;/code&gt; 是借用。
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-org830c001" class="outline-4"&gt;
&lt;h4 id="org830c001"&gt;指针&lt;/h4&gt;
&lt;div class="outline-text-4" id="text-org830c001"&gt;
&lt;p&gt;
c 的常量指针 &lt;code&gt;const int *&lt;/code&gt; 对应 &lt;code&gt;*const i32&lt;/code&gt;, 一般指针 &lt;code&gt;int *&lt;/code&gt; 对应 &lt;code&gt;*mut i32&lt;/code&gt;. 两级指针 &lt;code&gt;int **&lt;/code&gt; 对应 &lt;code&gt;*mut *mut int&lt;/code&gt; 以此类推。
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-org5b21cc5" class="outline-4"&gt;
&lt;h4 id="org5b21cc5"&gt;结构体&lt;/h4&gt;
&lt;div class="outline-text-4" id="text-org5b21cc5"&gt;
&lt;p&gt;
rust 中定义与 c 兼容的结构体的方法为
&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct MyStruct {
        pub a: ::std::os::raw::c_int,
    }
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-orga1507b6" class="outline-4"&gt;
&lt;h4 id="orga1507b6"&gt;&lt;code&gt;sizeof&lt;/code&gt;&lt;/h4&gt;
&lt;div class="outline-text-4" id="text-orga1507b6"&gt;
&lt;p&gt;
与 c 的 &lt;code&gt;sizeof&lt;/code&gt; 相同的是 &lt;code&gt;std::mem::sizeof&lt;/code&gt;
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-orgd53734a" class="outline-4"&gt;
&lt;h4 id="orgd53734a"&gt;&lt;code&gt;offsetof&lt;/code&gt;&lt;/h4&gt;
&lt;div class="outline-text-4" id="text-orgd53734a"&gt;
&lt;p&gt;
使用 &lt;a href="https://github.com/Gilnaa/memoffset"&gt;memoffset&lt;/a&gt; 的 &lt;code&gt;offset_of!&lt;/code&gt; 宏来获得。
&lt;/p&gt;

&lt;p&gt;
如果不希望结构体内存对齐，使用 &lt;code&gt;#[repr(packed)]&lt;/code&gt;
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-org2467582" class="outline-3"&gt;
&lt;h3 id="org2467582"&gt;问题解决&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-org2467582"&gt;
&lt;/div&gt;
&lt;div id="outline-container-org2a044c0" class="outline-4"&gt;
&lt;h4 id="org2a044c0"&gt;传递 &lt;code&gt;argc, argv&lt;/code&gt;&lt;/h4&gt;
&lt;div class="outline-text-4" id="text-org2a044c0"&gt;
&lt;p&gt;
参考 &lt;a href="https://stackoverflow.com/questions/34379641/how-do-i-convert-rust-args-into-the-argc-and-argv-c-equivalents"&gt;stackoverflow&lt;/a&gt;
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    extern crate libc;

    use libc::{c_char, c_int, c_void};
    use std::ffi::CString;

    extern "C" {
        fn foo(argc: *mut c_int, argv: *mut *mut *mut c_char);
    }

    fn main() {
        let mut c_args: Vec&amp;lt;*mut c_char&amp;gt; = std::env::args()
            .map(|arg| CString::new(arg).unwrap().into_raw())
            .collect();
        unsafe {
            let mut c_argc: c_int = c_args.len() as c_int;
            let mut c_argv: *mut *mut c_char = c_args.as_mut_ptr();

            foo(&amp;amp;mut c_argc as *mut c_int, &amp;amp;mut c_argv);
        }
    }
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;</description><category>rust</category><guid>https://chimez.github.io/posts/rust-c-ffi/</guid><pubDate>Thu, 19 Aug 2021 01:49:34 GMT</pubDate></item><item><title>reStructuredText</title><link>https://chimez.github.io/posts/restructuredtext/</link><dc:creator>chimez</dc:creator><description>&lt;div id="outline-container-org11bdf88" class="outline-2"&gt;
&lt;h2 id="org11bdf88"&gt;reStructuredText&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-org11bdf88"&gt;
&lt;p&gt;
reST, 文件后缀 &lt;code&gt;*.rst&lt;/code&gt; 是类似 markdown 的标记语言，是 python 的 &lt;img src="https://chimez.github.io/sphinx-documentation-generator.org" alt="Sphinx"&gt; 默认语言。
&lt;/p&gt;
&lt;/div&gt;
&lt;div id="outline-container-orga0378aa" class="outline-3"&gt;
&lt;h3 id="orga0378aa"&gt;基本语法&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-orga0378aa"&gt;
&lt;/div&gt;
&lt;div id="outline-container-orgc8fe67a" class="outline-4"&gt;
&lt;h4 id="orgc8fe67a"&gt;段落&lt;/h4&gt;
&lt;div class="outline-text-4" id="text-orgc8fe67a"&gt;
&lt;p&gt;
与 python 类似，reST 中用缩进表示不同的层级。
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-org66a81b2" class="outline-4"&gt;
&lt;h4 id="org66a81b2"&gt;行内标记&lt;/h4&gt;
&lt;div class="outline-text-4" id="text-org66a81b2"&gt;
&lt;pre class="example" id="org13ee42c"&gt;
*something*               | 斜体
**something**             | 粗体
``code``                  | 行内代码
`title &amp;lt;http://to.link&amp;gt;`_ | 外部链接
`my link`_                | 分开的链接
.. _my link: http::/a.link
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-org092c4b1" class="outline-4"&gt;
&lt;h4 id="org092c4b1"&gt;列表&lt;/h4&gt;
&lt;div class="outline-text-4" id="text-org092c4b1"&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    1. 编号列表
    2. 编号列表

    * 无编号列表
    * 无编号列表

    #. 还是编号列表
    #. 还是编号列表


    * 列表可以嵌套

      * 但是要空一行
      * 并且缩进
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-orgfb22fd2" class="outline-4"&gt;
&lt;h4 id="orgfb22fd2"&gt;引用块&lt;/h4&gt;
&lt;div class="outline-text-4" id="text-orgfb22fd2"&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    引用块，末尾用双冒号::

      空一行

      并且缩进

    空一行就结束
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-org42373ff" class="outline-4"&gt;
&lt;h4 id="org42373ff"&gt;表格&lt;/h4&gt;
&lt;div class="outline-text-4" id="text-org42373ff"&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    完整的表格

    +------------------------+------------+----------+----------+
    | Header row, column 1   | Header 2   | Header 3 | Header 4 |
    | (header rows optional) |            |          |          |
    +========================+============+==========+==========+
    | body row 1, column 1   | column 2   | column 3 | column 4 |
    +------------------------+------------+----------+----------+
    | body row 2             | ...        | ...      |          |
    +------------------------+------------+----------+----------+

    简化的表格

    =====  =====  =======
    A      B      A and B
    =====  =====  =======
    False  False  False
    True   False  False
    False  True   False
    True   True   True
    =====  =====  =======
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-org33890ad" class="outline-4"&gt;
&lt;h4 id="org33890ad"&gt;标题&lt;/h4&gt;
&lt;div class="outline-text-4" id="text-org33890ad"&gt;
&lt;pre class="example" id="org386054d"&gt;
# | parts
* | chapters
= | sections
- | subsections
^ | subsubsections
" | paragraphs
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-orge79771d" class="outline-3"&gt;
&lt;h3 id="orge79771d"&gt;指令&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-orge79771d"&gt;
&lt;p&gt;
reST 支持很多指令，这里是常用的几个
&lt;/p&gt;
&lt;/div&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;&lt;a id="orgfb9bf1c"&gt;&lt;/a&gt;&lt;code&gt;image&lt;/code&gt; 图片&lt;br&gt;&lt;/li&gt;

&lt;li&gt;&lt;a id="org84cf971"&gt;&lt;/a&gt;&lt;code&gt;[#footnote]_&lt;/code&gt; 脚注&lt;br&gt;&lt;/li&gt;

&lt;li&gt;&lt;a id="orgce6e4f6"&gt;&lt;/a&gt;&lt;code&gt;..&lt;/code&gt; 注释&lt;br&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div id="outline-container-org0497984" class="outline-3"&gt;
&lt;h3 id="org0497984"&gt;角色&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-org0497984"&gt;
&lt;p&gt;
reST 使用 &lt;code&gt;:rolename:`content`&lt;/code&gt; 语法来做一些复杂的行内标记
&lt;/p&gt;
&lt;/div&gt;
&lt;div id="outline-container-org5c83213" class="outline-4"&gt;
&lt;h4 id="org5c83213"&gt;&lt;code&gt;:ref:&lt;/code&gt; 交叉引用&lt;/h4&gt;
&lt;/div&gt;

&lt;div id="outline-container-orge03f70f" class="outline-4"&gt;
&lt;h4 id="orge03f70f"&gt;&lt;code&gt;:math:&lt;/code&gt; 数学公式&lt;/h4&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;</description><category>doc</category><category>python</category><category>rst</category><guid>https://chimez.github.io/posts/restructuredtext/</guid><pubDate>Mon, 16 Aug 2021 02:46:27 GMT</pubDate></item><item><title>Sphinx: Documentation Generator</title><link>https://chimez.github.io/posts/sphinx-documentation-generator/</link><dc:creator>chimez</dc:creator><description>&lt;div id="outline-container-org20c29ee" class="outline-2"&gt;
&lt;h2 id="org20c29ee"&gt;Sphinx: 文档生成&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-org20c29ee"&gt;
&lt;p&gt;
&lt;a href="https://www.sphinx-doc.org/en/master/usage/quickstart.html"&gt;sphinx/getting started&lt;/a&gt;
&lt;/p&gt;
&lt;/div&gt;
&lt;div id="outline-container-org60856a7" class="outline-3"&gt;
&lt;h3 id="org60856a7"&gt;创建与配置项目&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-org60856a7"&gt;
&lt;/div&gt;
&lt;div id="outline-container-org6942aeb" class="outline-4"&gt;
&lt;h4 id="org6942aeb"&gt;&lt;code&gt;sphinx-quickstart&lt;/code&gt;&lt;/h4&gt;
&lt;div class="outline-text-4" id="text-org6942aeb"&gt;
&lt;p&gt;
使用这个命令，快速创建项目。跟随指导做一些选项。
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-org1ab7b18" class="outline-4"&gt;
&lt;h4 id="org1ab7b18"&gt;生成文档&lt;/h4&gt;
&lt;div class="outline-text-4" id="text-org1ab7b18"&gt;
&lt;p&gt;
使用命令 &lt;code&gt;sphinx-build -b html sourcedir builddir&lt;/code&gt; 或者 &lt;code&gt;make html&lt;/code&gt;
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-org6fe0371" class="outline-4"&gt;
&lt;h4 id="org6fe0371"&gt;基本配置&lt;/h4&gt;
&lt;div class="outline-text-4" id="text-org6fe0371"&gt;
&lt;p&gt;
基本配置在 &lt;code&gt;conf.py&lt;/code&gt; 文件中。这个文件就是一个python 脚本，可以执行各种python函数和导入其它库等。
&lt;/p&gt;

&lt;p&gt;
配置参考&lt;a href="https://www.sphinx-doc.org/en/master/usage/configuration.html"&gt;configuration&lt;/a&gt;
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-org88f6ec1" class="outline-3"&gt;
&lt;h3 id="org88f6ec1"&gt;写文档&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-org88f6ec1"&gt;
&lt;/div&gt;
&lt;div id="outline-container-org2da58f1" class="outline-4"&gt;
&lt;h4 id="org2da58f1"&gt;文档结构&lt;/h4&gt;
&lt;div class="outline-text-4" id="text-org2da58f1"&gt;
&lt;ol class="org-ol"&gt;
&lt;li&gt;&lt;code&gt;index.rst&lt;/code&gt; 文件是文档的欢迎页面，其中包括
&lt;ol class="org-ol"&gt;
&lt;li&gt;目录树 &lt;code&gt;toctree&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-org20f2575" class="outline-4"&gt;
&lt;h4 id="org20f2575"&gt;reStructuredText directives&lt;/h4&gt;
&lt;div class="outline-text-4" id="text-org20f2575"&gt;
&lt;p&gt;
rst 指令的格式中包括
&lt;/p&gt;
&lt;ol class="org-ol"&gt;
&lt;li&gt;参数：在指令名后面的冒号之后，每个指令可以有若干个参数&lt;/li&gt;
&lt;li&gt;选项：在参数之后，选项的形式是 &lt;code&gt;名-值&lt;/code&gt; 的列表，一行一个&lt;/li&gt;
&lt;li&gt;内容：在参数之后空一行&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;&lt;a id="org5de0dc1"&gt;&lt;/a&gt;&lt;code&gt;toctree&lt;/code&gt; 目录&lt;br&gt;
&lt;div class="outline-text-5" id="text-org5de0dc1"&gt;
&lt;p&gt;
参考：&lt;a href="https://www.sphinx-doc.org/en/master/usage/restructuredtext/directives.html#toctree-directive"&gt;directives/toctree-directive&lt;/a&gt;
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;     .. toctree::
        :maxdepth: 2

        intro
        strings
        datatypes
        numeric
        (many more documents listed here)
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;&lt;a id="orga3b978b"&gt;&lt;/a&gt;内容&lt;br&gt;
&lt;div class="outline-text-6" id="text-orga3b978b"&gt;
&lt;p&gt;
内容中每一行就是要链接到的文件名, 可以用 &lt;code&gt;Net Title &amp;lt;filename&amp;gt;&lt;/code&gt; 重新指定显示的标题
&lt;/p&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a id="org97a21ec"&gt;&lt;/a&gt;选项&lt;br&gt;
&lt;div class="outline-text-6" id="text-org97a21ec"&gt;
&lt;table border="2" cellspacing="0" cellpadding="6" rules="groups" frame="hsides"&gt;


&lt;colgroup&gt;
&lt;col class="org-left"&gt;

&lt;col class="org-left"&gt;
&lt;/colgroup&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th scope="col" class="org-left"&gt;选项&lt;/th&gt;
&lt;th scope="col" class="org-left"&gt;作用&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class="org-left"&gt;&lt;code&gt;:numbered:&lt;/code&gt;&lt;/td&gt;
&lt;td class="org-left"&gt;给目录编号&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="org-left"&gt;&lt;code&gt;:caption: Table of Contents&lt;/code&gt;&lt;/td&gt;
&lt;td class="org-left"&gt;目录的标题&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="org-left"&gt;&lt;code&gt;:name: mastertoc&lt;/code&gt;&lt;/td&gt;
&lt;td class="org-left"&gt;设置 &lt;code&gt;ref&lt;/code&gt; 用的名字&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="org-left"&gt;&lt;code&gt;:titlesonly:&lt;/code&gt;&lt;/td&gt;
&lt;td class="org-left"&gt;只显示文件标题&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="org-left"&gt;&lt;code&gt;:glob:&lt;/code&gt;&lt;/td&gt;
&lt;td class="org-left"&gt;可以使用 &lt;code&gt;*&lt;/code&gt; 匹配很多文件&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="org-left"&gt;&lt;code&gt;:hidden:&lt;/code&gt;&lt;/td&gt;
&lt;td class="org-left"&gt;链接，但不显示&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="org-left"&gt;&lt;code&gt;:includehidden:&lt;/code&gt;&lt;/td&gt;
&lt;td class="org-left"&gt;只链接一级标题，隐藏其它的&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="org-left"&gt;&lt;code&gt;:maxdepth: 2&lt;/code&gt;&lt;/td&gt;
&lt;td class="org-left"&gt;目录层级深度&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div id="outline-container-orgeda25c5" class="outline-4"&gt;
&lt;h4 id="orgeda25c5"&gt;Domains&lt;/h4&gt;
&lt;div class="outline-text-4" id="text-orgeda25c5"&gt;
&lt;p&gt;
为了对应 python/c++ 中的名字空间，防止函数名冲突，要把函数的文档写在 domain 里。
&lt;/p&gt;

&lt;p&gt;
参考 &lt;a href="https://www.sphinx-doc.org/en/master/usage/restructuredtext/domains.html"&gt;domains&lt;/a&gt;
&lt;/p&gt;
&lt;/div&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;&lt;a id="org61c05f4"&gt;&lt;/a&gt;基本语法&lt;br&gt;
&lt;div class="outline-text-5" id="text-org61c05f4"&gt;
&lt;p&gt;
可以一次生成两个函数
&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;     .. py:function:: spam(eggs)
                      ham(eggs)

        Spam or ham the foo.
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
如果一个函数很长，可以折行并加上 &lt;code&gt;:noindex:&lt;/code&gt;
&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;     .. py:function:: filterwarnings(action, message='', category=Warning, \
                                     module='', lineno=0, append=False)
        :noindex:
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
默认的 domain 是 python，可以用 &lt;code&gt;.. default-domain:: name&lt;/code&gt; 修改
&lt;/p&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a id="orgcf10bc4"&gt;&lt;/a&gt;交叉引用&lt;br&gt;
&lt;div class="outline-text-5" id="text-orgcf10bc4"&gt;
&lt;p&gt;
基本语法是 &lt;code&gt;:role:`title &amp;lt;target&amp;gt;`&lt;/code&gt; 这会引用 &lt;code&gt;target&lt;/code&gt; 但显示的是 &lt;code&gt;title&lt;/code&gt;
&lt;/p&gt;
&lt;ol class="org-ol"&gt;
&lt;li&gt;前面加 &lt;code&gt;!&lt;/code&gt; 不生成引用&lt;/li&gt;
&lt;li&gt;前面加 波浪线 &lt;code&gt;\~&lt;/code&gt; 只会显示最后一个元素的引用 &lt;code&gt;:py:meth:`\~Queue.Queue.get`&lt;/code&gt; 只显示 &lt;code&gt;get&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a id="org51497ba"&gt;&lt;/a&gt;C++&lt;br&gt;
&lt;div class="outline-text-5" id="text-org51497ba"&gt;
&lt;p&gt;
参考 &lt;a href="https://www.sphinx-doc.org/en/master/usage/restructuredtext/domains.html#cpp-domain"&gt;domains/cpp-domain&lt;/a&gt;     
&lt;/p&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-org2e55f4c" class="outline-3"&gt;
&lt;h3 id="org2e55f4c"&gt;Autodoc: 注释文档&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-org2e55f4c"&gt;
&lt;p&gt;
通过 autodoc 可以从源码的注释生成文档。需要在 &lt;code&gt;conf.py&lt;/code&gt; 的 &lt;code&gt;extensions&lt;/code&gt; 中加入 &lt;code&gt;'sphinx.ext.autodoc'&lt;/code&gt; . 之后就可以利用 &lt;code&gt;autofunction&lt;/code&gt; &lt;code&gt;automodule&lt;/code&gt; 等指令，将注释作为文档导入。
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-org4d7a39d" class="outline-3"&gt;
&lt;h3 id="org4d7a39d"&gt;breathe&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-org4d7a39d"&gt;
&lt;p&gt;
&lt;a href="https://breathe.readthedocs.io/en/latest/index.html"&gt;breathe&lt;/a&gt; 是通过 doxygen 生成 c/c++ 的文档的工具
&lt;/p&gt;
&lt;/div&gt;
&lt;div id="outline-container-org3246110" class="outline-4"&gt;
&lt;h4 id="org3246110"&gt;基本使用&lt;/h4&gt;
&lt;div class="outline-text-4" id="text-org3246110"&gt;
&lt;p&gt;
设置 &lt;code&gt;conf.py&lt;/code&gt;
&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    &lt;span class="n"&gt;breathe_projects_source&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="s2"&gt;"my_proj"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"../src"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;"oneheader.h"&lt;/span&gt;&lt;span class="p"&gt;]),&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="n"&gt;breathe_default_project&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"my_proj"&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
就可以在 &lt;code&gt;index.rst&lt;/code&gt; 中使用
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    .. autodoxygenfile:: oneheader.h
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;</description><category>Documents</category><category>python</category><guid>https://chimez.github.io/posts/sphinx-documentation-generator/</guid><pubDate>Mon, 16 Aug 2021 02:00:41 GMT</pubDate></item></channel></rss>