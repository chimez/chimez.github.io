<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="assets/xml/rss.xsl" media="all"?><rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>chimez's blog</title><link>https://chimez.github.io/</link><description>Blog of chimez</description><atom:link href="https://chimez.github.io/rss.xml" rel="self" type="application/rss+xml"></atom:link><language>en</language><copyright>Contents © 2021 &lt;a href="mailto:chimez@163.com"&gt;chimez&lt;/a&gt; </copyright><lastBuildDate>Thu, 21 Oct 2021 05:32:22 GMT</lastBuildDate><generator>Nikola (getnikola.com)</generator><docs>http://blogs.law.harvard.edu/tech/rss</docs><item><title>wsl</title><link>https://chimez.github.io/posts/wsl/</link><dc:creator>chimez</dc:creator><description>&lt;div id="outline-container-org663b7d0" class="outline-2"&gt;
&lt;h2 id="org663b7d0"&gt;WSL&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-org663b7d0"&gt;
&lt;/div&gt;
&lt;div id="outline-container-orgc3e453d" class="outline-3"&gt;
&lt;h3 id="orgc3e453d"&gt;配置 ssh&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-orgc3e453d"&gt;
&lt;ol class="org-ol"&gt;
&lt;li&gt;安装 &lt;code&gt;openssh-server&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;
编辑 &lt;code&gt;/etc/ssh/sshd_config&lt;/code&gt;
&lt;/p&gt;
&lt;pre class="example" id="orgaefff1f"&gt;
# change port
Port 9922
ListenAddress 0.0.0.0
PasswordAuthentication yes
&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;重启服务器 &lt;code&gt;sudo service ssh restart&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;
windows 重定向端口
&lt;/p&gt;
&lt;pre class="example" id="orgee391ed"&gt;
netsh interface portproxy add v4tov4 listenaddress=0.0.0.0 listenport=9922 connectaddress=172.23.241.25 connectport=9922
&lt;/pre&gt;
&lt;ol class="org-ol"&gt;
&lt;li&gt;端口号就是 ssh 的&lt;/li&gt;
&lt;li&gt;wsl 的 ip 地址可以从 &lt;code&gt;ifconfig&lt;/code&gt; 命令获得&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ifconfig&lt;/code&gt; 在 &lt;code&gt;net-tools&lt;/code&gt; 包中&lt;/li&gt;
&lt;/ol&gt;&lt;/li&gt;
&lt;li&gt;在 windows 防火墙中添加端口&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/body&gt;
&lt;/html&gt;
</description><category>windows</category><category>wsl</category><guid>https://chimez.github.io/posts/wsl/</guid><pubDate>Thu, 21 Oct 2021 04:27:51 GMT</pubDate></item><item><title>setuptools</title><link>https://chimez.github.io/posts/setuptools/</link><dc:creator>chimez</dc:creator><description>&lt;div id="outline-container-org7e32d92" class="outline-2"&gt;
&lt;h2 id="org7e32d92"&gt;setuptools: python 的打包工具&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-org7e32d92"&gt;
&lt;p&gt;
&lt;a href="https://setuptools.pypa.io"&gt;setuptools&lt;/a&gt; 是 pypa 的项目。
&lt;/p&gt;
&lt;/div&gt;

&lt;div id="outline-container-orgc2338b9" class="outline-3"&gt;
&lt;h3 id="orgc2338b9"&gt;基本使用&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-orgc2338b9"&gt;
&lt;/div&gt;
&lt;div id="outline-container-org7fd4633" class="outline-4"&gt;
&lt;h4 id="org7fd4633"&gt;&lt;code&gt;pyproject.toml&lt;/code&gt;&lt;/h4&gt;
&lt;div class="outline-text-4" id="text-org7fd4633"&gt;
&lt;p&gt;
PEP 517 要求所有 python 项目需要一个配置文件 &lt;code&gt;pyproject.toml&lt;/code&gt; 其中描述项目的基本信息和依赖等。
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    [build-system]
    requires = ["setuptools", "wheel"]
    build-backend = "setuptools.build_meta"
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;


&lt;div id="outline-container-org3580d46" class="outline-4"&gt;
&lt;h4 id="org3580d46"&gt;&lt;code&gt;setup.cfg&lt;/code&gt; or &lt;code&gt;setup.py&lt;/code&gt;&lt;/h4&gt;
&lt;div class="outline-text-4" id="text-org3580d46"&gt;
&lt;p&gt;
&lt;code&gt;setup.cfg&lt;/code&gt; 是 setuptools 的 DSL，而 &lt;code&gt;setup.py&lt;/code&gt; 用一般的 python 代码。
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    &lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;setuptools&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;setup&lt;/span&gt;

    &lt;span class="n"&gt;setup&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
	&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;'mypackage'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
	&lt;span class="n"&gt;version&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;'0.0.1'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
	&lt;span class="n"&gt;packages&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'mypackage'&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
	&lt;span class="n"&gt;install_requires&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;
	    &lt;span class="s1"&gt;'requests'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
	    &lt;span class="s1"&gt;'importlib; python_version == "2.6"'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
	&lt;span class="p"&gt;],&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;ul class="org-ul"&gt;
&lt;li&gt;&lt;code&gt;packages&lt;/code&gt; 指定 setuptools 要处理的包，可以使用 &lt;code&gt;find_packages&lt;/code&gt;, &lt;code&gt;find_namespace_packages&lt;/code&gt; 来自动找到所有包&lt;/li&gt;
&lt;li&gt;&lt;code&gt;install_requires&lt;/code&gt; 指定安装包需要的依赖, setuptools 可以自动从 pypa 安装依赖&lt;/li&gt;
&lt;li&gt;&lt;code&gt;setup_requires&lt;/code&gt; 指定依赖，但 setuptools 不会自动安装它&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;


&lt;div id="outline-container-org651b16d" class="outline-3"&gt;
&lt;h3 id="org651b16d"&gt;开发模式&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-org651b16d"&gt;
&lt;p&gt;
使用开发模式，可以完成构建而不需要将文件复制到包目录。
&lt;/p&gt;

&lt;ul class="org-ul"&gt;
&lt;li&gt;开发模式安装 &lt;code&gt;setup.py develop&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;开发模式卸载 &lt;code&gt;setup.py develop --uninstall&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;开发模式与 PEP 517 不兼容，所以用 pip 安装的方式是 &lt;code&gt;pip install --editable .&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-org58c7310" class="outline-3"&gt;
&lt;h3 id="org58c7310"&gt;cython&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-org58c7310"&gt;
&lt;p&gt;
setuptools 会自动检查 cython 是否安装，如果没有，就会忽略所有 &lt;code&gt;.pyx&lt;/code&gt; 文件。
&lt;/p&gt;

&lt;p&gt;
PEP 517 要求在 &lt;code&gt;pyproject.toml&lt;/code&gt; 中加入
&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;   [build-system]
   requires=[..., "cython"]
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
为了兼容性，推荐在 &lt;code&gt;setup.py&lt;/code&gt; 中也加入依赖 &lt;code&gt;setup_requires = ['cython', ...]&lt;/code&gt;
&lt;/p&gt;

&lt;p&gt;
&lt;code&gt;setup.py&lt;/code&gt;
&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;   &lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;setuptools&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;setup&lt;/span&gt;
   &lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;Cython.Build&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;cythonize&lt;/span&gt;

   &lt;span class="n"&gt;setup&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
       &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;'Hello world app'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
       &lt;span class="n"&gt;ext_modules&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;cythonize&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"hello.pyx"&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
       &lt;span class="n"&gt;zip_safe&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="kc"&gt;False&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
       &lt;span class="n"&gt;setup_requires&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'cython'&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
   &lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/body&gt;
&lt;/html&gt;
</description><category>cython</category><category>python</category><guid>https://chimez.github.io/posts/setuptools/</guid><pubDate>Wed, 06 Oct 2021 12:00:12 GMT</pubDate></item><item><title>apache</title><link>https://chimez.github.io/posts/apache/</link><dc:creator>chimez</dc:creator><description>&lt;div id="outline-container-org8cc4ff0" class="outline-2"&gt;
&lt;h2 id="org8cc4ff0"&gt;Apache HTTP 服务器&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-org8cc4ff0"&gt;
&lt;/div&gt;
&lt;div id="outline-container-orgf3507d6" class="outline-3"&gt;
&lt;h3 id="orgf3507d6"&gt;配置文件&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-orgf3507d6"&gt;
&lt;p&gt;
参考： &lt;a href="https://httpd.apache.org/docs/current/configuring.html"&gt;apache-httpd/configuring&lt;/a&gt;
&lt;/p&gt;

&lt;p&gt;
配置文件叫做 &lt;code&gt;httpd.conf&lt;/code&gt; 在 debian 是 &lt;code&gt;/etc/apache2/apache.conf&lt;/code&gt;
&lt;/p&gt;
&lt;/div&gt;

&lt;div id="outline-container-org7a09d8e" class="outline-4"&gt;
&lt;h4 id="org7a09d8e"&gt;语法&lt;/h4&gt;
&lt;div class="outline-text-4" id="text-org7a09d8e"&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;每行一个指令，反斜线可以折行&lt;/li&gt;
&lt;li&gt;指令大小写不敏感，但参数大小写敏感&lt;/li&gt;
&lt;li&gt;指令的参数用空格分隔&lt;/li&gt;
&lt;li&gt;指令之前的空格都忽略，所以可以任意缩进&lt;/li&gt;
&lt;li&gt;变量用 &lt;code&gt;Define&lt;/code&gt; 指令定义，用 &lt;code&gt;${VAR}&lt;/code&gt; 格式使用&lt;/li&gt;
&lt;li&gt;使用 &lt;code&gt;apachectl configtest&lt;/code&gt; 检查配置文件的语法错误&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;


&lt;div id="outline-container-orgf20ddfb" class="outline-2"&gt;
&lt;h2 id="orgf20ddfb"&gt;配置&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-orgf20ddfb"&gt;
&lt;/div&gt;
&lt;div id="outline-container-org31e48ab" class="outline-3"&gt;
&lt;h3 id="org31e48ab"&gt;反向代理 jupyterlab&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-org31e48ab"&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;需要的模块： &lt;code&gt;a2enmod ssl rewrite proxy proxy_http proxy_wstunnel&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;jupyterlab 需要配置
&lt;ul class="org-ul"&gt;
&lt;li&gt;&lt;code&gt;c.ServerApp.allow_origin = '*'&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;c.ServerApp.base_url = '/jupyterlab'&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;c.ServerApp.port = 11413&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;lt;Location "/jupyterlab/"&amp;gt;
    RewriteEngine On
    RewriteRule /jupyterlab/(.*) ws://127.0.0.1:11413/jupyterlab/$1 [P]
    RewriteRule /jupyterlab/(.*) http://127.0.0.1:11413/jupyterlab/$1 [P]

    ProxyPreserveHost on
    ProxyPass         http://127.0.0.1:11413/jupyterlab/
    ProxyPassReverse  http://127.0.0.1:11413/jupyterlab/
&amp;lt;/Location&amp;gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/body&gt;
&lt;/html&gt;



&lt;div id="outline-container-orgf20ddfb" class="outline-2"&gt;
&lt;h2 id="orgf20ddfb"&gt;配置&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-orgf20ddfb"&gt;
&lt;/div&gt;
&lt;div id="outline-container-org31e48ab" class="outline-3"&gt;
&lt;h3 id="org31e48ab"&gt;反向代理 jupyterlab&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-org31e48ab"&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;需要的模块： &lt;code&gt;a2enmod ssl rewrite proxy proxy_http proxy_wstunnel&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;jupyterlab 需要配置
&lt;ul class="org-ul"&gt;
&lt;li&gt;&lt;code&gt;c.ServerApp.allow_origin = '*'&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;c.ServerApp.base_url = '/jupyterlab'&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;c.ServerApp.port = 11413&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;lt;Location "/jupyterlab/"&amp;gt;
    RewriteEngine On
    RewriteRule /jupyterlab/(.*) ws://127.0.0.1:11413/jupyterlab/$1 [P]
    RewriteRule /jupyterlab/(.*) http://127.0.0.1:11413/jupyterlab/$1 [P]

    ProxyPreserveHost on
    ProxyPass         http://127.0.0.1:11413/jupyterlab/
    ProxyPassReverse  http://127.0.0.1:11413/jupyterlab/
&amp;lt;/Location&amp;gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/body&gt;
&lt;/html&gt;
</description><category>apache</category><category>php</category><category>web</category><guid>https://chimez.github.io/posts/apache/</guid><pubDate>Sat, 18 Sep 2021 02:45:41 GMT</pubDate></item><item><title>PBLAS &amp; ScaLAPACK &amp; BLACS</title><link>https://chimez.github.io/posts/pblas-scalapack/</link><dc:creator>chimez</dc:creator><description>&lt;div id="outline-container-orgd13e823" class="outline-2"&gt;
&lt;h2 id="orgd13e823"&gt;PBLAS &amp;amp; ScaLAPACK &amp;amp; BLACS&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-orgd13e823"&gt;
&lt;p&gt;
&lt;a href="https://www.netlib.org/scalapack/"&gt;ScaLAPACK&lt;/a&gt; 是基于 MPI 的并行版本 LAPACK, &lt;a href="https://www.netlib.org/scalapack/pblas_qref.html"&gt;PBLAS&lt;/a&gt; 则是并行版本的 BLAS. 其中 PBLAS 是嵌入到 ScaLAPACK 里的，这与 LAPACK 经常嵌入到 BLAS 里刚好反过来
&lt;/p&gt;
&lt;/div&gt;

&lt;div id="outline-container-org05d4f68" class="outline-3"&gt;
&lt;h3 id="org05d4f68"&gt;编译&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-org05d4f68"&gt;
&lt;ol class="org-ol"&gt;
&lt;li&gt;从 github 下载 &lt;a href="https://github.com/Reference-ScaLAPACK/scalapack/"&gt;https://github.com/Reference-ScaLAPACK/scalapack/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;修改 &lt;code&gt;SLmake.inc&lt;/code&gt; 文件中的 &lt;code&gt;FC&lt;/code&gt;, &lt;code&gt;CC&lt;/code&gt;, &lt;code&gt;BLASLIB&lt;/code&gt;, &lt;code&gt;LAPACKLIB&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;
示例
&lt;/p&gt;
&lt;pre class="example" id="org6b1a93d"&gt;
FC            = /home/beacon/app/openmpi/bin/mpif90
CC            = /home/beacon/app/openmpi/bin/mpicc 
NOOPT         = -O0 -std=legacy
FCFLAGS       = -O3 -std=legacy
CCFLAGS       = -O3


BLASLIB       = -L/usr/lib/x86_64-linux-gnu/openblas-openmp/ -lblas
LAPACKLIB     = -L/usr/lib/x86_64-linux-gnu/openblas-openmp/ -llapack

&lt;/pre&gt;
&lt;/div&gt;

&lt;div id="outline-container-org8ca23df" class="outline-4"&gt;
&lt;h4 id="org8ca23df"&gt;GCC 10 不兼容&lt;/h4&gt;
&lt;div class="outline-text-4" id="text-org8ca23df"&gt;
&lt;p&gt;
由于 GCC 10 根据最新的 fortran 标准，要求参数类型匹配，所以老代码不给通过，可以添加 &lt;code&gt;-fallow-argument-mismatch&lt;/code&gt; 或 &lt;code&gt;-std=legacy&lt;/code&gt; 来编译。
&lt;/p&gt;

&lt;p&gt;
参考 &lt;a href="https://gcc.gnu.org/gcc-10/porting_to.html"&gt;Porting to GCC 10&lt;/a&gt;
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-orgde7676b" class="outline-3"&gt;
&lt;h3 id="orgde7676b"&gt;BLACS&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-orgde7676b"&gt;
&lt;p&gt;
&lt;a href="https://www.netlib.org/blacs/index.html"&gt;BLACS&lt;/a&gt; 的目的是提供一组在分布内存系统上的线性代数的标准通信接口，主要是作为 ScaLAPACK 的通信层。
&lt;/p&gt;

&lt;p&gt;
除了 MPI 外, BLACS 还支持多种通信方案。当然现在 MPI 基本成为主流， 这部分作用已经意义不大了。
&lt;/p&gt;

&lt;p&gt;
&lt;a href="https://software.intel.com/content/www/us/en/develop/documentation/onemkl-developer-reference-c/top/blacs-routines.html"&gt;oneAPI/MKL/BLACS&lt;/a&gt;
&lt;/p&gt;
&lt;/div&gt;
&lt;div id="outline-container-org5d0402f" class="outline-4"&gt;
&lt;h4 id="org5d0402f"&gt;基本概念&lt;/h4&gt;
&lt;div class="outline-text-4" id="text-org5d0402f"&gt;
&lt;/div&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;&lt;a id="orgc6fa68b"&gt;&lt;/a&gt;进程网格和范围操作&lt;br&gt;
&lt;div class="outline-text-5" id="text-orgc6fa68b"&gt;
&lt;p&gt;
一个分布式机器上有 \(P\) 个进程，编号从 \(0\) 到 \(P-1\), 我们人为地将它们排列成 \(R\) 行 \(C\) 列的网格，用行列指标 \((i,j)\) 来表示其中一个进程。
&lt;/p&gt;

&lt;p&gt;
这样划分的好处在于线性代数操作时，二维数组被分散到 &lt;b&gt;进程网格&lt;/b&gt; (process grid)中，数据的行列与进程的行列有直接的对应，很适合编程。
&lt;/p&gt;

&lt;p&gt;
当进行的通信涉及两个以上的进程时，就将这种操作称作 &lt;b&gt;范围操作&lt;/b&gt; (scoped operations)。
基本的范围操作有
&lt;/p&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;行通信&lt;/li&gt;
&lt;li&gt;列通信&lt;/li&gt;
&lt;li&gt;全部通信&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/li&gt;

&lt;li&gt;&lt;a id="org9ecb47a"&gt;&lt;/a&gt;上下文&lt;br&gt;
&lt;div class="outline-text-5" id="text-org9ecb47a"&gt;
&lt;p&gt;
&lt;b&gt;上下文&lt;/b&gt; (context) 表示一个通信空间，每个进程网格都有自己的上下文，在同一个上下文内部的通信不会被其它上下文的覆盖。
&lt;/p&gt;

&lt;p&gt;
上下文的主要作用是可以将同一组进程标记成不同的进程网格，来方便进行通信操作。
&lt;/p&gt;

&lt;p&gt;
BLACS 中有关上下文的函数有
&lt;/p&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;&lt;code&gt;BLACS_GRIDINIT&lt;/code&gt;, &lt;code&gt;BLACS_GRIDMAP&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;BLACS_GRIDEXIT&lt;/code&gt;, &lt;code&gt;BLACS_EXIT&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/li&gt;

&lt;li&gt;&lt;a id="org7df683e"&gt;&lt;/a&gt;基于数组的通信&lt;br&gt;
&lt;div class="outline-text-5" id="text-org7df683e"&gt;
&lt;p&gt;
BLACS 中有两个基本的数据模型
&lt;/p&gt;
&lt;/div&gt;

&lt;ul class="org-ul"&gt;
&lt;li&gt;&lt;a id="org49f000c"&gt;&lt;/a&gt;矩形矩阵&lt;br&gt;
&lt;div class="outline-text-6" id="text-org49f000c"&gt;
&lt;p&gt;
一维向量是特殊的矩形矩阵。
&lt;/p&gt;

&lt;p&gt;
矩形矩阵是一个二维数组， &lt;code&gt;M&lt;/code&gt; 行 &lt;code&gt;N&lt;/code&gt; 列，主维数是 &lt;code&gt;LDA&lt;/code&gt;, 主维数就是相邻的两列数在内存中的间隔.
&lt;/p&gt;
&lt;/div&gt;
&lt;/li&gt;

&lt;li&gt;&lt;a id="org87f06c5"&gt;&lt;/a&gt;梯形矩阵&lt;br&gt;
&lt;div class="outline-text-6" id="text-org87f06c5"&gt;
&lt;p&gt;
三角矩阵和对角矩阵是特殊的梯形矩阵。
&lt;/p&gt;

&lt;p&gt;
梯形矩阵的最大底边是 &lt;code&gt;M,N&lt;/code&gt; 中最大的数，另一个是梯形的高，梯形的短底边是长底边和高的差。
&lt;/p&gt;

&lt;ul class="org-ul"&gt;
&lt;li&gt;&lt;code&gt;UPLO&lt;/code&gt;: 梯形矩阵， &lt;code&gt;'U','L'&lt;/code&gt; 上下梯形&lt;/li&gt;
&lt;li&gt;&lt;code&gt;DIAG&lt;/code&gt;: 单位对角矩阵&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;

&lt;li&gt;&lt;a id="orge4dcaf3"&gt;&lt;/a&gt;无编号通信&lt;br&gt;
&lt;div class="outline-text-5" id="text-orge4dcaf3"&gt;
&lt;p&gt;
BLACS 与其它通信层的区别之一是，BLACS不需要用户指定消息的编号 (例如 MPI 的 tag) ,因为编号的选择有时会导致编程的困难，所以 BLACS 通过一个特定的算法自动生成消息编号，用户可以用 &lt;code&gt;SHIFT_RANGE&lt;/code&gt; 来将 BLACS 的消息编号限制在一个范围里，来和用户自定义的消息编号隔离。
&lt;/p&gt;

&lt;p&gt;
BLACS 的通信保证
&lt;/p&gt;
&lt;ol class="org-ol"&gt;
&lt;li&gt;接收端知道消息的来源&lt;/li&gt;
&lt;li&gt;接收的顺序与发送的顺序一致&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;

&lt;div id="outline-container-org5cc51ff" class="outline-4"&gt;
&lt;h4 id="org5cc51ff"&gt;结构&lt;/h4&gt;
&lt;div class="outline-text-4" id="text-org5cc51ff"&gt;
&lt;p&gt;
BLACS 由 4 个部分构成
&lt;/p&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;点到点通信&lt;/li&gt;
&lt;li&gt;广播&lt;/li&gt;
&lt;li&gt;组合&lt;/li&gt;
&lt;li&gt;支持模块&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;
&lt;a href="https://www.netlib.org/blacs/BLACS/QRef.html"&gt;函数参考&lt;/a&gt;
&lt;/p&gt;
&lt;/div&gt;

&lt;ul class="org-ul"&gt;
&lt;li&gt;&lt;a id="org86b82dc"&gt;&lt;/a&gt;命名规则&lt;br&gt;
&lt;div class="outline-text-5" id="text-org86b82dc"&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;点到点通信与广播： &lt;code&gt;vXXYY2D&lt;/code&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;&lt;code&gt;v&lt;/code&gt; 表示数据类型&lt;/li&gt;
&lt;li&gt;&lt;code&gt;XX&lt;/code&gt; 表示矩阵的形状&lt;/li&gt;
&lt;li&gt;&lt;code&gt;YY&lt;/code&gt; 表示通信的类型&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;组合: &lt;code&gt;vGZZZ2D&lt;/code&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;&lt;code&gt;v&lt;/code&gt; 表示数据类型&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ZZZ&lt;/code&gt; 表示操作类型&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;支持模块: &lt;code&gt;BLACS_&amp;lt;name&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;table border="2" cellspacing="0" cellpadding="6" rules="groups" frame="hsides"&gt;


&lt;colgroup&gt;
&lt;col class="org-left"&gt;

&lt;col class="org-left"&gt;
&lt;/colgroup&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th scope="col" class="org-left"&gt;&lt;code&gt;v&lt;/code&gt;&lt;/th&gt;
&lt;th scope="col" class="org-left"&gt;意义&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class="org-left"&gt;&lt;code&gt;I&lt;/code&gt;&lt;/td&gt;
&lt;td class="org-left"&gt;整数&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="org-left"&gt;&lt;code&gt;S&lt;/code&gt;&lt;/td&gt;
&lt;td class="org-left"&gt;单精度&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="org-left"&gt;&lt;code&gt;D&lt;/code&gt;&lt;/td&gt;
&lt;td class="org-left"&gt;双精度&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="org-left"&gt;&lt;code&gt;C&lt;/code&gt;&lt;/td&gt;
&lt;td class="org-left"&gt;单精度复数&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="org-left"&gt;&lt;code&gt;Z&lt;/code&gt;&lt;/td&gt;
&lt;td class="org-left"&gt;双精度复数&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;


&lt;table border="2" cellspacing="0" cellpadding="6" rules="groups" frame="hsides"&gt;


&lt;colgroup&gt;
&lt;col class="org-left"&gt;

&lt;col class="org-left"&gt;
&lt;/colgroup&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th scope="col" class="org-left"&gt;&lt;code&gt;XX&lt;/code&gt;&lt;/th&gt;
&lt;th scope="col" class="org-left"&gt;意义&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class="org-left"&gt;&lt;code&gt;GE&lt;/code&gt;&lt;/td&gt;
&lt;td class="org-left"&gt;矩形矩阵&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="org-left"&gt;&lt;code&gt;TR&lt;/code&gt;&lt;/td&gt;
&lt;td class="org-left"&gt;梯形矩阵&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;


&lt;table border="2" cellspacing="0" cellpadding="6" rules="groups" frame="hsides"&gt;


&lt;colgroup&gt;
&lt;col class="org-left"&gt;

&lt;col class="org-left"&gt;
&lt;/colgroup&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th scope="col" class="org-left"&gt;&lt;code&gt;YY&lt;/code&gt;&lt;/th&gt;
&lt;th scope="col" class="org-left"&gt;意义&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class="org-left"&gt;&lt;code&gt;SD&lt;/code&gt;&lt;/td&gt;
&lt;td class="org-left"&gt;点到点发送&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="org-left"&gt;&lt;code&gt;RV&lt;/code&gt;&lt;/td&gt;
&lt;td class="org-left"&gt;点到点接收&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="org-left"&gt;&lt;code&gt;BS&lt;/code&gt;&lt;/td&gt;
&lt;td class="org-left"&gt;广播发送&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="org-left"&gt;&lt;code&gt;BR&lt;/code&gt;&lt;/td&gt;
&lt;td class="org-left"&gt;广播接收&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;


&lt;table border="2" cellspacing="0" cellpadding="6" rules="groups" frame="hsides"&gt;


&lt;colgroup&gt;
&lt;col class="org-left"&gt;

&lt;col class="org-left"&gt;
&lt;/colgroup&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th scope="col" class="org-left"&gt;&lt;code&gt;ZZZ&lt;/code&gt;&lt;/th&gt;
&lt;th scope="col" class="org-left"&gt;意义&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class="org-left"&gt;&lt;code&gt;AMX&lt;/code&gt;&lt;/td&gt;
&lt;td class="org-left"&gt;最大绝对值&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="org-left"&gt;&lt;code&gt;AMN&lt;/code&gt;&lt;/td&gt;
&lt;td class="org-left"&gt;最小绝对值&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="org-left"&gt;&lt;code&gt;SUM&lt;/code&gt;&lt;/td&gt;
&lt;td class="org-left"&gt;求和&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-org053ee59" class="outline-3"&gt;
&lt;h3 id="org053ee59"&gt;PBLAS&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-org053ee59"&gt;
&lt;p&gt;
&lt;a href="https://www.netlib.org/scalapack/pblas_qref.html"&gt;PBLAS&lt;/a&gt; 的函数类似 BLAS, 由于是作为 ScaLAPACK 的一部分分发的，所以不提供统一的 &lt;code&gt;.h&lt;/code&gt; 头文件，得自己写。
&lt;/p&gt;

&lt;p&gt;
&lt;a href="https://software.intel.com/content/www/us/en/develop/documentation/onemkl-developer-reference-c/top/pblas-routines.html"&gt;oneAPI/MKL/PBLAS&lt;/a&gt;
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-org0fcc1a8" class="outline-3"&gt;
&lt;h3 id="org0fcc1a8"&gt;ScaLAPACK&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-org0fcc1a8"&gt;
&lt;/div&gt;
&lt;div id="outline-container-orgad3249b" class="outline-4"&gt;
&lt;h4 id="orgad3249b"&gt;基本方法&lt;/h4&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/body&gt;
&lt;/html&gt;
</description><category>BLACS</category><category>BLAS</category><category>C</category><category>LAPACK</category><category>MPI</category><category>PBLAS</category><category>ScaLAPACK</category><guid>https://chimez.github.io/posts/pblas-scalapack/</guid><pubDate>Tue, 24 Aug 2021 04:31:22 GMT</pubDate></item><item><title>Rust macro</title><link>https://chimez.github.io/posts/rust-macro/</link><dc:creator>chimez</dc:creator><description>&lt;div id="outline-container-org9e21e83" class="outline-2"&gt;
&lt;h2 id="org9e21e83"&gt;Rust 宏&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-org9e21e83"&gt;
&lt;p&gt;
Rust 的宏分为两类，一种是声明宏 &lt;code&gt;macro_rules!&lt;/code&gt; ,另一种是过程宏 &lt;code&gt;#[...]&lt;/code&gt; .
&lt;/p&gt;
&lt;/div&gt;


&lt;div id="outline-container-org00438ff" class="outline-3"&gt;
&lt;h3 id="org00438ff"&gt;声明宏 &lt;code&gt;macro_rules!&lt;/code&gt;&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-org00438ff"&gt;
&lt;p&gt;
声明宏是 Rust 中最常用的宏，通过对源码的模式匹配来实现功能。
&lt;/p&gt;
&lt;/div&gt;

&lt;div id="outline-container-org0eabae1" class="outline-4"&gt;
&lt;h4 id="org0eabae1"&gt;语法&lt;/h4&gt;
&lt;div class="outline-text-4" id="text-org0eabae1"&gt;
&lt;p&gt;
参考： &lt;a href="https://doc.rust-lang.org/reference/macros-by-example.html"&gt;reference/macro&lt;/a&gt;
&lt;/p&gt;

&lt;ul class="org-ul"&gt;
&lt;li&gt;&lt;code&gt;#[macro_export]&lt;/code&gt; 导出宏&lt;/li&gt;
&lt;li&gt;&lt;code&gt;$x:expr&lt;/code&gt; 表明模式匹配一个 &lt;code&gt;expr&lt;/code&gt; 类型的源码块，并用 &lt;code&gt;$x&lt;/code&gt; 表示它&lt;/li&gt;
&lt;li&gt;&lt;code&gt;$( ... ),*$&lt;/code&gt; 表明匹配括号中的内容 0 次或多次，每个重复的内容直接由 &lt;code&gt;,&lt;/code&gt; 分隔&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-org9bb41e5" class="outline-4"&gt;
&lt;h4 id="org9bb41e5"&gt;例子： &lt;code&gt;vec!&lt;/code&gt;&lt;/h4&gt;
&lt;div class="outline-text-4" id="text-org9bb41e5"&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    #[macro_export]
    macro_rules! vec {
	( $( $x:expr ),* ) =&amp;gt; {
	    {
		let mut temp_vec = Vec::new();
		$(
		    temp_vec.push($x);
		)*
		    temp_vec
	    }
	};
    }
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;


&lt;div id="outline-container-org3450c30" class="outline-3"&gt;
&lt;h3 id="org3450c30"&gt;过程宏&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-org3450c30"&gt;
&lt;p&gt;
过程宏是一个函数，不过它的输入输出类型是词法对象 &lt;code&gt;TokenStream&lt;/code&gt; ，由编译器在编译前调用。
&lt;/p&gt;
&lt;/div&gt;

&lt;div id="outline-container-org6a0fb39" class="outline-4"&gt;
&lt;h4 id="org6a0fb39"&gt;crate&lt;/h4&gt;
&lt;div class="outline-text-4" id="text-org6a0fb39"&gt;
&lt;p&gt;
由于技术限制，目前过程宏必须分离在一个单独的 crate 中, 这个 crate 是 &lt;code&gt;proc-macro&lt;/code&gt; 类型的
&lt;/p&gt;


&lt;p&gt;
&lt;code&gt;Cargo.toml&lt;/code&gt;
&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    [lib]
    proc-macro = true
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-org7765bbd" class="outline-4"&gt;
&lt;h4 id="org7765bbd"&gt;&lt;code&gt;derive&lt;/code&gt; 宏&lt;/h4&gt;
&lt;div class="outline-text-4" id="text-org7765bbd"&gt;
&lt;p&gt;
&lt;code&gt;derive&lt;/code&gt; 宏用来为结构体等创建默认的 trait 实现。
&lt;/p&gt;

&lt;p&gt;
下面的例子创建一个 &lt;code&gt;HelloMacro&lt;/code&gt; trait 的默认实现宏。
&lt;/p&gt;
&lt;/div&gt;

&lt;ul class="org-ul"&gt;
&lt;li&gt;&lt;a id="org6aec40b"&gt;&lt;/a&gt;使用&lt;br&gt;
&lt;div class="outline-text-5" id="text-org6aec40b"&gt;
&lt;p&gt;
下面的例子展示了为 &lt;code&gt;struct Pancakes&lt;/code&gt; 创建 trait &lt;code&gt;HelloMacro&lt;/code&gt; 的默认实现的方法，这个 trait 中只有一个函数 &lt;code&gt;hello_macro()&lt;/code&gt;
&lt;/p&gt;

&lt;p&gt;
&lt;code&gt;src/main.rs&lt;/code&gt;
&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;     use hello_macro::HelloMacro;
     use hello_macro_derive::HelloMacro;

     #[derive(HelloMacro)]
     struct Pancakes;

     fn main() {
	 Pancakes::hello_macro();
     }
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;

&lt;li&gt;&lt;a id="org5e35bea"&gt;&lt;/a&gt;trait 定义&lt;br&gt;
&lt;div class="outline-text-5" id="text-org5e35bea"&gt;
&lt;p&gt;
&lt;code&gt;hello_macro/src/lib.rs&lt;/code&gt;
&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;     pub trait HelloMacro {
	 fn hello_macro();
     }
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;

&lt;li&gt;&lt;a id="org8e74709"&gt;&lt;/a&gt;宏定义&lt;br&gt;
&lt;div class="outline-text-5" id="text-org8e74709"&gt;
&lt;p&gt;
&lt;code&gt;hello_macro_derive/Cargo.toml&lt;/code&gt;
&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;     [lib]
     proc-macro = true

     [dependencies]
     syn = "1.0"
     quote = "1.0"
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
&lt;code&gt;hello_macro_derive/src/lib.rs&lt;/code&gt;
&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;     extern crate proc_macro;

     use proc_macro::TokenStream;
     use quote::quote;
     use syn;

     #[proc_macro_derive(HelloMacro)]
     pub fn hello_macro_derive(input: TokenStream) -&amp;gt; TokenStream {
	 // Construct a representation of Rust code as a syntax tree
	 // that we can manipulate
	 let ast = syn::parse(input).unwrap();

	 // Build the trait implementation
	 impl_hello_macro(&amp;amp;ast)
     }

     fn impl_hello_macro(ast: &amp;amp;syn::DeriveInput) -&amp;gt; TokenStream {
	 let name = &amp;amp;ast.ident;
	 let gen = quote! {
	     impl HelloMacro for #name {
		 fn hello_macro() {
		     println!("Hello, Macro! My name is {}!", stringify!(#name));
		 }
	     }
	 };
	 gen.into()
     }
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;

&lt;div id="outline-container-org7875d5d" class="outline-4"&gt;
&lt;h4 id="org7875d5d"&gt;&lt;code&gt;Attribute-like&lt;/code&gt; 宏&lt;/h4&gt;
&lt;div class="outline-text-4" id="text-org7875d5d"&gt;
&lt;p&gt;
属性宏可以创建新的属性, 与 &lt;code&gt;derive&lt;/code&gt; 宏的区别在于参数多了一个属性 &lt;code&gt;attr&lt;/code&gt;, 也就是括号里面的部分，另一个参数 &lt;code&gt;item&lt;/code&gt; 就是与 &lt;code&gt;derive&lt;/code&gt; 宏一样的内容了。
&lt;/p&gt;
&lt;/div&gt;

&lt;ul class="org-ul"&gt;
&lt;li&gt;&lt;a id="orgb598b7b"&gt;&lt;/a&gt;用法&lt;br&gt;
&lt;div class="outline-text-5" id="text-orgb598b7b"&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;     #[route(GET, "/")]
     fn index() { ... }
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;

&lt;li&gt;&lt;a id="org6f08530"&gt;&lt;/a&gt;宏定义&lt;br&gt;
&lt;div class="outline-text-5" id="text-org6f08530"&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;     #[proc_macro_attribute]
     pub fn route(attr: TokenStream, item: TokenStream) -&amp;gt; TokenStream { ... }
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;

&lt;div id="outline-container-org374b7a5" class="outline-4"&gt;
&lt;h4 id="org374b7a5"&gt;&lt;code&gt;Function-like&lt;/code&gt; 宏&lt;/h4&gt;
&lt;div class="outline-text-4" id="text-org374b7a5"&gt;
&lt;p&gt;
函数宏可以定义像函数一样调用的宏。可以用来定义 DSL
&lt;/p&gt;
&lt;/div&gt;

&lt;ul class="org-ul"&gt;
&lt;li&gt;&lt;a id="org02c78a4"&gt;&lt;/a&gt;用法&lt;br&gt;
&lt;div class="outline-text-5" id="text-org02c78a4"&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;     let sql = sql!(SELECT * FROM posts WHERE id=1);
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;

&lt;li&gt;&lt;a id="org6797a07"&gt;&lt;/a&gt;宏定义&lt;br&gt;
&lt;div class="outline-text-5" id="text-org6797a07"&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;     #[proc_macro]
     pub fn sql(input: TokenStream) -&amp;gt; TokenStream { ... }
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;

&lt;div id="outline-container-org04a8869" class="outline-4"&gt;
&lt;h4 id="org04a8869"&gt;syn: rust parser&lt;/h4&gt;
&lt;div class="outline-text-4" id="text-org04a8869"&gt;
&lt;p&gt;
&lt;a href="https://crates.io/crates/syn"&gt;syn&lt;/a&gt; 是 rust 代码的 parser，可以将源码字符串 &lt;code&gt;TokenStream&lt;/code&gt; 转换成语法树 &lt;code&gt;syn::DeriveInput&lt;/code&gt; 。
&lt;/p&gt;
&lt;/div&gt;

&lt;ul class="org-ul"&gt;
&lt;li&gt;&lt;a id="orga29f2d4"&gt;&lt;/a&gt;&lt;code&gt;syn::DeriveInput&lt;/code&gt;&lt;br&gt;
&lt;div class="outline-text-5" id="text-orga29f2d4"&gt;
&lt;p&gt;
对于输入 &lt;code&gt;TokenStream&lt;/code&gt; 使用 &lt;code&gt;parse_macro_input!&lt;/code&gt; 将它解析为语法树 &lt;code&gt;DeriveInput&lt;/code&gt; ，之后就可以通过对语法树的操作生成新的语法树
&lt;/p&gt;
&lt;/div&gt;
&lt;/li&gt;

&lt;li&gt;&lt;a id="orgc25fad7"&gt;&lt;/a&gt;&lt;code&gt;syn::spanned::Spanned&lt;/code&gt;&lt;br&gt;
&lt;div class="outline-text-5" id="text-orgc25fad7"&gt;
&lt;p&gt;
对重复结构的操作，使用 &lt;code&gt;span()&lt;/code&gt; 配合 &lt;code&gt;quote::qoute_spanned!&lt;/code&gt; 实现
&lt;/p&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;

&lt;div id="outline-container-orgdec9f69" class="outline-4"&gt;
&lt;h4 id="orgdec9f69"&gt;quote: rust 代码模板&lt;/h4&gt;
&lt;div class="outline-text-4" id="text-orgdec9f69"&gt;
&lt;p&gt;
&lt;a href="https://crates.io/crates/quote"&gt;quote&lt;/a&gt; 的 &lt;code&gt;quote!&lt;/code&gt; 宏可以将 rust 语法数据结构变成 &lt;code&gt;TokenStream&lt;/code&gt;
&lt;/p&gt;

&lt;p&gt;
&lt;code&gt;qoute_spanned!&lt;/code&gt; 宏可以将重复结构中的一个元素单独操作。
&lt;/p&gt;

&lt;p&gt;
qoute 的宏类似于 &lt;code&gt;macro_rules!&lt;/code&gt; 只是把 &lt;code&gt;$&lt;/code&gt; 换成  &lt;code&gt;#&lt;/code&gt;
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/body&gt;
&lt;/html&gt;
</description><category>macro</category><category>rust</category><guid>https://chimez.github.io/posts/rust-macro/</guid><pubDate>Fri, 20 Aug 2021 05:32:43 GMT</pubDate></item><item><title>rust c ffi</title><link>https://chimez.github.io/posts/rust-c-ffi/</link><dc:creator>chimez</dc:creator><description>&lt;div id="outline-container-org565d44d" class="outline-2"&gt;
&lt;h2 id="org565d44d"&gt;Rust C FFI&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-org565d44d"&gt;
&lt;/div&gt;
&lt;div id="outline-container-org39b7e15" class="outline-3"&gt;
&lt;h3 id="org39b7e15"&gt;rust-bindgen: rust 调用 c&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-org39b7e15"&gt;
&lt;p&gt;
&lt;a href="https://github.com/rust-lang/rust-bindgen"&gt;rust-bindgen&lt;/a&gt; 是在编译时由头文件生成绑定代码的工具。由它封装的库称为 &lt;code&gt;xxx-sys&lt;/code&gt;
&lt;/p&gt;
&lt;/div&gt;

&lt;div id="outline-container-org9f1c57e" class="outline-4"&gt;
&lt;h4 id="org9f1c57e"&gt;常量宏&lt;/h4&gt;
&lt;div class="outline-text-4" id="text-org9f1c57e"&gt;
&lt;p&gt;
对于形如 &lt;code&gt;#define XX (int)0&lt;/code&gt; 这样的有类型转换的宏是不能自动生成绑定的，可以在 &lt;code&gt;wrapper.h&lt;/code&gt; 中写
&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;static&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;const&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;_XX&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;XX&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;
来创建绑定。
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-org8318d8b" class="outline-3"&gt;
&lt;h3 id="org8318d8b"&gt;libc: 系统库&lt;/h3&gt;
&lt;/div&gt;


&lt;div id="outline-container-orgf2f69a2" class="outline-3"&gt;
&lt;h3 id="orgf2f69a2"&gt;c 类型&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-orgf2f69a2"&gt;
&lt;p&gt;
一般的类型在 &lt;code&gt;std::os::raw&lt;/code&gt; 中，或者使用在 &lt;code&gt;libc&lt;/code&gt; 中的重新绑定。
&lt;/p&gt;
&lt;/div&gt;

&lt;div id="outline-container-org2d44e2a" class="outline-4"&gt;
&lt;h4 id="org2d44e2a"&gt;字符串&lt;/h4&gt;
&lt;div class="outline-text-4" id="text-org2d44e2a"&gt;
&lt;p&gt;
c 的字符串实际上是 &lt;code&gt;&amp;amp;[u8]&lt;/code&gt; 数组，可以用 &lt;code&gt;std::ffi::CString&lt;/code&gt; 和 &lt;code&gt;std::ffi::CStr&lt;/code&gt;, 其中 &lt;code&gt;CString&lt;/code&gt; 拥有所有权， &lt;code&gt;CStr&lt;/code&gt; 是借用。
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-org07d6fd8" class="outline-4"&gt;
&lt;h4 id="org07d6fd8"&gt;指针&lt;/h4&gt;
&lt;div class="outline-text-4" id="text-org07d6fd8"&gt;
&lt;p&gt;
c 的常量指针 &lt;code&gt;const int *&lt;/code&gt; 对应 &lt;code&gt;*const i32&lt;/code&gt;, 一般指针 &lt;code&gt;int *&lt;/code&gt; 对应 &lt;code&gt;*mut i32&lt;/code&gt;. 两级指针 &lt;code&gt;int **&lt;/code&gt; 对应 &lt;code&gt;*mut *mut int&lt;/code&gt; 以此类推。
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-orge2f5c39" class="outline-4"&gt;
&lt;h4 id="orge2f5c39"&gt;结构体&lt;/h4&gt;
&lt;div class="outline-text-4" id="text-orge2f5c39"&gt;
&lt;p&gt;
rust 中定义与 c 兼容的结构体的方法为
&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct MyStruct {
	pub a: ::std::os::raw::c_int,
    }
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-org739fb7c" class="outline-4"&gt;
&lt;h4 id="org739fb7c"&gt;&lt;code&gt;sizeof&lt;/code&gt;&lt;/h4&gt;
&lt;div class="outline-text-4" id="text-org739fb7c"&gt;
&lt;p&gt;
与 c 的 &lt;code&gt;sizeof&lt;/code&gt; 相同的是 &lt;code&gt;std::mem::sizeof&lt;/code&gt;
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-org3a631b2" class="outline-4"&gt;
&lt;h4 id="org3a631b2"&gt;&lt;code&gt;offsetof&lt;/code&gt;&lt;/h4&gt;
&lt;div class="outline-text-4" id="text-org3a631b2"&gt;
&lt;p&gt;
使用 &lt;a href="https://github.com/Gilnaa/memoffset"&gt;memoffset&lt;/a&gt; 的 &lt;code&gt;offset_of!&lt;/code&gt; 宏来获得。
&lt;/p&gt;

&lt;p&gt;
如果不希望结构体内存对齐，使用 &lt;code&gt;#[repr(packed)]&lt;/code&gt;
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-org436f60d" class="outline-3"&gt;
&lt;h3 id="org436f60d"&gt;问题解决&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-org436f60d"&gt;
&lt;/div&gt;
&lt;div id="outline-container-orgfb29b67" class="outline-4"&gt;
&lt;h4 id="orgfb29b67"&gt;传递 &lt;code&gt;argc, argv&lt;/code&gt;&lt;/h4&gt;
&lt;div class="outline-text-4" id="text-orgfb29b67"&gt;
&lt;p&gt;
参考 &lt;a href="https://stackoverflow.com/questions/34379641/how-do-i-convert-rust-args-into-the-argc-and-argv-c-equivalents"&gt;stackoverflow&lt;/a&gt;
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    extern crate libc;

    use libc::{c_char, c_int, c_void};
    use std::ffi::CString;

    extern "C" {
	fn foo(argc: *mut c_int, argv: *mut *mut *mut c_char);
    }

    fn main() {
	let mut c_args: Vec&amp;lt;*mut c_char&amp;gt; = std::env::args()
	    .map(|arg| CString::new(arg).unwrap().into_raw())
	    .collect();
	unsafe {
	    let mut c_argc: c_int = c_args.len() as c_int;
	    let mut c_argv: *mut *mut c_char = c_args.as_mut_ptr();

	    foo(&amp;amp;mut c_argc as *mut c_int, &amp;amp;mut c_argv);
	}
    }
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/body&gt;
&lt;/html&gt;
</description><category>rust</category><guid>https://chimez.github.io/posts/rust-c-ffi/</guid><pubDate>Thu, 19 Aug 2021 01:49:34 GMT</pubDate></item><item><title>reStructuredText</title><link>https://chimez.github.io/posts/restructuredtext/</link><dc:creator>chimez</dc:creator><description>&lt;div id="outline-container-orgaa268e1" class="outline-2"&gt;
&lt;h2 id="orgaa268e1"&gt;reStructuredText&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-orgaa268e1"&gt;
&lt;p&gt;
reST, 文件后缀 &lt;code&gt;*.rst&lt;/code&gt; 是类似 markdown 的标记语言，是 python 的 &lt;img src="https://chimez.github.io/sphinx-documentation-generator.org" alt="Sphinx"&gt; 默认语言。
&lt;/p&gt;
&lt;/div&gt;

&lt;div id="outline-container-orgc17302f" class="outline-3"&gt;
&lt;h3 id="orgc17302f"&gt;基本语法&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-orgc17302f"&gt;
&lt;/div&gt;
&lt;div id="outline-container-org6072715" class="outline-4"&gt;
&lt;h4 id="org6072715"&gt;段落&lt;/h4&gt;
&lt;div class="outline-text-4" id="text-org6072715"&gt;
&lt;p&gt;
与 python 类似，reST 中用缩进表示不同的层级。
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-orgf1d2bbb" class="outline-4"&gt;
&lt;h4 id="orgf1d2bbb"&gt;行内标记&lt;/h4&gt;
&lt;div class="outline-text-4" id="text-orgf1d2bbb"&gt;
&lt;pre class="example" id="org07dbc8e"&gt;
*something*               | 斜体
**something**             | 粗体
``code``                  | 行内代码
`title &amp;lt;http://to.link&amp;gt;`_ | 外部链接
`my link`_                | 分开的链接
.. _my link: http::/a.link
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-org31e0052" class="outline-4"&gt;
&lt;h4 id="org31e0052"&gt;列表&lt;/h4&gt;
&lt;div class="outline-text-4" id="text-org31e0052"&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    1. 编号列表
    2. 编号列表

    * 无编号列表
    * 无编号列表

    #. 还是编号列表
    #. 还是编号列表


    * 列表可以嵌套

      * 但是要空一行
      * 并且缩进
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-org029f582" class="outline-4"&gt;
&lt;h4 id="org029f582"&gt;引用块&lt;/h4&gt;
&lt;div class="outline-text-4" id="text-org029f582"&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    引用块，末尾用双冒号::

      空一行

      并且缩进

    空一行就结束
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-orgc64ee0e" class="outline-4"&gt;
&lt;h4 id="orgc64ee0e"&gt;表格&lt;/h4&gt;
&lt;div class="outline-text-4" id="text-orgc64ee0e"&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    完整的表格

    +------------------------+------------+----------+----------+
    | Header row, column 1   | Header 2   | Header 3 | Header 4 |
    | (header rows optional) |            |          |          |
    +========================+============+==========+==========+
    | body row 1, column 1   | column 2   | column 3 | column 4 |
    +------------------------+------------+----------+----------+
    | body row 2             | ...        | ...      |          |
    +------------------------+------------+----------+----------+

    简化的表格

    =====  =====  =======
    A      B      A and B
    =====  =====  =======
    False  False  False
    True   False  False
    False  True   False
    True   True   True
    =====  =====  =======
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-orgc2d1e4a" class="outline-4"&gt;
&lt;h4 id="orgc2d1e4a"&gt;标题&lt;/h4&gt;
&lt;div class="outline-text-4" id="text-orgc2d1e4a"&gt;
&lt;pre class="example" id="orgc3957d3"&gt;
# | parts
* | chapters
= | sections
- | subsections
^ | subsubsections
" | paragraphs
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-org4a359d6" class="outline-3"&gt;
&lt;h3 id="org4a359d6"&gt;指令&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-org4a359d6"&gt;
&lt;p&gt;
reST 支持很多指令，这里是常用的几个
&lt;/p&gt;
&lt;/div&gt;

&lt;ul class="org-ul"&gt;
&lt;li&gt;&lt;a id="org730c2b8"&gt;&lt;/a&gt;&lt;code&gt;image&lt;/code&gt; 图片&lt;br&gt;&lt;/li&gt;

&lt;li&gt;&lt;a id="org3b586d8"&gt;&lt;/a&gt;&lt;code&gt;[#footnote]_&lt;/code&gt; 脚注&lt;br&gt;&lt;/li&gt;

&lt;li&gt;&lt;a id="orga00e3d3"&gt;&lt;/a&gt;&lt;code&gt;..&lt;/code&gt; 注释&lt;br&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;

&lt;div id="outline-container-org49f54ba" class="outline-3"&gt;
&lt;h3 id="org49f54ba"&gt;角色&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-org49f54ba"&gt;
&lt;p&gt;
reST 使用 &lt;code&gt;:rolename:`content`&lt;/code&gt; 语法来做一些复杂的行内标记
&lt;/p&gt;
&lt;/div&gt;

&lt;div id="outline-container-org4947ec6" class="outline-4"&gt;
&lt;h4 id="org4947ec6"&gt;&lt;code&gt;:ref:&lt;/code&gt; 交叉引用&lt;/h4&gt;
&lt;/div&gt;

&lt;div id="outline-container-org5aef652" class="outline-4"&gt;
&lt;h4 id="org5aef652"&gt;&lt;code&gt;:math:&lt;/code&gt; 数学公式&lt;/h4&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/body&gt;
&lt;/html&gt;
</description><category>doc</category><category>python</category><category>rst</category><guid>https://chimez.github.io/posts/restructuredtext/</guid><pubDate>Mon, 16 Aug 2021 02:46:27 GMT</pubDate></item><item><title>Sphinx: Documentation Generator</title><link>https://chimez.github.io/posts/sphinx-documentation-generator/</link><dc:creator>chimez</dc:creator><description>&lt;div id="outline-container-orge0d58c7" class="outline-2"&gt;
&lt;h2 id="orge0d58c7"&gt;Sphinx: 文档生成&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-orge0d58c7"&gt;
&lt;p&gt;
&lt;a href="https://www.sphinx-doc.org/en/master/usage/quickstart.html"&gt;sphinx/getting started&lt;/a&gt;
&lt;/p&gt;
&lt;/div&gt;

&lt;div id="outline-container-org6b26e9a" class="outline-3"&gt;
&lt;h3 id="org6b26e9a"&gt;创建与配置项目&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-org6b26e9a"&gt;
&lt;/div&gt;
&lt;div id="outline-container-org5e10e3a" class="outline-4"&gt;
&lt;h4 id="org5e10e3a"&gt;&lt;code&gt;sphinx-quickstart&lt;/code&gt;&lt;/h4&gt;
&lt;div class="outline-text-4" id="text-org5e10e3a"&gt;
&lt;p&gt;
使用这个命令，快速创建项目。跟随指导做一些选项。
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-orga66c76f" class="outline-4"&gt;
&lt;h4 id="orga66c76f"&gt;生成文档&lt;/h4&gt;
&lt;div class="outline-text-4" id="text-orga66c76f"&gt;
&lt;p&gt;
使用命令 &lt;code&gt;sphinx-build -b html sourcedir builddir&lt;/code&gt; 或者 &lt;code&gt;make html&lt;/code&gt;
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-org87d9ec0" class="outline-4"&gt;
&lt;h4 id="org87d9ec0"&gt;基本配置&lt;/h4&gt;
&lt;div class="outline-text-4" id="text-org87d9ec0"&gt;
&lt;p&gt;
基本配置在 &lt;code&gt;conf.py&lt;/code&gt; 文件中。这个文件就是一个python 脚本，可以执行各种python函数和导入其它库等。
&lt;/p&gt;

&lt;p&gt;
配置参考&lt;a href="https://www.sphinx-doc.org/en/master/usage/configuration.html"&gt;configuration&lt;/a&gt;
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-org0d3cbde" class="outline-3"&gt;
&lt;h3 id="org0d3cbde"&gt;写文档&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-org0d3cbde"&gt;
&lt;/div&gt;
&lt;div id="outline-container-orge06840f" class="outline-4"&gt;
&lt;h4 id="orge06840f"&gt;文档结构&lt;/h4&gt;
&lt;div class="outline-text-4" id="text-orge06840f"&gt;
&lt;ol class="org-ol"&gt;
&lt;li&gt;&lt;code&gt;index.rst&lt;/code&gt; 文件是文档的欢迎页面，其中包括
&lt;ol class="org-ol"&gt;
&lt;li&gt;目录树 &lt;code&gt;toctree&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-orge94a54b" class="outline-4"&gt;
&lt;h4 id="orge94a54b"&gt;reStructuredText directives&lt;/h4&gt;
&lt;div class="outline-text-4" id="text-orge94a54b"&gt;
&lt;p&gt;
rst 指令的格式中包括
&lt;/p&gt;
&lt;ol class="org-ol"&gt;
&lt;li&gt;参数：在指令名后面的冒号之后，每个指令可以有若干个参数&lt;/li&gt;
&lt;li&gt;选项：在参数之后，选项的形式是 &lt;code&gt;名-值&lt;/code&gt; 的列表，一行一个&lt;/li&gt;
&lt;li&gt;内容：在参数之后空一行&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;

&lt;ul class="org-ul"&gt;
&lt;li&gt;&lt;a id="org9b627e0"&gt;&lt;/a&gt;&lt;code&gt;toctree&lt;/code&gt; 目录&lt;br&gt;
&lt;div class="outline-text-5" id="text-org9b627e0"&gt;
&lt;p&gt;
参考：&lt;a href="https://www.sphinx-doc.org/en/master/usage/restructuredtext/directives.html#toctree-directive"&gt;directives/toctree-directive&lt;/a&gt;
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;     .. toctree::
	:maxdepth: 2

	intro
	strings
	datatypes
	numeric
	(many more documents listed here)
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;

&lt;ul class="org-ul"&gt;
&lt;li&gt;&lt;a id="orgf8f6984"&gt;&lt;/a&gt;内容&lt;br&gt;
&lt;div class="outline-text-6" id="text-orgf8f6984"&gt;
&lt;p&gt;
内容中每一行就是要链接到的文件名, 可以用 &lt;code&gt;Net Title &amp;lt;filename&amp;gt;&lt;/code&gt; 重新指定显示的标题
&lt;/p&gt;
&lt;/div&gt;
&lt;/li&gt;

&lt;li&gt;&lt;a id="org4c6406b"&gt;&lt;/a&gt;选项&lt;br&gt;
&lt;div class="outline-text-6" id="text-org4c6406b"&gt;
&lt;table border="2" cellspacing="0" cellpadding="6" rules="groups" frame="hsides"&gt;


&lt;colgroup&gt;
&lt;col class="org-left"&gt;

&lt;col class="org-left"&gt;
&lt;/colgroup&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th scope="col" class="org-left"&gt;选项&lt;/th&gt;
&lt;th scope="col" class="org-left"&gt;作用&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class="org-left"&gt;&lt;code&gt;:numbered:&lt;/code&gt;&lt;/td&gt;
&lt;td class="org-left"&gt;给目录编号&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="org-left"&gt;&lt;code&gt;:caption: Table of Contents&lt;/code&gt;&lt;/td&gt;
&lt;td class="org-left"&gt;目录的标题&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="org-left"&gt;&lt;code&gt;:name: mastertoc&lt;/code&gt;&lt;/td&gt;
&lt;td class="org-left"&gt;设置 &lt;code&gt;ref&lt;/code&gt; 用的名字&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="org-left"&gt;&lt;code&gt;:titlesonly:&lt;/code&gt;&lt;/td&gt;
&lt;td class="org-left"&gt;只显示文件标题&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="org-left"&gt;&lt;code&gt;:glob:&lt;/code&gt;&lt;/td&gt;
&lt;td class="org-left"&gt;可以使用 &lt;code&gt;*&lt;/code&gt; 匹配很多文件&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="org-left"&gt;&lt;code&gt;:hidden:&lt;/code&gt;&lt;/td&gt;
&lt;td class="org-left"&gt;链接，但不显示&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="org-left"&gt;&lt;code&gt;:includehidden:&lt;/code&gt;&lt;/td&gt;
&lt;td class="org-left"&gt;只链接一级标题，隐藏其它的&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="org-left"&gt;&lt;code&gt;:maxdepth: 2&lt;/code&gt;&lt;/td&gt;
&lt;td class="org-left"&gt;目录层级深度&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;

&lt;div id="outline-container-org53fc496" class="outline-4"&gt;
&lt;h4 id="org53fc496"&gt;Domains&lt;/h4&gt;
&lt;div class="outline-text-4" id="text-org53fc496"&gt;
&lt;p&gt;
为了对应 python/c++ 中的名字空间，防止函数名冲突，要把函数的文档写在 domain 里。
&lt;/p&gt;

&lt;p&gt;
参考 &lt;a href="https://www.sphinx-doc.org/en/master/usage/restructuredtext/domains.html"&gt;domains&lt;/a&gt;
&lt;/p&gt;
&lt;/div&gt;

&lt;ul class="org-ul"&gt;
&lt;li&gt;&lt;a id="org6dbc23f"&gt;&lt;/a&gt;基本语法&lt;br&gt;
&lt;div class="outline-text-5" id="text-org6dbc23f"&gt;
&lt;p&gt;
可以一次生成两个函数
&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;     .. py:function:: spam(eggs)
		      ham(eggs)

	Spam or ham the foo.
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
如果一个函数很长，可以折行并加上 &lt;code&gt;:noindex:&lt;/code&gt;
&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;     .. py:function:: filterwarnings(action, message='', category=Warning, \
				     module='', lineno=0, append=False)
	:noindex:
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
默认的 domain 是 python，可以用 &lt;code&gt;.. default-domain:: name&lt;/code&gt; 修改
&lt;/p&gt;
&lt;/div&gt;
&lt;/li&gt;

&lt;li&gt;&lt;a id="org3e639cc"&gt;&lt;/a&gt;交叉引用&lt;br&gt;
&lt;div class="outline-text-5" id="text-org3e639cc"&gt;
&lt;p&gt;
基本语法是 &lt;code&gt;:role:`title &amp;lt;target&amp;gt;`&lt;/code&gt; 这会引用 &lt;code&gt;target&lt;/code&gt; 但显示的是 &lt;code&gt;title&lt;/code&gt;
&lt;/p&gt;
&lt;ol class="org-ol"&gt;
&lt;li&gt;前面加 &lt;code&gt;!&lt;/code&gt; 不生成引用&lt;/li&gt;
&lt;li&gt;前面加 波浪线 &lt;code&gt;\~&lt;/code&gt; 只会显示最后一个元素的引用 &lt;code&gt;:py:meth:`\~Queue.Queue.get`&lt;/code&gt; 只显示 &lt;code&gt;get&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a id="org98f1d5c"&gt;&lt;/a&gt;C++&lt;br&gt;
&lt;div class="outline-text-5" id="text-org98f1d5c"&gt;
&lt;p&gt;
参考 &lt;a href="https://www.sphinx-doc.org/en/master/usage/restructuredtext/domains.html#cpp-domain"&gt;domains/cpp-domain&lt;/a&gt;     
&lt;/p&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;


&lt;div id="outline-container-org19136e0" class="outline-3"&gt;
&lt;h3 id="org19136e0"&gt;Autodoc: 注释文档&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-org19136e0"&gt;
&lt;p&gt;
通过 autodoc 可以从源码的注释生成文档。需要在 &lt;code&gt;conf.py&lt;/code&gt; 的 &lt;code&gt;extensions&lt;/code&gt; 中加入 &lt;code&gt;'sphinx.ext.autodoc'&lt;/code&gt; . 之后就可以利用 &lt;code&gt;autofunction&lt;/code&gt; &lt;code&gt;automodule&lt;/code&gt; 等指令，将注释作为文档导入。
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;


&lt;div id="outline-container-orgd3f5562" class="outline-3"&gt;
&lt;h3 id="orgd3f5562"&gt;breathe&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-orgd3f5562"&gt;
&lt;p&gt;
&lt;a href="https://breathe.readthedocs.io/en/latest/index.html"&gt;breathe&lt;/a&gt; 是通过 doxygen 生成 c/c++ 的文档的工具
&lt;/p&gt;
&lt;/div&gt;

&lt;div id="outline-container-org6f21034" class="outline-4"&gt;
&lt;h4 id="org6f21034"&gt;基本使用&lt;/h4&gt;
&lt;div class="outline-text-4" id="text-org6f21034"&gt;
&lt;p&gt;
设置 &lt;code&gt;conf.py&lt;/code&gt;
&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    &lt;span class="n"&gt;breathe_projects_source&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
	&lt;span class="s2"&gt;"my_proj"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"../src"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;"oneheader.h"&lt;/span&gt;&lt;span class="p"&gt;]),&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="n"&gt;breathe_default_project&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"my_proj"&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
就可以在 &lt;code&gt;index.rst&lt;/code&gt; 中使用
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    .. autodoxygenfile:: oneheader.h
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/body&gt;
&lt;/html&gt;
</description><category>Documents</category><category>python</category><guid>https://chimez.github.io/posts/sphinx-documentation-generator/</guid><pubDate>Mon, 16 Aug 2021 02:00:41 GMT</pubDate></item><item><title>xxhash</title><link>https://chimez.github.io/posts/xxhash/</link><dc:creator>chimez</dc:creator><description>&lt;div id="outline-container-orgbc66ece" class="outline-2"&gt;
&lt;h2 id="orgbc66ece"&gt;xxHash: 快速的哈希函数&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-orgbc66ece"&gt;
&lt;p&gt;
&lt;a href="https://github.com/Cyan4973/xxHash"&gt;Cyan4973/xxHash&lt;/a&gt;
&lt;/p&gt;
&lt;/div&gt;

&lt;div id="outline-container-orge42c208" class="outline-3"&gt;
&lt;h3 id="orge42c208"&gt;安装&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-orge42c208"&gt;
&lt;p&gt;
meson 的 wrapDB 中有，所以只需要 &lt;code&gt;meson wrap install xxhash&lt;/code&gt;
&lt;/p&gt;

&lt;p&gt;
编译时使用 &lt;code&gt;XXH_INLINE_ALL&lt;/code&gt; 选项提高性能，对于 meson 来说需要写 &lt;code&gt;xxhash_dep = dependency('libxxhash', default_options: ['inline-all=true'])&lt;/code&gt;
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-orga8a7740" class="outline-3"&gt;
&lt;h3 id="orga8a7740"&gt;基本使用&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-orga8a7740"&gt;
&lt;p&gt;
最快的哈希函数是 &lt;code&gt;XXH3_64bits&lt;/code&gt;
&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="cp"&gt;#include&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="cpf"&gt;"xxhash.h"&lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;

&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="k"&gt;static&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kr"&gt;inline&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="n"&gt;XXH64_hash_t&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="nf"&gt;hash_func&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;       &lt;/span&gt;&lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;XXH3_64bits&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="k"&gt;sizeof&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;&lt;span class="w"&gt;	&lt;/span&gt;
&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/body&gt;
&lt;/html&gt;
</description><category>C</category><category>hash</category><guid>https://chimez.github.io/posts/xxhash/</guid><pubDate>Fri, 06 Aug 2021 16:30:25 GMT</pubDate></item><item><title>klib</title><link>https://chimez.github.io/posts/klib/</link><dc:creator>chimez</dc:creator><description>&lt;div id="outline-container-org7c16d48" class="outline-2"&gt;
&lt;h2 id="org7c16d48"&gt;klib: 轻量级 c 头文件库&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-org7c16d48"&gt;
&lt;p&gt;
&lt;a href="https://github.com/attractivechaos/klib"&gt;attractivechaos/klib&lt;/a&gt;
&lt;/p&gt;
&lt;/div&gt;

&lt;div id="outline-container-org913d879" class="outline-3"&gt;
&lt;h3 id="org913d879"&gt;khash.h&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-org913d879"&gt;
&lt;p&gt;
快速轻量的哈希表库
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="cp"&gt;#include&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="cpf"&gt;"khash.h"&lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;

&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="k"&gt;typedef&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;kh_myname_key_t&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="k"&gt;typedef&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;kh_myname_value_t&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="n"&gt;kh_int_t&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;
&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="nf"&gt;kh_myname_hash_func&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;kh_myname_key_t&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;       &lt;/span&gt;&lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;HASH&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;
&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="nf"&gt;kh_myname_hash_equal&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;kh_myname_key_t&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;key_1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;kh_myname_key_t&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;key_2&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;       &lt;/span&gt;&lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;key_1&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;key_2&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="n"&gt;KHASH_INIT&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;myname&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;kh_myname_key_t&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;kh_myname_value_t&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;kh_myname_hash_func&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;kh_myname_hash_equal&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;
&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="n"&gt;main&lt;/span&gt;&lt;span class="p"&gt;(){&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="w"&gt;       &lt;/span&gt;&lt;span class="n"&gt;khiter_t&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;k&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;	&lt;/span&gt;
&lt;span class="w"&gt;       &lt;/span&gt;&lt;span class="n"&gt;khash_t&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;myname&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;h&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;kh_init&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;myname&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="w"&gt;       &lt;/span&gt;&lt;span class="c1"&gt;// 存入数据&lt;/span&gt;
&lt;span class="w"&gt;       &lt;/span&gt;&lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;	   &lt;/span&gt;&lt;span class="n"&gt;kh_myname_key_t&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;calloc&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;sizeof&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;kh_myname_key_t&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;&lt;span class="w"&gt;			&lt;/span&gt;
&lt;span class="w"&gt;	   &lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="w"&gt;	   &lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;ret&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;	   &lt;/span&gt;&lt;span class="n"&gt;k&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;kh_put&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;myname&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;h&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;ret&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="w"&gt;			&lt;/span&gt;
&lt;span class="w"&gt;	   &lt;/span&gt;&lt;span class="n"&gt;kh_value&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;h&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;k&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;			&lt;/span&gt;
&lt;span class="w"&gt;       &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="w"&gt;       &lt;/span&gt;&lt;span class="c1"&gt;// 读取，修改，删除&lt;/span&gt;
&lt;span class="w"&gt;       &lt;/span&gt;&lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;	   &lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;	   &lt;/span&gt;&lt;span class="n"&gt;k&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;kh_get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;myname&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;h&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="w"&gt;			&lt;/span&gt;

&lt;span class="w"&gt;	   &lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="n"&gt;kh_exist&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;h&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;k&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;||&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;k&lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;kh_end&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;h&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;	       &lt;/span&gt;&lt;span class="n"&gt;printf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"not exits!&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;	   &lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;kh_value&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;h&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;k&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;!=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;			&lt;/span&gt;
&lt;span class="w"&gt;	       &lt;/span&gt;&lt;span class="n"&gt;printf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"wrong value!&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="w"&gt;	   &lt;/span&gt;&lt;span class="n"&gt;kh_del&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;myname&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;h&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;k&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="w"&gt;			&lt;/span&gt;
&lt;span class="w"&gt;	   &lt;/span&gt;&lt;span class="n"&gt;free&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;kh_key&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;h&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;k&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;&lt;span class="w"&gt;			&lt;/span&gt;
&lt;span class="w"&gt;       &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="w"&gt;       &lt;/span&gt;&lt;span class="n"&gt;kh_destroy&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;myname&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;h&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="w"&gt;	&lt;/span&gt;

&lt;span class="w"&gt;       &lt;/span&gt;&lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/body&gt;
&lt;/html&gt;
</description><category>C</category><category>khash</category><category>klib</category><guid>https://chimez.github.io/posts/klib/</guid><pubDate>Fri, 06 Aug 2021 16:19:52 GMT</pubDate></item></channel></rss>