<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="assets/xml/rss.xsl" media="all"?><rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>chimez's blog</title><link>https://chimez.github.io/</link><description>Blog of chimez</description><atom:link href="https://chimez.github.io/rss.xml" rel="self" type="application/rss+xml"></atom:link><language>en</language><copyright>Contents © 2021 &lt;a href="mailto:chimez@163.com"&gt;chimez&lt;/a&gt; </copyright><lastBuildDate>Fri, 01 Oct 2021 12:05:12 GMT</lastBuildDate><generator>Nikola (getnikola.com)</generator><docs>http://blogs.law.harvard.edu/tech/rss</docs><item><title>apache</title><link>https://chimez.github.io/posts/apache/</link><dc:creator>chimez</dc:creator><description>&lt;div id="outline-container-orga095cd3" class="outline-2"&gt;
&lt;h2 id="orga095cd3"&gt;Apache HTTP 服务器&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-orga095cd3"&gt;
&lt;/div&gt;
&lt;div id="outline-container-org6736beb" class="outline-3"&gt;
&lt;h3 id="org6736beb"&gt;配置文件&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-org6736beb"&gt;
&lt;p&gt;
参考： &lt;a href="https://httpd.apache.org/docs/current/configuring.html"&gt;apache-httpd/configuring&lt;/a&gt;
&lt;/p&gt;

&lt;p&gt;
配置文件叫做 &lt;code&gt;httpd.conf&lt;/code&gt; 在 debian 是 &lt;code&gt;/etc/apache2/apache.conf&lt;/code&gt;
&lt;/p&gt;
&lt;/div&gt;

&lt;div id="outline-container-orgc944caf" class="outline-4"&gt;
&lt;h4 id="orgc944caf"&gt;语法&lt;/h4&gt;
&lt;div class="outline-text-4" id="text-orgc944caf"&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;每行一个指令，反斜线可以折行&lt;/li&gt;
&lt;li&gt;指令大小写不敏感，但参数大小写敏感&lt;/li&gt;
&lt;li&gt;指令的参数用空格分隔&lt;/li&gt;
&lt;li&gt;指令之前的空格都忽略，所以可以任意缩进&lt;/li&gt;
&lt;li&gt;变量用 &lt;code&gt;Define&lt;/code&gt; 指令定义，用 &lt;code&gt;${VAR}&lt;/code&gt; 格式使用&lt;/li&gt;
&lt;li&gt;使用 &lt;code&gt;apachectl configtest&lt;/code&gt; 检查配置文件的语法错误&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;


&lt;div id="outline-container-org50fa4d9" class="outline-2"&gt;
&lt;h2 id="org50fa4d9"&gt;配置&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-org50fa4d9"&gt;
&lt;/div&gt;
&lt;div id="outline-container-orgfcd1800" class="outline-3"&gt;
&lt;h3 id="orgfcd1800"&gt;反向代理 jupyterlab&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-orgfcd1800"&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;需要的模块： &lt;code&gt;a2enmod ssl rewrite proxy proxy_http proxy_wstunnel&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;jupyterlab 需要配置
&lt;ul class="org-ul"&gt;
&lt;li&gt;&lt;code&gt;c.ServerApp.allow_origin = '*'&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;c.ServerApp.base_url = '/jupyterlab'&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;c.ServerApp.port = 11413&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;lt;Location "/jupyterlab/"&amp;gt;
    RewriteEngine On
    RewriteRule /jupyterlab/(.*) ws://127.0.0.1:11413/jupyterlab/$1 [P]
    RewriteRule /jupyterlab/(.*) http://127.0.0.1:11413/jupyterlab/$1 [P]

    ProxyPreserveHost on
    ProxyPass         http://127.0.0.1:11413/jupyterlab/
    ProxyPassReverse  http://127.0.0.1:11413/jupyterlab/
&amp;lt;/Location&amp;gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;</description><category>apache</category><category>php</category><category>web</category><guid>https://chimez.github.io/posts/apache/</guid><pubDate>Sat, 18 Sep 2021 02:45:41 GMT</pubDate></item><item><title>PBLAS &amp; ScaLAPACK &amp; BLACS</title><link>https://chimez.github.io/posts/pblas-scalapack/</link><dc:creator>chimez</dc:creator><description>&lt;div id="outline-container-orgdf76c0d" class="outline-2"&gt;
&lt;h2 id="orgdf76c0d"&gt;PBLAS &amp;amp; ScaLAPACK &amp;amp; BLACS&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-orgdf76c0d"&gt;
&lt;p&gt;
&lt;a href="https://www.netlib.org/scalapack/"&gt;ScaLAPACK&lt;/a&gt; 是基于 MPI 的并行版本 LAPACK, &lt;a href="https://www.netlib.org/scalapack/pblas_qref.html"&gt;PBLAS&lt;/a&gt; 则是并行版本的 BLAS. 其中 PBLAS 是嵌入到 ScaLAPACK 里的，这与 LAPACK 经常嵌入到 BLAS 里刚好反过来
&lt;/p&gt;
&lt;/div&gt;

&lt;div id="outline-container-org60d2c88" class="outline-3"&gt;
&lt;h3 id="org60d2c88"&gt;编译&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-org60d2c88"&gt;
&lt;ol class="org-ol"&gt;
&lt;li&gt;从 github 下载 &lt;a href="https://github.com/Reference-ScaLAPACK/scalapack/"&gt;https://github.com/Reference-ScaLAPACK/scalapack/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;修改 &lt;code&gt;SLmake.inc&lt;/code&gt; 文件中的 &lt;code&gt;FC&lt;/code&gt;, &lt;code&gt;CC&lt;/code&gt;, &lt;code&gt;BLASLIB&lt;/code&gt;, &lt;code&gt;LAPACKLIB&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;
示例
&lt;/p&gt;
&lt;pre class="example" id="org893a168"&gt;
FC            = /home/beacon/app/openmpi/bin/mpif90
CC            = /home/beacon/app/openmpi/bin/mpicc 
NOOPT         = -O0 -std=legacy
FCFLAGS       = -O3 -std=legacy
CCFLAGS       = -O3


BLASLIB       = -L/usr/lib/x86_64-linux-gnu/openblas-openmp/ -lblas
LAPACKLIB     = -L/usr/lib/x86_64-linux-gnu/openblas-openmp/ -llapack

&lt;/pre&gt;
&lt;/div&gt;

&lt;div id="outline-container-org99b568c" class="outline-4"&gt;
&lt;h4 id="org99b568c"&gt;GCC 10 不兼容&lt;/h4&gt;
&lt;div class="outline-text-4" id="text-org99b568c"&gt;
&lt;p&gt;
由于 GCC 10 根据最新的 fortran 标准，要求参数类型匹配，所以老代码不给通过，可以添加 &lt;code&gt;-fallow-argument-mismatch&lt;/code&gt; 或 &lt;code&gt;-std=legacy&lt;/code&gt; 来编译。
&lt;/p&gt;

&lt;p&gt;
参考 &lt;a href="https://gcc.gnu.org/gcc-10/porting_to.html"&gt;Porting to GCC 10&lt;/a&gt;
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-org759af95" class="outline-3"&gt;
&lt;h3 id="org759af95"&gt;BLACS&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-org759af95"&gt;
&lt;p&gt;
&lt;a href="https://www.netlib.org/blacs/index.html"&gt;BLACS&lt;/a&gt; 的目的是提供一组在分布内存系统上的线性代数的标准通信接口，主要是作为 ScaLAPACK 的通信层。
&lt;/p&gt;

&lt;p&gt;
除了 MPI 外, BLACS 还支持多种通信方案。当然现在 MPI 基本成为主流， 这部分作用已经意义不大了。
&lt;/p&gt;

&lt;p&gt;
&lt;a href="https://software.intel.com/content/www/us/en/develop/documentation/onemkl-developer-reference-c/top/blacs-routines.html"&gt;oneAPI/MKL/BLACS&lt;/a&gt;
&lt;/p&gt;
&lt;/div&gt;
&lt;div id="outline-container-org237a905" class="outline-4"&gt;
&lt;h4 id="org237a905"&gt;基本概念&lt;/h4&gt;
&lt;div class="outline-text-4" id="text-org237a905"&gt;
&lt;/div&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;&lt;a id="org28cdf2b"&gt;&lt;/a&gt;进程网格和范围操作&lt;br&gt;
&lt;div class="outline-text-5" id="text-org28cdf2b"&gt;
&lt;p&gt;
一个分布式机器上有 \(P\) 个进程，编号从 \(0\) 到 \(P-1\), 我们人为地将它们排列成 \(R\) 行 \(C\) 列的网格，用行列指标 \((i,j)\) 来表示其中一个进程。
&lt;/p&gt;

&lt;p&gt;
这样划分的好处在于线性代数操作时，二维数组被分散到 &lt;b&gt;进程网格&lt;/b&gt; (process grid)中，数据的行列与进程的行列有直接的对应，很适合编程。
&lt;/p&gt;

&lt;p&gt;
当进行的通信涉及两个以上的进程时，就将这种操作称作 &lt;b&gt;范围操作&lt;/b&gt; (scoped operations)。
基本的范围操作有
&lt;/p&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;行通信&lt;/li&gt;
&lt;li&gt;列通信&lt;/li&gt;
&lt;li&gt;全部通信&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/li&gt;

&lt;li&gt;&lt;a id="org51d57ca"&gt;&lt;/a&gt;上下文&lt;br&gt;
&lt;div class="outline-text-5" id="text-org51d57ca"&gt;
&lt;p&gt;
&lt;b&gt;上下文&lt;/b&gt; (context) 表示一个通信空间，每个进程网格都有自己的上下文，在同一个上下文内部的通信不会被其它上下文的覆盖。
&lt;/p&gt;

&lt;p&gt;
上下文的主要作用是可以将同一组进程标记成不同的进程网格，来方便进行通信操作。
&lt;/p&gt;

&lt;p&gt;
BLACS 中有关上下文的函数有
&lt;/p&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;&lt;code&gt;BLACS_GRIDINIT&lt;/code&gt;, &lt;code&gt;BLACS_GRIDMAP&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;BLACS_GRIDEXIT&lt;/code&gt;, &lt;code&gt;BLACS_EXIT&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/li&gt;

&lt;li&gt;&lt;a id="org7ac540c"&gt;&lt;/a&gt;基于数组的通信&lt;br&gt;
&lt;div class="outline-text-5" id="text-org7ac540c"&gt;
&lt;p&gt;
BLACS 中有两个基本的数据模型
&lt;/p&gt;
&lt;/div&gt;

&lt;ul class="org-ul"&gt;
&lt;li&gt;&lt;a id="org23084c0"&gt;&lt;/a&gt;矩形矩阵&lt;br&gt;
&lt;div class="outline-text-6" id="text-org23084c0"&gt;
&lt;p&gt;
一维向量是特殊的矩形矩阵。
&lt;/p&gt;

&lt;p&gt;
矩形矩阵是一个二维数组， &lt;code&gt;M&lt;/code&gt; 行 &lt;code&gt;N&lt;/code&gt; 列，主维数是 &lt;code&gt;LDA&lt;/code&gt;, 主维数就是相邻的两列数在内存中的间隔.
&lt;/p&gt;
&lt;/div&gt;
&lt;/li&gt;

&lt;li&gt;&lt;a id="org705ba74"&gt;&lt;/a&gt;梯形矩阵&lt;br&gt;
&lt;div class="outline-text-6" id="text-org705ba74"&gt;
&lt;p&gt;
三角矩阵和对角矩阵是特殊的梯形矩阵。
&lt;/p&gt;

&lt;p&gt;
梯形矩阵的最大底边是 &lt;code&gt;M,N&lt;/code&gt; 中最大的数，另一个是梯形的高，梯形的短底边是长底边和高的差。
&lt;/p&gt;

&lt;ul class="org-ul"&gt;
&lt;li&gt;&lt;code&gt;UPLO&lt;/code&gt;: 梯形矩阵， &lt;code&gt;'U','L'&lt;/code&gt; 上下梯形&lt;/li&gt;
&lt;li&gt;&lt;code&gt;DIAG&lt;/code&gt;: 单位对角矩阵&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;

&lt;li&gt;&lt;a id="org79fd737"&gt;&lt;/a&gt;无编号通信&lt;br&gt;
&lt;div class="outline-text-5" id="text-org79fd737"&gt;
&lt;p&gt;
BLACS 与其它通信层的区别之一是，BLACS不需要用户指定消息的编号 (例如 MPI 的 tag) ,因为编号的选择有时会导致编程的困难，所以 BLACS 通过一个特定的算法自动生成消息编号，用户可以用 &lt;code&gt;SHIFT_RANGE&lt;/code&gt; 来将 BLACS 的消息编号限制在一个范围里，来和用户自定义的消息编号隔离。
&lt;/p&gt;

&lt;p&gt;
BLACS 的通信保证
&lt;/p&gt;
&lt;ol class="org-ol"&gt;
&lt;li&gt;接收端知道消息的来源&lt;/li&gt;
&lt;li&gt;接收的顺序与发送的顺序一致&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;

&lt;div id="outline-container-orgaf4d2c8" class="outline-4"&gt;
&lt;h4 id="orgaf4d2c8"&gt;结构&lt;/h4&gt;
&lt;div class="outline-text-4" id="text-orgaf4d2c8"&gt;
&lt;p&gt;
BLACS 由 4 个部分构成
&lt;/p&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;点到点通信&lt;/li&gt;
&lt;li&gt;广播&lt;/li&gt;
&lt;li&gt;组合&lt;/li&gt;
&lt;li&gt;支持模块&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;
&lt;a href="https://www.netlib.org/blacs/BLACS/QRef.html"&gt;函数参考&lt;/a&gt;
&lt;/p&gt;
&lt;/div&gt;

&lt;ul class="org-ul"&gt;
&lt;li&gt;&lt;a id="orge6ebf62"&gt;&lt;/a&gt;命名规则&lt;br&gt;
&lt;div class="outline-text-5" id="text-orge6ebf62"&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;点到点通信与广播： &lt;code&gt;vXXYY2D&lt;/code&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;&lt;code&gt;v&lt;/code&gt; 表示数据类型&lt;/li&gt;
&lt;li&gt;&lt;code&gt;XX&lt;/code&gt; 表示矩阵的形状&lt;/li&gt;
&lt;li&gt;&lt;code&gt;YY&lt;/code&gt; 表示通信的类型&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;组合: &lt;code&gt;vGZZZ2D&lt;/code&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;&lt;code&gt;v&lt;/code&gt; 表示数据类型&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ZZZ&lt;/code&gt; 表示操作类型&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;支持模块: &lt;code&gt;BLACS_&amp;lt;name&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;table border="2" cellspacing="0" cellpadding="6" rules="groups" frame="hsides"&gt;


&lt;colgroup&gt;
&lt;col class="org-left"&gt;

&lt;col class="org-left"&gt;
&lt;/colgroup&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th scope="col" class="org-left"&gt;&lt;code&gt;v&lt;/code&gt;&lt;/th&gt;
&lt;th scope="col" class="org-left"&gt;意义&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class="org-left"&gt;&lt;code&gt;I&lt;/code&gt;&lt;/td&gt;
&lt;td class="org-left"&gt;整数&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="org-left"&gt;&lt;code&gt;S&lt;/code&gt;&lt;/td&gt;
&lt;td class="org-left"&gt;单精度&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="org-left"&gt;&lt;code&gt;D&lt;/code&gt;&lt;/td&gt;
&lt;td class="org-left"&gt;双精度&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="org-left"&gt;&lt;code&gt;C&lt;/code&gt;&lt;/td&gt;
&lt;td class="org-left"&gt;单精度复数&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="org-left"&gt;&lt;code&gt;Z&lt;/code&gt;&lt;/td&gt;
&lt;td class="org-left"&gt;双精度复数&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;


&lt;table border="2" cellspacing="0" cellpadding="6" rules="groups" frame="hsides"&gt;


&lt;colgroup&gt;
&lt;col class="org-left"&gt;

&lt;col class="org-left"&gt;
&lt;/colgroup&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th scope="col" class="org-left"&gt;&lt;code&gt;XX&lt;/code&gt;&lt;/th&gt;
&lt;th scope="col" class="org-left"&gt;意义&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class="org-left"&gt;&lt;code&gt;GE&lt;/code&gt;&lt;/td&gt;
&lt;td class="org-left"&gt;矩形矩阵&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="org-left"&gt;&lt;code&gt;TR&lt;/code&gt;&lt;/td&gt;
&lt;td class="org-left"&gt;梯形矩阵&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;


&lt;table border="2" cellspacing="0" cellpadding="6" rules="groups" frame="hsides"&gt;


&lt;colgroup&gt;
&lt;col class="org-left"&gt;

&lt;col class="org-left"&gt;
&lt;/colgroup&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th scope="col" class="org-left"&gt;&lt;code&gt;YY&lt;/code&gt;&lt;/th&gt;
&lt;th scope="col" class="org-left"&gt;意义&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class="org-left"&gt;&lt;code&gt;SD&lt;/code&gt;&lt;/td&gt;
&lt;td class="org-left"&gt;点到点发送&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="org-left"&gt;&lt;code&gt;RV&lt;/code&gt;&lt;/td&gt;
&lt;td class="org-left"&gt;点到点接收&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="org-left"&gt;&lt;code&gt;BS&lt;/code&gt;&lt;/td&gt;
&lt;td class="org-left"&gt;广播发送&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="org-left"&gt;&lt;code&gt;BR&lt;/code&gt;&lt;/td&gt;
&lt;td class="org-left"&gt;广播接收&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;


&lt;table border="2" cellspacing="0" cellpadding="6" rules="groups" frame="hsides"&gt;


&lt;colgroup&gt;
&lt;col class="org-left"&gt;

&lt;col class="org-left"&gt;
&lt;/colgroup&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th scope="col" class="org-left"&gt;&lt;code&gt;ZZZ&lt;/code&gt;&lt;/th&gt;
&lt;th scope="col" class="org-left"&gt;意义&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class="org-left"&gt;&lt;code&gt;AMX&lt;/code&gt;&lt;/td&gt;
&lt;td class="org-left"&gt;最大绝对值&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="org-left"&gt;&lt;code&gt;AMN&lt;/code&gt;&lt;/td&gt;
&lt;td class="org-left"&gt;最小绝对值&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="org-left"&gt;&lt;code&gt;SUM&lt;/code&gt;&lt;/td&gt;
&lt;td class="org-left"&gt;求和&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-org4a3c5bc" class="outline-3"&gt;
&lt;h3 id="org4a3c5bc"&gt;PBLAS&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-org4a3c5bc"&gt;
&lt;p&gt;
&lt;a href="https://www.netlib.org/scalapack/pblas_qref.html"&gt;PBLAS&lt;/a&gt; 的函数类似 BLAS, 由于是作为 ScaLAPACK 的一部分分发的，所以不提供统一的 &lt;code&gt;.h&lt;/code&gt; 头文件，得自己写。
&lt;/p&gt;

&lt;p&gt;
&lt;a href="https://software.intel.com/content/www/us/en/develop/documentation/onemkl-developer-reference-c/top/pblas-routines.html"&gt;oneAPI/MKL/PBLAS&lt;/a&gt;
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-org37fe793" class="outline-3"&gt;
&lt;h3 id="org37fe793"&gt;ScaLAPACK&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-org37fe793"&gt;
&lt;/div&gt;
&lt;div id="outline-container-orgb284b2f" class="outline-4"&gt;
&lt;h4 id="orgb284b2f"&gt;基本方法&lt;/h4&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;</description><category>BLACS</category><category>BLAS</category><category>C</category><category>LAPACK</category><category>MPI</category><category>PBLAS</category><category>ScaLAPACK</category><guid>https://chimez.github.io/posts/pblas-scalapack/</guid><pubDate>Tue, 24 Aug 2021 04:31:22 GMT</pubDate></item><item><title>Rust macro</title><link>https://chimez.github.io/posts/rust-macro/</link><dc:creator>chimez</dc:creator><description>&lt;div id="outline-container-org5111f26" class="outline-2"&gt;
&lt;h2 id="org5111f26"&gt;Rust 宏&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-org5111f26"&gt;
&lt;p&gt;
Rust 的宏分为两类，一种是声明宏 &lt;code&gt;macro_rules!&lt;/code&gt; ,另一种是过程宏 &lt;code&gt;#[...]&lt;/code&gt; .
&lt;/p&gt;
&lt;/div&gt;


&lt;div id="outline-container-orgb6bfc2f" class="outline-3"&gt;
&lt;h3 id="orgb6bfc2f"&gt;声明宏 &lt;code&gt;macro_rules!&lt;/code&gt;&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-orgb6bfc2f"&gt;
&lt;p&gt;
声明宏是 Rust 中最常用的宏，通过对源码的模式匹配来实现功能。
&lt;/p&gt;
&lt;/div&gt;

&lt;div id="outline-container-orgd60bd2a" class="outline-4"&gt;
&lt;h4 id="orgd60bd2a"&gt;语法&lt;/h4&gt;
&lt;div class="outline-text-4" id="text-orgd60bd2a"&gt;
&lt;p&gt;
参考： &lt;a href="https://doc.rust-lang.org/reference/macros-by-example.html"&gt;reference/macro&lt;/a&gt;
&lt;/p&gt;

&lt;ul class="org-ul"&gt;
&lt;li&gt;&lt;code&gt;#[macro_export]&lt;/code&gt; 导出宏&lt;/li&gt;
&lt;li&gt;&lt;code&gt;$x:expr&lt;/code&gt; 表明模式匹配一个 &lt;code&gt;expr&lt;/code&gt; 类型的源码块，并用 &lt;code&gt;$x&lt;/code&gt; 表示它&lt;/li&gt;
&lt;li&gt;&lt;code&gt;$( ... ),*$&lt;/code&gt; 表明匹配括号中的内容 0 次或多次，每个重复的内容直接由 &lt;code&gt;,&lt;/code&gt; 分隔&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-orgf502251" class="outline-4"&gt;
&lt;h4 id="orgf502251"&gt;例子： &lt;code&gt;vec!&lt;/code&gt;&lt;/h4&gt;
&lt;div class="outline-text-4" id="text-orgf502251"&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    #[macro_export]
    macro_rules! vec {
	( $( $x:expr ),* ) =&amp;gt; {
	    {
		let mut temp_vec = Vec::new();
		$(
		    temp_vec.push($x);
		)*
		    temp_vec
	    }
	};
    }
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;


&lt;div id="outline-container-org1408a05" class="outline-3"&gt;
&lt;h3 id="org1408a05"&gt;过程宏&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-org1408a05"&gt;
&lt;p&gt;
过程宏是一个函数，不过它的输入输出类型是词法对象 &lt;code&gt;TokenStream&lt;/code&gt; ，由编译器在编译前调用。
&lt;/p&gt;
&lt;/div&gt;

&lt;div id="outline-container-org25266e4" class="outline-4"&gt;
&lt;h4 id="org25266e4"&gt;crate&lt;/h4&gt;
&lt;div class="outline-text-4" id="text-org25266e4"&gt;
&lt;p&gt;
由于技术限制，目前过程宏必须分离在一个单独的 crate 中, 这个 crate 是 &lt;code&gt;proc-macro&lt;/code&gt; 类型的
&lt;/p&gt;


&lt;p&gt;
&lt;code&gt;Cargo.toml&lt;/code&gt;
&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    [lib]
    proc-macro = true
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-org95e3a2f" class="outline-4"&gt;
&lt;h4 id="org95e3a2f"&gt;&lt;code&gt;derive&lt;/code&gt; 宏&lt;/h4&gt;
&lt;div class="outline-text-4" id="text-org95e3a2f"&gt;
&lt;p&gt;
&lt;code&gt;derive&lt;/code&gt; 宏用来为结构体等创建默认的 trait 实现。
&lt;/p&gt;

&lt;p&gt;
下面的例子创建一个 &lt;code&gt;HelloMacro&lt;/code&gt; trait 的默认实现宏。
&lt;/p&gt;
&lt;/div&gt;

&lt;ul class="org-ul"&gt;
&lt;li&gt;&lt;a id="org3d6e5c9"&gt;&lt;/a&gt;使用&lt;br&gt;
&lt;div class="outline-text-5" id="text-org3d6e5c9"&gt;
&lt;p&gt;
下面的例子展示了为 &lt;code&gt;struct Pancakes&lt;/code&gt; 创建 trait &lt;code&gt;HelloMacro&lt;/code&gt; 的默认实现的方法，这个 trait 中只有一个函数 &lt;code&gt;hello_macro()&lt;/code&gt;
&lt;/p&gt;

&lt;p&gt;
&lt;code&gt;src/main.rs&lt;/code&gt;
&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;     use hello_macro::HelloMacro;
     use hello_macro_derive::HelloMacro;

     #[derive(HelloMacro)]
     struct Pancakes;

     fn main() {
	 Pancakes::hello_macro();
     }
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;

&lt;li&gt;&lt;a id="org82f5375"&gt;&lt;/a&gt;trait 定义&lt;br&gt;
&lt;div class="outline-text-5" id="text-org82f5375"&gt;
&lt;p&gt;
&lt;code&gt;hello_macro/src/lib.rs&lt;/code&gt;
&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;     pub trait HelloMacro {
	 fn hello_macro();
     }
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;

&lt;li&gt;&lt;a id="orgfe3d781"&gt;&lt;/a&gt;宏定义&lt;br&gt;
&lt;div class="outline-text-5" id="text-orgfe3d781"&gt;
&lt;p&gt;
&lt;code&gt;hello_macro_derive/Cargo.toml&lt;/code&gt;
&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;     [lib]
     proc-macro = true

     [dependencies]
     syn = "1.0"
     quote = "1.0"
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
&lt;code&gt;hello_macro_derive/src/lib.rs&lt;/code&gt;
&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;     extern crate proc_macro;

     use proc_macro::TokenStream;
     use quote::quote;
     use syn;

     #[proc_macro_derive(HelloMacro)]
     pub fn hello_macro_derive(input: TokenStream) -&amp;gt; TokenStream {
	 // Construct a representation of Rust code as a syntax tree
	 // that we can manipulate
	 let ast = syn::parse(input).unwrap();

	 // Build the trait implementation
	 impl_hello_macro(&amp;amp;ast)
     }

     fn impl_hello_macro(ast: &amp;amp;syn::DeriveInput) -&amp;gt; TokenStream {
	 let name = &amp;amp;ast.ident;
	 let gen = quote! {
	     impl HelloMacro for #name {
		 fn hello_macro() {
		     println!("Hello, Macro! My name is {}!", stringify!(#name));
		 }
	     }
	 };
	 gen.into()
     }
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;

&lt;div id="outline-container-org88a67b9" class="outline-4"&gt;
&lt;h4 id="org88a67b9"&gt;&lt;code&gt;Attribute-like&lt;/code&gt; 宏&lt;/h4&gt;
&lt;div class="outline-text-4" id="text-org88a67b9"&gt;
&lt;p&gt;
属性宏可以创建新的属性, 与 &lt;code&gt;derive&lt;/code&gt; 宏的区别在于参数多了一个属性 &lt;code&gt;attr&lt;/code&gt;, 也就是括号里面的部分，另一个参数 &lt;code&gt;item&lt;/code&gt; 就是与 &lt;code&gt;derive&lt;/code&gt; 宏一样的内容了。
&lt;/p&gt;
&lt;/div&gt;

&lt;ul class="org-ul"&gt;
&lt;li&gt;&lt;a id="orgdeb78d0"&gt;&lt;/a&gt;用法&lt;br&gt;
&lt;div class="outline-text-5" id="text-orgdeb78d0"&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;     #[route(GET, "/")]
     fn index() { ... }
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;

&lt;li&gt;&lt;a id="org0890c8e"&gt;&lt;/a&gt;宏定义&lt;br&gt;
&lt;div class="outline-text-5" id="text-org0890c8e"&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;     #[proc_macro_attribute]
     pub fn route(attr: TokenStream, item: TokenStream) -&amp;gt; TokenStream { ... }
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;

&lt;div id="outline-container-orgbdfa294" class="outline-4"&gt;
&lt;h4 id="orgbdfa294"&gt;&lt;code&gt;Function-like&lt;/code&gt; 宏&lt;/h4&gt;
&lt;div class="outline-text-4" id="text-orgbdfa294"&gt;
&lt;p&gt;
函数宏可以定义像函数一样调用的宏。可以用来定义 DSL
&lt;/p&gt;
&lt;/div&gt;

&lt;ul class="org-ul"&gt;
&lt;li&gt;&lt;a id="orga97085e"&gt;&lt;/a&gt;用法&lt;br&gt;
&lt;div class="outline-text-5" id="text-orga97085e"&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;     let sql = sql!(SELECT * FROM posts WHERE id=1);
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;

&lt;li&gt;&lt;a id="org015724b"&gt;&lt;/a&gt;宏定义&lt;br&gt;
&lt;div class="outline-text-5" id="text-org015724b"&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;     #[proc_macro]
     pub fn sql(input: TokenStream) -&amp;gt; TokenStream { ... }
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;

&lt;div id="outline-container-org27fe838" class="outline-4"&gt;
&lt;h4 id="org27fe838"&gt;syn: rust parser&lt;/h4&gt;
&lt;div class="outline-text-4" id="text-org27fe838"&gt;
&lt;p&gt;
&lt;a href="https://crates.io/crates/syn"&gt;syn&lt;/a&gt; 是 rust 代码的 parser，可以将源码字符串 &lt;code&gt;TokenStream&lt;/code&gt; 转换成语法树 &lt;code&gt;syn::DeriveInput&lt;/code&gt; 。
&lt;/p&gt;
&lt;/div&gt;

&lt;ul class="org-ul"&gt;
&lt;li&gt;&lt;a id="org757dae8"&gt;&lt;/a&gt;&lt;code&gt;syn::DeriveInput&lt;/code&gt;&lt;br&gt;
&lt;div class="outline-text-5" id="text-org757dae8"&gt;
&lt;p&gt;
对于输入 &lt;code&gt;TokenStream&lt;/code&gt; 使用 &lt;code&gt;parse_macro_input!&lt;/code&gt; 将它解析为语法树 &lt;code&gt;DeriveInput&lt;/code&gt; ，之后就可以通过对语法树的操作生成新的语法树
&lt;/p&gt;
&lt;/div&gt;
&lt;/li&gt;

&lt;li&gt;&lt;a id="org8916604"&gt;&lt;/a&gt;&lt;code&gt;syn::spanned::Spanned&lt;/code&gt;&lt;br&gt;
&lt;div class="outline-text-5" id="text-org8916604"&gt;
&lt;p&gt;
对重复结构的操作，使用 &lt;code&gt;span()&lt;/code&gt; 配合 &lt;code&gt;quote::qoute_spanned!&lt;/code&gt; 实现
&lt;/p&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;

&lt;div id="outline-container-orgb1bb3a8" class="outline-4"&gt;
&lt;h4 id="orgb1bb3a8"&gt;quote: rust 代码模板&lt;/h4&gt;
&lt;div class="outline-text-4" id="text-orgb1bb3a8"&gt;
&lt;p&gt;
&lt;a href="https://crates.io/crates/quote"&gt;quote&lt;/a&gt; 的 &lt;code&gt;quote!&lt;/code&gt; 宏可以将 rust 语法数据结构变成 &lt;code&gt;TokenStream&lt;/code&gt;
&lt;/p&gt;

&lt;p&gt;
&lt;code&gt;qoute_spanned!&lt;/code&gt; 宏可以将重复结构中的一个元素单独操作。
&lt;/p&gt;

&lt;p&gt;
qoute 的宏类似于 &lt;code&gt;macro_rules!&lt;/code&gt; 只是把 &lt;code&gt;$&lt;/code&gt; 换成  &lt;code&gt;#&lt;/code&gt;
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;</description><category>macro</category><category>rust</category><guid>https://chimez.github.io/posts/rust-macro/</guid><pubDate>Fri, 20 Aug 2021 05:32:43 GMT</pubDate></item><item><title>rust c ffi</title><link>https://chimez.github.io/posts/rust-c-ffi/</link><dc:creator>chimez</dc:creator><description>&lt;div id="outline-container-orgbf6c089" class="outline-2"&gt;
&lt;h2 id="orgbf6c089"&gt;Rust C FFI&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-orgbf6c089"&gt;
&lt;/div&gt;
&lt;div id="outline-container-org5df6cb7" class="outline-3"&gt;
&lt;h3 id="org5df6cb7"&gt;rust-bindgen: rust 调用 c&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-org5df6cb7"&gt;
&lt;p&gt;
&lt;a href="https://github.com/rust-lang/rust-bindgen"&gt;rust-bindgen&lt;/a&gt; 是在编译时由头文件生成绑定代码的工具。由它封装的库称为 &lt;code&gt;xxx-sys&lt;/code&gt;
&lt;/p&gt;
&lt;/div&gt;

&lt;div id="outline-container-org4189f9f" class="outline-4"&gt;
&lt;h4 id="org4189f9f"&gt;常量宏&lt;/h4&gt;
&lt;div class="outline-text-4" id="text-org4189f9f"&gt;
&lt;p&gt;
对于形如 &lt;code&gt;#define XX (int)0&lt;/code&gt; 这样的有类型转换的宏是不能自动生成绑定的，可以在 &lt;code&gt;wrapper.h&lt;/code&gt; 中写
&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;static&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;const&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;_XX&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;XX&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;
来创建绑定。
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-orge389887" class="outline-3"&gt;
&lt;h3 id="orge389887"&gt;libc: 系统库&lt;/h3&gt;
&lt;/div&gt;


&lt;div id="outline-container-org69745cd" class="outline-3"&gt;
&lt;h3 id="org69745cd"&gt;c 类型&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-org69745cd"&gt;
&lt;p&gt;
一般的类型在 &lt;code&gt;std::os::raw&lt;/code&gt; 中，或者使用在 &lt;code&gt;libc&lt;/code&gt; 中的重新绑定。
&lt;/p&gt;
&lt;/div&gt;

&lt;div id="outline-container-org3894e91" class="outline-4"&gt;
&lt;h4 id="org3894e91"&gt;字符串&lt;/h4&gt;
&lt;div class="outline-text-4" id="text-org3894e91"&gt;
&lt;p&gt;
c 的字符串实际上是 &lt;code&gt;&amp;amp;[u8]&lt;/code&gt; 数组，可以用 &lt;code&gt;std::ffi::CString&lt;/code&gt; 和 &lt;code&gt;std::ffi::CStr&lt;/code&gt;, 其中 &lt;code&gt;CString&lt;/code&gt; 拥有所有权， &lt;code&gt;CStr&lt;/code&gt; 是借用。
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-org26fa59e" class="outline-4"&gt;
&lt;h4 id="org26fa59e"&gt;指针&lt;/h4&gt;
&lt;div class="outline-text-4" id="text-org26fa59e"&gt;
&lt;p&gt;
c 的常量指针 &lt;code&gt;const int *&lt;/code&gt; 对应 &lt;code&gt;*const i32&lt;/code&gt;, 一般指针 &lt;code&gt;int *&lt;/code&gt; 对应 &lt;code&gt;*mut i32&lt;/code&gt;. 两级指针 &lt;code&gt;int **&lt;/code&gt; 对应 &lt;code&gt;*mut *mut int&lt;/code&gt; 以此类推。
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-org7cea096" class="outline-4"&gt;
&lt;h4 id="org7cea096"&gt;结构体&lt;/h4&gt;
&lt;div class="outline-text-4" id="text-org7cea096"&gt;
&lt;p&gt;
rust 中定义与 c 兼容的结构体的方法为
&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct MyStruct {
	pub a: ::std::os::raw::c_int,
    }
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-org64178af" class="outline-4"&gt;
&lt;h4 id="org64178af"&gt;&lt;code&gt;sizeof&lt;/code&gt;&lt;/h4&gt;
&lt;div class="outline-text-4" id="text-org64178af"&gt;
&lt;p&gt;
与 c 的 &lt;code&gt;sizeof&lt;/code&gt; 相同的是 &lt;code&gt;std::mem::sizeof&lt;/code&gt;
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-org30662f9" class="outline-4"&gt;
&lt;h4 id="org30662f9"&gt;&lt;code&gt;offsetof&lt;/code&gt;&lt;/h4&gt;
&lt;div class="outline-text-4" id="text-org30662f9"&gt;
&lt;p&gt;
使用 &lt;a href="https://github.com/Gilnaa/memoffset"&gt;memoffset&lt;/a&gt; 的 &lt;code&gt;offset_of!&lt;/code&gt; 宏来获得。
&lt;/p&gt;

&lt;p&gt;
如果不希望结构体内存对齐，使用 &lt;code&gt;#[repr(packed)]&lt;/code&gt;
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-orgbfa7b39" class="outline-3"&gt;
&lt;h3 id="orgbfa7b39"&gt;问题解决&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-orgbfa7b39"&gt;
&lt;/div&gt;
&lt;div id="outline-container-org5b88e20" class="outline-4"&gt;
&lt;h4 id="org5b88e20"&gt;传递 &lt;code&gt;argc, argv&lt;/code&gt;&lt;/h4&gt;
&lt;div class="outline-text-4" id="text-org5b88e20"&gt;
&lt;p&gt;
参考 &lt;a href="https://stackoverflow.com/questions/34379641/how-do-i-convert-rust-args-into-the-argc-and-argv-c-equivalents"&gt;stackoverflow&lt;/a&gt;
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    extern crate libc;

    use libc::{c_char, c_int, c_void};
    use std::ffi::CString;

    extern "C" {
	fn foo(argc: *mut c_int, argv: *mut *mut *mut c_char);
    }

    fn main() {
	let mut c_args: Vec&amp;lt;*mut c_char&amp;gt; = std::env::args()
	    .map(|arg| CString::new(arg).unwrap().into_raw())
	    .collect();
	unsafe {
	    let mut c_argc: c_int = c_args.len() as c_int;
	    let mut c_argv: *mut *mut c_char = c_args.as_mut_ptr();

	    foo(&amp;amp;mut c_argc as *mut c_int, &amp;amp;mut c_argv);
	}
    }
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;</description><category>rust</category><guid>https://chimez.github.io/posts/rust-c-ffi/</guid><pubDate>Thu, 19 Aug 2021 01:49:34 GMT</pubDate></item><item><title>reStructuredText</title><link>https://chimez.github.io/posts/restructuredtext/</link><dc:creator>chimez</dc:creator><description>&lt;div id="outline-container-org99c62b4" class="outline-2"&gt;
&lt;h2 id="org99c62b4"&gt;reStructuredText&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-org99c62b4"&gt;
&lt;p&gt;
reST, 文件后缀 &lt;code&gt;*.rst&lt;/code&gt; 是类似 markdown 的标记语言，是 python 的 &lt;img src="https://chimez.github.io/sphinx-documentation-generator.org" alt="Sphinx"&gt; 默认语言。
&lt;/p&gt;
&lt;/div&gt;

&lt;div id="outline-container-org4f960f1" class="outline-3"&gt;
&lt;h3 id="org4f960f1"&gt;基本语法&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-org4f960f1"&gt;
&lt;/div&gt;
&lt;div id="outline-container-org4a20ebd" class="outline-4"&gt;
&lt;h4 id="org4a20ebd"&gt;段落&lt;/h4&gt;
&lt;div class="outline-text-4" id="text-org4a20ebd"&gt;
&lt;p&gt;
与 python 类似，reST 中用缩进表示不同的层级。
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-org77148fe" class="outline-4"&gt;
&lt;h4 id="org77148fe"&gt;行内标记&lt;/h4&gt;
&lt;div class="outline-text-4" id="text-org77148fe"&gt;
&lt;pre class="example" id="org21c8c75"&gt;
*something*               | 斜体
**something**             | 粗体
``code``                  | 行内代码
`title &amp;lt;http://to.link&amp;gt;`_ | 外部链接
`my link`_                | 分开的链接
.. _my link: http::/a.link
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-orgdcb9a89" class="outline-4"&gt;
&lt;h4 id="orgdcb9a89"&gt;列表&lt;/h4&gt;
&lt;div class="outline-text-4" id="text-orgdcb9a89"&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    1. 编号列表
    2. 编号列表

    * 无编号列表
    * 无编号列表

    #. 还是编号列表
    #. 还是编号列表


    * 列表可以嵌套

      * 但是要空一行
      * 并且缩进
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-org470b512" class="outline-4"&gt;
&lt;h4 id="org470b512"&gt;引用块&lt;/h4&gt;
&lt;div class="outline-text-4" id="text-org470b512"&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    引用块，末尾用双冒号::

      空一行

      并且缩进

    空一行就结束
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-org890e08f" class="outline-4"&gt;
&lt;h4 id="org890e08f"&gt;表格&lt;/h4&gt;
&lt;div class="outline-text-4" id="text-org890e08f"&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    完整的表格

    +------------------------+------------+----------+----------+
    | Header row, column 1   | Header 2   | Header 3 | Header 4 |
    | (header rows optional) |            |          |          |
    +========================+============+==========+==========+
    | body row 1, column 1   | column 2   | column 3 | column 4 |
    +------------------------+------------+----------+----------+
    | body row 2             | ...        | ...      |          |
    +------------------------+------------+----------+----------+

    简化的表格

    =====  =====  =======
    A      B      A and B
    =====  =====  =======
    False  False  False
    True   False  False
    False  True   False
    True   True   True
    =====  =====  =======
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-org2033fdc" class="outline-4"&gt;
&lt;h4 id="org2033fdc"&gt;标题&lt;/h4&gt;
&lt;div class="outline-text-4" id="text-org2033fdc"&gt;
&lt;pre class="example" id="orga172b79"&gt;
# | parts
* | chapters
= | sections
- | subsections
^ | subsubsections
" | paragraphs
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-org26395e8" class="outline-3"&gt;
&lt;h3 id="org26395e8"&gt;指令&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-org26395e8"&gt;
&lt;p&gt;
reST 支持很多指令，这里是常用的几个
&lt;/p&gt;
&lt;/div&gt;

&lt;ul class="org-ul"&gt;
&lt;li&gt;&lt;a id="org8e9f35d"&gt;&lt;/a&gt;&lt;code&gt;image&lt;/code&gt; 图片&lt;br&gt;&lt;/li&gt;

&lt;li&gt;&lt;a id="org8d28757"&gt;&lt;/a&gt;&lt;code&gt;[#footnote]_&lt;/code&gt; 脚注&lt;br&gt;&lt;/li&gt;

&lt;li&gt;&lt;a id="org68f7998"&gt;&lt;/a&gt;&lt;code&gt;..&lt;/code&gt; 注释&lt;br&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;

&lt;div id="outline-container-org6675291" class="outline-3"&gt;
&lt;h3 id="org6675291"&gt;角色&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-org6675291"&gt;
&lt;p&gt;
reST 使用 &lt;code&gt;:rolename:`content`&lt;/code&gt; 语法来做一些复杂的行内标记
&lt;/p&gt;
&lt;/div&gt;

&lt;div id="outline-container-org7bf133e" class="outline-4"&gt;
&lt;h4 id="org7bf133e"&gt;&lt;code&gt;:ref:&lt;/code&gt; 交叉引用&lt;/h4&gt;
&lt;/div&gt;

&lt;div id="outline-container-org440559b" class="outline-4"&gt;
&lt;h4 id="org440559b"&gt;&lt;code&gt;:math:&lt;/code&gt; 数学公式&lt;/h4&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;</description><category>doc</category><category>python</category><category>rst</category><guid>https://chimez.github.io/posts/restructuredtext/</guid><pubDate>Mon, 16 Aug 2021 02:46:27 GMT</pubDate></item><item><title>Sphinx: Documentation Generator</title><link>https://chimez.github.io/posts/sphinx-documentation-generator/</link><dc:creator>chimez</dc:creator><description>&lt;div id="outline-container-org841d366" class="outline-2"&gt;
&lt;h2 id="org841d366"&gt;Sphinx: 文档生成&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-org841d366"&gt;
&lt;p&gt;
&lt;a href="https://www.sphinx-doc.org/en/master/usage/quickstart.html"&gt;sphinx/getting started&lt;/a&gt;
&lt;/p&gt;
&lt;/div&gt;

&lt;div id="outline-container-org5d416a8" class="outline-3"&gt;
&lt;h3 id="org5d416a8"&gt;创建与配置项目&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-org5d416a8"&gt;
&lt;/div&gt;
&lt;div id="outline-container-orga7905f1" class="outline-4"&gt;
&lt;h4 id="orga7905f1"&gt;&lt;code&gt;sphinx-quickstart&lt;/code&gt;&lt;/h4&gt;
&lt;div class="outline-text-4" id="text-orga7905f1"&gt;
&lt;p&gt;
使用这个命令，快速创建项目。跟随指导做一些选项。
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-org5a88cf1" class="outline-4"&gt;
&lt;h4 id="org5a88cf1"&gt;生成文档&lt;/h4&gt;
&lt;div class="outline-text-4" id="text-org5a88cf1"&gt;
&lt;p&gt;
使用命令 &lt;code&gt;sphinx-build -b html sourcedir builddir&lt;/code&gt; 或者 &lt;code&gt;make html&lt;/code&gt;
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-org5302760" class="outline-4"&gt;
&lt;h4 id="org5302760"&gt;基本配置&lt;/h4&gt;
&lt;div class="outline-text-4" id="text-org5302760"&gt;
&lt;p&gt;
基本配置在 &lt;code&gt;conf.py&lt;/code&gt; 文件中。这个文件就是一个python 脚本，可以执行各种python函数和导入其它库等。
&lt;/p&gt;

&lt;p&gt;
配置参考&lt;a href="https://www.sphinx-doc.org/en/master/usage/configuration.html"&gt;configuration&lt;/a&gt;
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-org62c45f2" class="outline-3"&gt;
&lt;h3 id="org62c45f2"&gt;写文档&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-org62c45f2"&gt;
&lt;/div&gt;
&lt;div id="outline-container-org2ad9a82" class="outline-4"&gt;
&lt;h4 id="org2ad9a82"&gt;文档结构&lt;/h4&gt;
&lt;div class="outline-text-4" id="text-org2ad9a82"&gt;
&lt;ol class="org-ol"&gt;
&lt;li&gt;&lt;code&gt;index.rst&lt;/code&gt; 文件是文档的欢迎页面，其中包括
&lt;ol class="org-ol"&gt;
&lt;li&gt;目录树 &lt;code&gt;toctree&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-org42dea4d" class="outline-4"&gt;
&lt;h4 id="org42dea4d"&gt;reStructuredText directives&lt;/h4&gt;
&lt;div class="outline-text-4" id="text-org42dea4d"&gt;
&lt;p&gt;
rst 指令的格式中包括
&lt;/p&gt;
&lt;ol class="org-ol"&gt;
&lt;li&gt;参数：在指令名后面的冒号之后，每个指令可以有若干个参数&lt;/li&gt;
&lt;li&gt;选项：在参数之后，选项的形式是 &lt;code&gt;名-值&lt;/code&gt; 的列表，一行一个&lt;/li&gt;
&lt;li&gt;内容：在参数之后空一行&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;

&lt;ul class="org-ul"&gt;
&lt;li&gt;&lt;a id="org141832e"&gt;&lt;/a&gt;&lt;code&gt;toctree&lt;/code&gt; 目录&lt;br&gt;
&lt;div class="outline-text-5" id="text-org141832e"&gt;
&lt;p&gt;
参考：&lt;a href="https://www.sphinx-doc.org/en/master/usage/restructuredtext/directives.html#toctree-directive"&gt;directives/toctree-directive&lt;/a&gt;
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;     .. toctree::
	:maxdepth: 2

	intro
	strings
	datatypes
	numeric
	(many more documents listed here)
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;

&lt;ul class="org-ul"&gt;
&lt;li&gt;&lt;a id="org1cedf5c"&gt;&lt;/a&gt;内容&lt;br&gt;
&lt;div class="outline-text-6" id="text-org1cedf5c"&gt;
&lt;p&gt;
内容中每一行就是要链接到的文件名, 可以用 &lt;code&gt;Net Title &amp;lt;filename&amp;gt;&lt;/code&gt; 重新指定显示的标题
&lt;/p&gt;
&lt;/div&gt;
&lt;/li&gt;

&lt;li&gt;&lt;a id="orgb775885"&gt;&lt;/a&gt;选项&lt;br&gt;
&lt;div class="outline-text-6" id="text-orgb775885"&gt;
&lt;table border="2" cellspacing="0" cellpadding="6" rules="groups" frame="hsides"&gt;


&lt;colgroup&gt;
&lt;col class="org-left"&gt;

&lt;col class="org-left"&gt;
&lt;/colgroup&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th scope="col" class="org-left"&gt;选项&lt;/th&gt;
&lt;th scope="col" class="org-left"&gt;作用&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class="org-left"&gt;&lt;code&gt;:numbered:&lt;/code&gt;&lt;/td&gt;
&lt;td class="org-left"&gt;给目录编号&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="org-left"&gt;&lt;code&gt;:caption: Table of Contents&lt;/code&gt;&lt;/td&gt;
&lt;td class="org-left"&gt;目录的标题&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="org-left"&gt;&lt;code&gt;:name: mastertoc&lt;/code&gt;&lt;/td&gt;
&lt;td class="org-left"&gt;设置 &lt;code&gt;ref&lt;/code&gt; 用的名字&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="org-left"&gt;&lt;code&gt;:titlesonly:&lt;/code&gt;&lt;/td&gt;
&lt;td class="org-left"&gt;只显示文件标题&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="org-left"&gt;&lt;code&gt;:glob:&lt;/code&gt;&lt;/td&gt;
&lt;td class="org-left"&gt;可以使用 &lt;code&gt;*&lt;/code&gt; 匹配很多文件&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="org-left"&gt;&lt;code&gt;:hidden:&lt;/code&gt;&lt;/td&gt;
&lt;td class="org-left"&gt;链接，但不显示&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="org-left"&gt;&lt;code&gt;:includehidden:&lt;/code&gt;&lt;/td&gt;
&lt;td class="org-left"&gt;只链接一级标题，隐藏其它的&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="org-left"&gt;&lt;code&gt;:maxdepth: 2&lt;/code&gt;&lt;/td&gt;
&lt;td class="org-left"&gt;目录层级深度&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;

&lt;div id="outline-container-orgcce0e8e" class="outline-4"&gt;
&lt;h4 id="orgcce0e8e"&gt;Domains&lt;/h4&gt;
&lt;div class="outline-text-4" id="text-orgcce0e8e"&gt;
&lt;p&gt;
为了对应 python/c++ 中的名字空间，防止函数名冲突，要把函数的文档写在 domain 里。
&lt;/p&gt;

&lt;p&gt;
参考 &lt;a href="https://www.sphinx-doc.org/en/master/usage/restructuredtext/domains.html"&gt;domains&lt;/a&gt;
&lt;/p&gt;
&lt;/div&gt;

&lt;ul class="org-ul"&gt;
&lt;li&gt;&lt;a id="org180b7d8"&gt;&lt;/a&gt;基本语法&lt;br&gt;
&lt;div class="outline-text-5" id="text-org180b7d8"&gt;
&lt;p&gt;
可以一次生成两个函数
&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;     .. py:function:: spam(eggs)
		      ham(eggs)

	Spam or ham the foo.
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
如果一个函数很长，可以折行并加上 &lt;code&gt;:noindex:&lt;/code&gt;
&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;     .. py:function:: filterwarnings(action, message='', category=Warning, \
				     module='', lineno=0, append=False)
	:noindex:
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
默认的 domain 是 python，可以用 &lt;code&gt;.. default-domain:: name&lt;/code&gt; 修改
&lt;/p&gt;
&lt;/div&gt;
&lt;/li&gt;

&lt;li&gt;&lt;a id="org01e90d5"&gt;&lt;/a&gt;交叉引用&lt;br&gt;
&lt;div class="outline-text-5" id="text-org01e90d5"&gt;
&lt;p&gt;
基本语法是 &lt;code&gt;:role:`title &amp;lt;target&amp;gt;`&lt;/code&gt; 这会引用 &lt;code&gt;target&lt;/code&gt; 但显示的是 &lt;code&gt;title&lt;/code&gt;
&lt;/p&gt;
&lt;ol class="org-ol"&gt;
&lt;li&gt;前面加 &lt;code&gt;!&lt;/code&gt; 不生成引用&lt;/li&gt;
&lt;li&gt;前面加 波浪线 &lt;code&gt;\~&lt;/code&gt; 只会显示最后一个元素的引用 &lt;code&gt;:py:meth:`\~Queue.Queue.get`&lt;/code&gt; 只显示 &lt;code&gt;get&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a id="orga473773"&gt;&lt;/a&gt;C++&lt;br&gt;
&lt;div class="outline-text-5" id="text-orga473773"&gt;
&lt;p&gt;
参考 &lt;a href="https://www.sphinx-doc.org/en/master/usage/restructuredtext/domains.html#cpp-domain"&gt;domains/cpp-domain&lt;/a&gt;     
&lt;/p&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;


&lt;div id="outline-container-org65ab85a" class="outline-3"&gt;
&lt;h3 id="org65ab85a"&gt;Autodoc: 注释文档&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-org65ab85a"&gt;
&lt;p&gt;
通过 autodoc 可以从源码的注释生成文档。需要在 &lt;code&gt;conf.py&lt;/code&gt; 的 &lt;code&gt;extensions&lt;/code&gt; 中加入 &lt;code&gt;'sphinx.ext.autodoc'&lt;/code&gt; . 之后就可以利用 &lt;code&gt;autofunction&lt;/code&gt; &lt;code&gt;automodule&lt;/code&gt; 等指令，将注释作为文档导入。
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;


&lt;div id="outline-container-orge3818bc" class="outline-3"&gt;
&lt;h3 id="orge3818bc"&gt;breathe&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-orge3818bc"&gt;
&lt;p&gt;
&lt;a href="https://breathe.readthedocs.io/en/latest/index.html"&gt;breathe&lt;/a&gt; 是通过 doxygen 生成 c/c++ 的文档的工具
&lt;/p&gt;
&lt;/div&gt;

&lt;div id="outline-container-org7471afa" class="outline-4"&gt;
&lt;h4 id="org7471afa"&gt;基本使用&lt;/h4&gt;
&lt;div class="outline-text-4" id="text-org7471afa"&gt;
&lt;p&gt;
设置 &lt;code&gt;conf.py&lt;/code&gt;
&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    &lt;span class="n"&gt;breathe_projects_source&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
	&lt;span class="s2"&gt;"my_proj"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"../src"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;"oneheader.h"&lt;/span&gt;&lt;span class="p"&gt;]),&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="n"&gt;breathe_default_project&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"my_proj"&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
就可以在 &lt;code&gt;index.rst&lt;/code&gt; 中使用
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    .. autodoxygenfile:: oneheader.h
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;</description><category>Documents</category><category>python</category><guid>https://chimez.github.io/posts/sphinx-documentation-generator/</guid><pubDate>Mon, 16 Aug 2021 02:00:41 GMT</pubDate></item><item><title>xxhash</title><link>https://chimez.github.io/posts/xxhash/</link><dc:creator>chimez</dc:creator><description>&lt;div id="outline-container-orgae46881" class="outline-2"&gt;
&lt;h2 id="orgae46881"&gt;xxHash: 快速的哈希函数&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-orgae46881"&gt;
&lt;p&gt;
&lt;a href="https://github.com/Cyan4973/xxHash"&gt;Cyan4973/xxHash&lt;/a&gt;
&lt;/p&gt;
&lt;/div&gt;

&lt;div id="outline-container-org54c7d4a" class="outline-3"&gt;
&lt;h3 id="org54c7d4a"&gt;安装&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-org54c7d4a"&gt;
&lt;p&gt;
meson 的 wrapDB 中有，所以只需要 &lt;code&gt;meson wrap install xxhash&lt;/code&gt;
&lt;/p&gt;

&lt;p&gt;
编译时使用 &lt;code&gt;XXH_INLINE_ALL&lt;/code&gt; 选项提高性能，对于 meson 来说需要写 &lt;code&gt;xxhash_dep = dependency('libxxhash', default_options: ['inline-all=true'])&lt;/code&gt;
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-orge9e3061" class="outline-3"&gt;
&lt;h3 id="orge9e3061"&gt;基本使用&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-orge9e3061"&gt;
&lt;p&gt;
最快的哈希函数是 &lt;code&gt;XXH3_64bits&lt;/code&gt;
&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="cp"&gt;#include&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="cpf"&gt;"xxhash.h"&lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;

&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="k"&gt;static&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kr"&gt;inline&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="n"&gt;XXH64_hash_t&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="nf"&gt;hash_func&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;       &lt;/span&gt;&lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;XXH3_64bits&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="k"&gt;sizeof&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;&lt;span class="w"&gt;	&lt;/span&gt;
&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;</description><category>C</category><category>hash</category><guid>https://chimez.github.io/posts/xxhash/</guid><pubDate>Fri, 06 Aug 2021 16:30:25 GMT</pubDate></item><item><title>klib</title><link>https://chimez.github.io/posts/klib/</link><dc:creator>chimez</dc:creator><description>&lt;div id="outline-container-org7e15f53" class="outline-2"&gt;
&lt;h2 id="org7e15f53"&gt;klib: 轻量级 c 头文件库&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-org7e15f53"&gt;
&lt;p&gt;
&lt;a href="https://github.com/attractivechaos/klib"&gt;attractivechaos/klib&lt;/a&gt;
&lt;/p&gt;
&lt;/div&gt;

&lt;div id="outline-container-org07d9425" class="outline-3"&gt;
&lt;h3 id="org07d9425"&gt;khash.h&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-org07d9425"&gt;
&lt;p&gt;
快速轻量的哈希表库
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="cp"&gt;#include&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="cpf"&gt;"khash.h"&lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;

&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="k"&gt;typedef&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;kh_myname_key_t&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="k"&gt;typedef&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;kh_myname_value_t&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="n"&gt;kh_int_t&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;
&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="nf"&gt;kh_myname_hash_func&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;kh_myname_key_t&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;       &lt;/span&gt;&lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;HASH&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;
&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="nf"&gt;kh_myname_hash_equal&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;kh_myname_key_t&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;key_1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;kh_myname_key_t&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;key_2&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;       &lt;/span&gt;&lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;key_1&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;key_2&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="n"&gt;KHASH_INIT&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;myname&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;kh_myname_key_t&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;kh_myname_value_t&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;kh_myname_hash_func&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;kh_myname_hash_equal&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;
&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="n"&gt;main&lt;/span&gt;&lt;span class="p"&gt;(){&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="w"&gt;       &lt;/span&gt;&lt;span class="n"&gt;khiter_t&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;k&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;	&lt;/span&gt;
&lt;span class="w"&gt;       &lt;/span&gt;&lt;span class="n"&gt;khash_t&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;myname&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;h&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;kh_init&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;myname&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="w"&gt;       &lt;/span&gt;&lt;span class="c1"&gt;// 存入数据&lt;/span&gt;
&lt;span class="w"&gt;       &lt;/span&gt;&lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;	   &lt;/span&gt;&lt;span class="n"&gt;kh_myname_key_t&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;calloc&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;sizeof&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;kh_myname_key_t&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;&lt;span class="w"&gt;			&lt;/span&gt;
&lt;span class="w"&gt;	   &lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="w"&gt;	   &lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;ret&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;	   &lt;/span&gt;&lt;span class="n"&gt;k&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;kh_put&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;myname&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;h&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;ret&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="w"&gt;			&lt;/span&gt;
&lt;span class="w"&gt;	   &lt;/span&gt;&lt;span class="n"&gt;kh_value&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;h&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;k&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;			&lt;/span&gt;
&lt;span class="w"&gt;       &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="w"&gt;       &lt;/span&gt;&lt;span class="c1"&gt;// 读取，修改，删除&lt;/span&gt;
&lt;span class="w"&gt;       &lt;/span&gt;&lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;	   &lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;	   &lt;/span&gt;&lt;span class="n"&gt;k&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;kh_get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;myname&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;h&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="w"&gt;			&lt;/span&gt;

&lt;span class="w"&gt;	   &lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="n"&gt;kh_exist&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;h&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;k&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;||&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;k&lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;kh_end&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;h&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;	       &lt;/span&gt;&lt;span class="n"&gt;printf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"not exits!&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;	   &lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;kh_value&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;h&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;k&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;!=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;			&lt;/span&gt;
&lt;span class="w"&gt;	       &lt;/span&gt;&lt;span class="n"&gt;printf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"wrong value!&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="w"&gt;	   &lt;/span&gt;&lt;span class="n"&gt;kh_del&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;myname&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;h&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;k&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="w"&gt;			&lt;/span&gt;
&lt;span class="w"&gt;	   &lt;/span&gt;&lt;span class="n"&gt;free&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;kh_key&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;h&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;k&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;&lt;span class="w"&gt;			&lt;/span&gt;
&lt;span class="w"&gt;       &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="w"&gt;       &lt;/span&gt;&lt;span class="n"&gt;kh_destroy&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;myname&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;h&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="w"&gt;	&lt;/span&gt;

&lt;span class="w"&gt;       &lt;/span&gt;&lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;</description><category>C</category><category>khash</category><category>klib</category><guid>https://chimez.github.io/posts/klib/</guid><pubDate>Fri, 06 Aug 2021 16:19:52 GMT</pubDate></item><item><title>cython</title><link>https://chimez.github.io/posts/cython/</link><dc:creator>chimez</dc:creator><description>&lt;div id="outline-container-org623bff5" class="outline-2"&gt;
&lt;h2 id="org623bff5"&gt;Cython&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-org623bff5"&gt;
&lt;/div&gt;
&lt;div id="outline-container-orgcae80f3" class="outline-3"&gt;
&lt;h3 id="orgcae80f3"&gt;基本概念&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-orgcae80f3"&gt;
&lt;/div&gt;
&lt;div id="outline-container-org12f0306" class="outline-4"&gt;
&lt;h4 id="org12f0306"&gt;文件&lt;/h4&gt;
&lt;div class="outline-text-4" id="text-org12f0306"&gt;
&lt;ol class="org-ol"&gt;
&lt;li&gt;&lt;code&gt;.pyx&lt;/code&gt; 是 &lt;code&gt;cython&lt;/code&gt; 语法的源文件&lt;/li&gt;
&lt;li&gt;&lt;code&gt;.pyd&lt;/code&gt; (windows) 是 windows 平台上编译后的文件，对应 linux 平台的 &lt;code&gt;*.so&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;.pyd&lt;/code&gt; (源文件) 是外部声明，即对 &lt;code&gt;.h&lt;/code&gt; 头文件的重新封装&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-org356013e" class="outline-4"&gt;
&lt;h4 id="org356013e"&gt;库&lt;/h4&gt;
&lt;div class="outline-text-4" id="text-org356013e"&gt;
&lt;ol class="org-ol"&gt;
&lt;li&gt;&lt;code&gt;Cython.Build&lt;/code&gt; python 端调用，用于编译&lt;/li&gt;
&lt;li&gt;&lt;code&gt;cython.parallel&lt;/code&gt; cython 端调用，并行 &lt;code&gt;prange&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;
所有 c 库在 &lt;a href="https://github.com/cython/cython/tree/master/Cython/Includes"&gt;Cython/Includes&lt;/a&gt; 中
&lt;/p&gt;
&lt;ol class="org-ol"&gt;
&lt;li&gt;&lt;code&gt;libc&lt;/code&gt; cython 端调用， c 标准库&lt;/li&gt;
&lt;li&gt;&lt;code&gt;libcpp&lt;/code&gt; cython 端调用， c++ stl 库&lt;/li&gt;
&lt;li&gt;&lt;code&gt;numpy&lt;/code&gt; cython 端调用，numpy 支持&lt;/li&gt;
&lt;li&gt;&lt;code&gt;posix&lt;/code&gt; cython 端调用，posix 库&lt;/li&gt;
&lt;li&gt;&lt;code&gt;openmp&lt;/code&gt; cython 端调用，并行&lt;/li&gt;
&lt;li&gt;&lt;code&gt;cpython&lt;/code&gt; cython 端调用， python 的 c 接口&lt;/li&gt;
&lt;li&gt;&lt;code&gt;cython&lt;/code&gt; cython 端调用，控制特殊行为&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-orgea8d3ea" class="outline-4"&gt;
&lt;h4 id="orgea8d3ea"&gt;语法&lt;/h4&gt;
&lt;div class="outline-text-4" id="text-orgea8d3ea"&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    from libc.math cimport log2 # 引入 c 函数
    cdef int x # 声明变量类型
    cdef int [:,:] x # 声明变量是 numpy 的 2d 向量
    ctypedef struct queue: # 声明类型
	pass

    ctypedef fused my_type: # 泛型
	int
	double
	long long

    # 类的定义，注意使用 __cinit__
    cdef class A:
	cdef int a
	def __cinit__(self):
	    self.a = 1

    &amp;lt;void*&amp;gt;value # 类型转换成指针

    # 定义 c 函数，异常时返回 -1
    cdef int func(int x) execpt? -1:
	pass
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-org0e3efab" class="outline-4"&gt;
&lt;h4 id="org0e3efab"&gt;文件注解&lt;/h4&gt;
&lt;div class="outline-text-4" id="text-org0e3efab"&gt;
&lt;ol class="org-ol"&gt;
&lt;li&gt;&lt;code&gt;# distutils: language=c++&lt;/code&gt; 使用 &lt;code&gt;c++&lt;/code&gt; 编译&lt;/li&gt;
&lt;li&gt;&lt;code&gt;# distutils: sources = c-algorithms/src/queue.c&lt;/code&gt; 指定静态链接的源文件&lt;/li&gt;
&lt;li&gt;&lt;code&gt;# distutils: include_dirs = c-algorithms/src/&lt;/code&gt; 指定头文件目录&lt;/li&gt;
&lt;li&gt;&lt;code&gt;# distutils: extra_compile_args=-fopenmp&lt;/code&gt; 指定编译器参数&lt;/li&gt;
&lt;li&gt;&lt;code&gt;# distutils: extra_link_args=-fopenmp&lt;/code&gt; 指定链接参数&lt;/li&gt;
&lt;li&gt;&lt;code&gt;# cython: infer_types=True&lt;/code&gt; 自动推断类型，只作用于一级缩进的变量&lt;/li&gt;
&lt;li&gt;&lt;code&gt;# cython: profile=True&lt;/code&gt; 开启 profile&lt;/li&gt;
&lt;li&gt;&lt;code&gt;# cython: linetrace=True&lt;/code&gt; 开启 profile 行追踪&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-orgb070531" class="outline-4"&gt;
&lt;h4 id="orgb070531"&gt;函数注解&lt;/h4&gt;
&lt;div class="outline-text-4" id="text-orgb070531"&gt;
&lt;ol class="org-ol"&gt;
&lt;li&gt;&lt;code&gt;@cython.boundscheck(False)&lt;/code&gt; 关闭数组边界检查&lt;/li&gt;
&lt;li&gt;&lt;code&gt;@cython.wraparound(False)&lt;/code&gt; 关闭负指标&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-orga07bc8e" class="outline-3"&gt;
&lt;h3 id="orga07bc8e"&gt;编译&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-orga07bc8e"&gt;
&lt;/div&gt;
&lt;div id="outline-container-org03f4285" class="outline-4"&gt;
&lt;h4 id="org03f4285"&gt;基本结构&lt;/h4&gt;
&lt;div class="outline-text-4" id="text-org03f4285"&gt;
&lt;p&gt;
&lt;code&gt;setup.py&lt;/code&gt;
&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    &lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;setuptools&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;setup&lt;/span&gt;
    &lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;Cython.Build&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;cythonize&lt;/span&gt;

    &lt;span class="n"&gt;setup&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
	&lt;span class="n"&gt;ext_modules&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;cythonize&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"helloworld.pyx"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
&lt;code&gt;helloworld.pyx&lt;/code&gt;
&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    &lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"Hello World"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
执行命令
&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    python setup.py build_ext --inplace
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
这编译得到的 &lt;code&gt;helloworld.so&lt;/code&gt; 或 &lt;code&gt;helloworld.pyd&lt;/code&gt;
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-org54462fb" class="outline-4"&gt;
&lt;h4 id="org54462fb"&gt;动态链接&lt;/h4&gt;
&lt;div class="outline-text-4" id="text-org54462fb"&gt;
&lt;p&gt;
&lt;a href="https://cython.readthedocs.io/en/latest/src/tutorial/external.html#dynamic-linking"&gt;参考&lt;/a&gt;
&lt;/p&gt;

&lt;p&gt;
需要指明 &lt;code&gt;libraries&lt;/code&gt; 参数
&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    &lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;setuptools&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Extension&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;setup&lt;/span&gt;
    &lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;Cython.Build&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;cythonize&lt;/span&gt;

    &lt;span class="n"&gt;ext_modules&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
	&lt;span class="n"&gt;Extension&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"demo"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
		  &lt;span class="n"&gt;sources&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;"demo.pyx"&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
		  &lt;span class="n"&gt;libraries&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;"m"&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;  &lt;span class="c1"&gt;# Unix-like specific&lt;/span&gt;
		  &lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;]&lt;/span&gt;

    &lt;span class="n"&gt;setup&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"Demos"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
	  &lt;span class="n"&gt;ext_modules&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;cythonize&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ext_modules&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-org58aa4b1" class="outline-4"&gt;
&lt;h4 id="org58aa4b1"&gt;静态链接&lt;/h4&gt;
&lt;div class="outline-text-4" id="text-org58aa4b1"&gt;
&lt;p&gt;
使用注解 
&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    # distutils: sources = c-algorithms/src/queue.c
    # distutils: include_dirs = c-algorithms/src/

    pass
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-orgf4104de" class="outline-3"&gt;
&lt;h3 id="orgf4104de"&gt;使用 c 库&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-orgf4104de"&gt;
&lt;/div&gt;
&lt;div id="outline-container-orga658036" class="outline-4"&gt;
&lt;h4 id="orga658036"&gt;外部声明&lt;/h4&gt;
&lt;div class="outline-text-4" id="text-orga658036"&gt;
&lt;p&gt;
使用头文件, 外部声明可以放在 &lt;code&gt;.pyd&lt;/code&gt; 文件中
&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    cdef extern from "math.h":
	double sin(double x)
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-org440ac00" class="outline-4"&gt;
&lt;h4 id="org440ac00"&gt;异常处理&lt;/h4&gt;
&lt;div class="outline-text-4" id="text-org440ac00"&gt;
&lt;ol class="org-ol"&gt;
&lt;li&gt;&lt;code&gt;except? -1&lt;/code&gt; 语法表示当发生任何错误时，返回 &lt;code&gt;-1&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;execpt *&lt;/code&gt; 表示返回时调用 &lt;code&gt;PyErr_Occurred()&lt;/code&gt; ，当函数返回 &lt;code&gt;void&lt;/code&gt; 并且需要传递错误时使用这个&lt;/li&gt;
&lt;/ol&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    cdef int pop(self) except? -1:
	if cqueue.queue_is_empty(self._c_queue):
	    raise IndexError("Queue is empty")
	return &amp;lt;Py_ssize_t&amp;gt;cqueue.queue_pop_head(self._c_queue)

    cdef int spam() except *:
	...
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-org2f9d47d" class="outline-3"&gt;
&lt;h3 id="org2f9d47d"&gt;使用 numpy&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-org2f9d47d"&gt;
&lt;p&gt;
numpy 的 &lt;code&gt;ndarray&lt;/code&gt; 在 cython 中用做 typed memoryview
&lt;/p&gt;
&lt;/div&gt;

&lt;div id="outline-container-orgc0b1489" class="outline-4"&gt;
&lt;h4 id="orgc0b1489"&gt;基本例子&lt;/h4&gt;
&lt;div class="outline-text-4" id="text-orgc0b1489"&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    import numpy as np

    DTYPE = np.intc


    cdef int clip(int a, int min_value, int max_value):
	return min(max(a, min_value), max_value)


    def compute(int[:, :] array_1, int[:, :] array_2, int a, int b, int c):

	cdef Py_ssize_t x_max = array_1.shape[0]
	cdef Py_ssize_t y_max = array_1.shape[1]
	assert tuple(array_1.shape) == tuple(array_2.shape)

	result = np.zeros((x_max, y_max), dtype=DTYPE)
	cdef int[:, :] result_view = result

	cdef int tmp
	cdef Py_ssize_t x, y

	for x in range(x_max):
	    for y in range(y_max):

		tmp = clip(array_1[x, y], 2, 10)
		tmp = tmp * a + array_2[x, y] * b
		result_view[x, y] = tmp + c

	return result
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-orgdb2cd81" class="outline-3"&gt;
&lt;h3 id="orgdb2cd81"&gt;并行&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-orgdb2cd81"&gt;
&lt;ol class="org-ol"&gt;
&lt;li&gt;使用 &lt;code&gt;prange&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;
使用 &lt;code&gt;nogil&lt;/code&gt;
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;      from cython.parallel import prange
      cdef int func(int x) nogil:
	  cdef int i
	  cdef int y
	  for i in prange(x, nogil=True):
	      y += i 
	  return y
&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;</description><category>cython</category><category>python</category><guid>https://chimez.github.io/posts/cython/</guid><pubDate>Thu, 05 Aug 2021 12:47:25 GMT</pubDate></item><item><title>MPI</title><link>https://chimez.github.io/posts/mpi/</link><dc:creator>chimez</dc:creator><description>&lt;div id="outline-container-org66921a9" class="outline-2"&gt;
&lt;h2 id="org66921a9"&gt;MPI: Message Passing Interface&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-org66921a9"&gt;
&lt;p&gt;
MPI 是消息传递接口标准，主要的实现有 Intel MPI, OpenMPI 和 MPICH 等. MPI 标准目前有三版 MPI-1,MPI-2, MPI-3, 标准支持的语言是 c 和 fortran, c++ 支持在 MPI-3 中移除了。
&lt;/p&gt;

&lt;p&gt;
MPI 的优势：
&lt;/p&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;标准：所有超级计算机都支持&lt;/li&gt;
&lt;li&gt;可移植：无需修改程序就能在所有支持 MPI 的平台上运行&lt;/li&gt;
&lt;li&gt;高性能：所有实现都会根据机器做优化&lt;/li&gt;
&lt;li&gt;功能齐全：MPI-3 中有超过 430 个函数，尽管大多数程序可能就用几十个函数&lt;/li&gt;
&lt;li&gt;可用：相当多的实现都可用，包括供应商提供的和开放获取的&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;

&lt;div id="outline-container-org89de801" class="outline-3"&gt;
&lt;h3 id="org89de801"&gt;基本结构&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-org89de801"&gt;
&lt;/div&gt;
&lt;div id="outline-container-org7987d2d" class="outline-4"&gt;
&lt;h4 id="org7987d2d"&gt;程序结构&lt;/h4&gt;
&lt;div class="outline-text-4" id="text-org7987d2d"&gt;
&lt;p&gt;
所有 MPI 程序都分以下几步
&lt;/p&gt;
&lt;ol class="org-ol"&gt;
&lt;li&gt;引用头文件 &lt;code&gt;"mpi.h"&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;执行顺序代码&lt;/li&gt;
&lt;li&gt;初始化 MPI 环境&lt;/li&gt;
&lt;li&gt;执行并行任务&lt;/li&gt;
&lt;li&gt;终止 MPI 环境&lt;/li&gt;
&lt;li&gt;执行顺序代码&lt;/li&gt;
&lt;li&gt;程序结束&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-org94a3b03" class="outline-4"&gt;
&lt;h4 id="org94a3b03"&gt;接口约定&lt;/h4&gt;
&lt;div class="outline-text-4" id="text-org94a3b03"&gt;
&lt;p&gt;
所有 MPI 的函数都以 &lt;code&gt;MPI_&lt;/code&gt; 开头，并且下划线后的第一个字母大写，函数返回消息码 &lt;code&gt;rc&lt;/code&gt; , 如果成功就是 &lt;code&gt;MPI_SUCCESS&lt;/code&gt;, 即 &lt;code&gt;0&lt;/code&gt;
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-orgee26be2" class="outline-4"&gt;
&lt;h4 id="orgee26be2"&gt;基本概念&lt;/h4&gt;
&lt;div class="outline-text-4" id="text-orgee26be2"&gt;
&lt;ol class="org-ol"&gt;
&lt;li&gt;&lt;b&gt;communicator&lt;/b&gt;: 通信器，定义哪些进程之间需要通信
&lt;ol class="org-ol"&gt;
&lt;li&gt;&lt;code&gt;MPI_COMM_WORLD&lt;/code&gt; 通信器表示所有进程都相互通信&lt;/li&gt;
&lt;/ol&gt;&lt;/li&gt;
&lt;li&gt;&lt;b&gt;group&lt;/b&gt;: 进程的分组&lt;/li&gt;
&lt;li&gt;&lt;b&gt;rank&lt;/b&gt;: 秩，指的是一个通信器中每个进程都有自己单独的编号，有时候也叫做 &lt;b&gt;任务 ID&lt;/b&gt; ，秩是从 0 开始连续的整数&lt;/li&gt;
&lt;li&gt;&lt;b&gt;错误处理&lt;/b&gt;: 尽管大多数函数都返回一个错误码，但是 MPI 标准指出，当错误发生时程序应立刻终止，所以并不需要自己捕获和处理所有错误码&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-org963ef78" class="outline-4"&gt;
&lt;h4 id="org963ef78"&gt;MPI 版本&lt;/h4&gt;
&lt;div class="outline-text-4" id="text-org963ef78"&gt;
&lt;p&gt;
&lt;b&gt;MPI-1&lt;/b&gt; (1994) ：最早的版本，构建起了 MPI 的基本框架，包括
&lt;/p&gt;
&lt;ol class="org-ol"&gt;
&lt;li&gt;基本的环境管理&lt;/li&gt;
&lt;li&gt;点到点通信&lt;/li&gt;
&lt;li&gt;集体通信&lt;/li&gt;
&lt;li&gt;组和通信器&lt;/li&gt;
&lt;li&gt;虚拟拓扑&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;
&lt;b&gt;MPI-2&lt;/b&gt; (1998) ： 为 MPI-1 添加大量新函数
&lt;/p&gt;
&lt;ol class="org-ol"&gt;
&lt;li&gt;动态进程：可以在任务启动后创建新的进程&lt;/li&gt;
&lt;li&gt;单边通信：提供单向通信功能，包括共享内存和远程累加操作&lt;/li&gt;
&lt;li&gt;扩展集体通信：允许通信器间的集体通信&lt;/li&gt;
&lt;li&gt;扩展接口：允许在 MPI 之上构造开发曾，包括 debugger 和 profiler 等&lt;/li&gt;
&lt;li&gt;额外语言绑定：支持 fortran 90&lt;/li&gt;
&lt;li&gt;并行 I/O&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;
&lt;b&gt;MPI-3&lt;/b&gt; (2012) ：对 MPI-1 和 MPI-2 更多的扩展
&lt;/p&gt;
&lt;ol class="org-ol"&gt;
&lt;li&gt;非阻塞集体操作&lt;/li&gt;
&lt;li&gt;新的单边通信操作&lt;/li&gt;
&lt;li&gt;近邻集体：扩展更多虚拟拓扑结构&lt;/li&gt;
&lt;li&gt;支持 fortran 2008&lt;/li&gt;
&lt;li&gt;MPIT Tool Interface 允许 MPI 实现开放一些内部变量给用户，用于性能提升&lt;/li&gt;
&lt;li&gt;Matched Probe: 改进多线程中的 probe 功能&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;
&lt;b&gt;MPI-4&lt;/b&gt; (2021) : TODO
&lt;/p&gt;
&lt;ol class="org-ol"&gt;
&lt;li&gt;增加大 count 参数支持&lt;/li&gt;
&lt;li&gt;持久集体&lt;/li&gt;
&lt;li&gt;部分通信&lt;/li&gt;
&lt;li&gt;新的初始化方式&lt;/li&gt;
&lt;li&gt;改进信息和错误处理&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-org32df7a6" class="outline-3"&gt;
&lt;h3 id="org32df7a6"&gt;环境管理函数&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-org32df7a6"&gt;
&lt;ol class="org-ol"&gt;
&lt;li&gt;&lt;code&gt;MPI_Init (&amp;amp;argc,&amp;amp;argv)&lt;/code&gt;
&lt;ol class="org-ol"&gt;
&lt;li&gt;初始化 MPI 环境，应在所有 MPI 函数之前调用，并且只能调用一次，这个函数具体做的事情是实现依赖的&lt;/li&gt;
&lt;/ol&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;MPI_Comm_size (comm,&amp;amp;size)&lt;/code&gt;
&lt;ol class="org-ol"&gt;
&lt;li&gt;获得通信器 &lt;code&gt;comm&lt;/code&gt; 中 MPI 进程的总数&lt;/li&gt;
&lt;li&gt;如果通信器是 &lt;code&gt;MPI_COMM_WORLD&lt;/code&gt; 那么就会得到程序的总进程数&lt;/li&gt;
&lt;/ol&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;MPI_Comm_rank (comm,&amp;amp;rank)&lt;/code&gt;
&lt;ol class="org-ol"&gt;
&lt;li&gt;获得调用这个函数的进程在通信器 &lt;code&gt;comm&lt;/code&gt; 中的秩，&lt;/li&gt;
&lt;/ol&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;MPI_Abort (comm,errorcode)&lt;/code&gt;
&lt;ol class="org-ol"&gt;
&lt;li&gt;终止通信器 &lt;code&gt;comm&lt;/code&gt; 中的所有进程&lt;/li&gt;
&lt;/ol&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;MPI_Get_processor_name (&amp;amp;name,&amp;amp;resultlength)&lt;/code&gt;
&lt;ol class="org-ol"&gt;
&lt;li&gt;获得进程的名字和名字的长度&lt;/li&gt;
&lt;li&gt;名字的缓冲区大小至少是 &lt;code&gt;MPI_MAX_PROCESSOR_NAME&lt;/code&gt; 个 &lt;code&gt;sizeof(char)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;具体返回的名字是什么是实现依赖的&lt;/li&gt;
&lt;/ol&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;MPI_Get_version (&amp;amp;version,&amp;amp;subversion)&lt;/code&gt;
&lt;ol class="org-ol"&gt;
&lt;li&gt;获得 MPI 标准的版本号和子版本号&lt;/li&gt;
&lt;/ol&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;MPI_Initialized (&amp;amp;flag)&lt;/code&gt;
&lt;ol class="org-ol"&gt;
&lt;li&gt;测试是否已经调用过 &lt;code&gt;MPI_Init()&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;MPI_Wtime ()&lt;/code&gt;
&lt;ol class="org-ol"&gt;
&lt;li&gt;返回该进程所处的时间，以秒为单位&lt;/li&gt;
&lt;li&gt;不同进程的时间可能不一样，但大多数实现会同步这个时间&lt;/li&gt;
&lt;/ol&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;MPI_Wtick ()&lt;/code&gt;
&lt;ol class="org-ol"&gt;
&lt;li&gt;返回 &lt;code&gt;MPI_Wtime()&lt;/code&gt; 的精度&lt;/li&gt;
&lt;/ol&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;MPI_Finalize ()&lt;/code&gt;
&lt;ol class="org-ol"&gt;
&lt;li&gt;终止 MPI 环境，每个 MPI 程序只能调用一次&lt;/li&gt;
&lt;/ol&gt;&lt;/li&gt;
&lt;/ol&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="cp"&gt;#include&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="cpf"&gt;"mpi.h"&lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;

&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;argc&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;char&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;argv&lt;/span&gt;&lt;span class="p"&gt;[])&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;       &lt;/span&gt;&lt;span class="n"&gt;MPI_Init&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;argc&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;argv&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="w"&gt;       &lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;num_tasks&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;       &lt;/span&gt;&lt;span class="n"&gt;MPI_Comm_size&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;MPI_COMM_WORLD&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;num_tasks&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="w"&gt;       &lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;rank&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;       &lt;/span&gt;&lt;span class="n"&gt;MPI_Comm_rank&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;MPI_COMM_WORLD&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;rank&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="w"&gt;       &lt;/span&gt;&lt;span class="kt"&gt;char&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;hostname&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;MPI_MAX_PROCESSOR_NAME&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;       &lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;name_len&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;       &lt;/span&gt;&lt;span class="n"&gt;MPI_Get_processor_name&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;hostname&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;name_len&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="w"&gt;       &lt;/span&gt;&lt;span class="n"&gt;MPI_Finalize&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-org8f87709" class="outline-3"&gt;
&lt;h3 id="org8f87709"&gt;点到点通信&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-org8f87709"&gt;
&lt;/div&gt;
&lt;div id="outline-container-org94c3afb" class="outline-4"&gt;
&lt;h4 id="org94c3afb"&gt;一般参数说明&lt;/h4&gt;
&lt;div class="outline-text-4" id="text-org94c3afb"&gt;
&lt;table border="2" cellspacing="0" cellpadding="6" rules="groups" frame="hsides"&gt;


&lt;colgroup&gt;
&lt;col class="org-left"&gt;

&lt;col class="org-left"&gt;
&lt;/colgroup&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th scope="col" class="org-left"&gt;类型&lt;/th&gt;
&lt;th scope="col" class="org-left"&gt;举例的函数&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class="org-left"&gt;Blocking sends&lt;/td&gt;
&lt;td class="org-left"&gt;MPI&lt;sub&gt;Send&lt;/sub&gt;(buffer,count,type,dest,tag,comm)&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="org-left"&gt;Non-blocking sends&lt;/td&gt;
&lt;td class="org-left"&gt;MPI&lt;sub&gt;Isend&lt;/sub&gt;(buffer,count,type,dest,tag,comm,request)&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="org-left"&gt;Blocking receive&lt;/td&gt;
&lt;td class="org-left"&gt;MPI&lt;sub&gt;Recv&lt;/sub&gt;(buffer,count,type,source,tag,comm,status)&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="org-left"&gt;Non-blocking receive&lt;/td&gt;
&lt;td class="org-left"&gt;MPI&lt;sub&gt;Irecv&lt;/sub&gt;(buffer,count,type,source,tag,comm,request)&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;
参数说明：
&lt;/p&gt;
&lt;ol class="org-ol"&gt;
&lt;li&gt;&lt;b&gt;buffer&lt;/b&gt;: 要被收发的内容，内存地址，也就是指针&lt;/li&gt;
&lt;li&gt;&lt;b&gt;count&lt;/b&gt;: 要收发的数据大小&lt;/li&gt;
&lt;li&gt;&lt;b&gt;type&lt;/b&gt;: 数据类型，全大写的一个量 &lt;code&gt;MPI_CHAR&lt;/code&gt; 等，也可以自定义&lt;/li&gt;
&lt;li&gt;&lt;b&gt;destination&lt;/b&gt;: 发送的目标进程的 rank&lt;/li&gt;
&lt;li&gt;&lt;b&gt;source&lt;/b&gt;: 接受的源进程的 rank，
&lt;ol class="org-ol"&gt;
&lt;li&gt;如果是 &lt;code&gt;MPI_ANY_SOURCE&lt;/code&gt; 那么就从所有进程接收&lt;/li&gt;
&lt;/ol&gt;&lt;/li&gt;
&lt;li&gt;&lt;b&gt;tag&lt;/b&gt;: 一个任意的非负整数参数，用来标记不同的信息，接收和发送两方的 &lt;code&gt;tag&lt;/code&gt; 要相同，
&lt;ol class="org-ol"&gt;
&lt;li&gt;&lt;code&gt;MPI_ANY_TAG&lt;/code&gt; 会接收所有 tag&lt;/li&gt;
&lt;li&gt;MPI 标准指出 tag 应该在 0-32767, 不过大多数实现都支持更大的数&lt;/li&gt;
&lt;/ol&gt;&lt;/li&gt;
&lt;li&gt;&lt;b&gt;comm&lt;/b&gt;: 通信器&lt;/li&gt;
&lt;li&gt;&lt;b&gt;status&lt;/b&gt;: 是收到的消息的属性，类型是 &lt;code&gt;MPI_Status&lt;/code&gt;
&lt;ol class="org-ol"&gt;
&lt;li&gt;&lt;code&gt;MPI_Get_count()&lt;/code&gt; 可以获取收到的消息的大小&lt;/li&gt;
&lt;/ol&gt;&lt;/li&gt;
&lt;li&gt;&lt;b&gt;request&lt;/b&gt;: 非阻塞收发的回调，类型是 &lt;code&gt;MPI_Request&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-org0d9693b" class="outline-4"&gt;
&lt;h4 id="org0d9693b"&gt;常用阻塞点到点通信函数&lt;/h4&gt;
&lt;div class="outline-text-4" id="text-org0d9693b"&gt;
&lt;ol class="org-ol"&gt;
&lt;li&gt;&lt;code&gt;MPI_Send()&lt;/code&gt; 基本的发送消息, 只有当发送信道再次可用时才返回&lt;/li&gt;
&lt;li&gt;&lt;code&gt;MPI_Recv()&lt;/code&gt; 基本的接收消息，阻塞直到接收信道再次可用&lt;/li&gt;
&lt;li&gt;&lt;code&gt;MPI_Ssend()&lt;/code&gt; 同步阻塞发送，阻塞直到发送信道可用并且接收方开始接收这个消息&lt;/li&gt;
&lt;li&gt;&lt;code&gt;MPI_Sendrecv()&lt;/code&gt; 发送消息并发送回执，阻塞直到发送信道可用，并且接收方已经收到消息&lt;/li&gt;
&lt;li&gt;&lt;code&gt;MPI_Wait()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;MPI_Waitany()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;MPI_Waitall()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;MPI_Waitsome()&lt;/code&gt;
&lt;ol class="org-ol"&gt;
&lt;li&gt;阻塞直到某个非阻塞的收发完成&lt;/li&gt;
&lt;/ol&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;MPI_Probe()&lt;/code&gt; 进行阻塞测试&lt;/li&gt;
&lt;li&gt;&lt;code&gt;MPI_Get_count()&lt;/code&gt; 返回收到的消息的源、标签和大小
&lt;ol class="org-ol"&gt;
&lt;li&gt;输出类型是 &lt;code&gt;MPI_SOURCE&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-orge39aab7" class="outline-4"&gt;
&lt;h4 id="orge39aab7"&gt;常用非阻塞点到点通信函数&lt;/h4&gt;
&lt;div class="outline-text-4" id="text-orge39aab7"&gt;
&lt;ol class="org-ol"&gt;
&lt;li&gt;&lt;code&gt;MPI_Isend()&lt;/code&gt; 非阻塞发送，所指定的发送 buffer 应该在 &lt;code&gt;MPI_Probe()&lt;/code&gt; 确定已经发送完成之前不修改&lt;/li&gt;
&lt;li&gt;&lt;code&gt;MPI_Irecv()&lt;/code&gt; 非阻塞接收，同样不应该在确定接收完成前修改 buffer&lt;/li&gt;
&lt;li&gt;&lt;code&gt;MPI_Issend()&lt;/code&gt; 非阻塞同步发送，类似 &lt;code&gt;MPI_Isend()&lt;/code&gt; 只是 &lt;code&gt;MPI_Probe()&lt;/code&gt; 会确定接收方已经收到消息&lt;/li&gt;
&lt;li&gt;&lt;code&gt;MPI_Test()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;MPI_Testany()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;MPI_Testall()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;MPI_Testsome()&lt;/code&gt;
&lt;ol class="org-ol"&gt;
&lt;li&gt;检查非阻塞收发操作的状态，输出值 &lt;code&gt;flag&lt;/code&gt; 为 &lt;code&gt;0&lt;/code&gt; 表示没完成， &lt;code&gt;1&lt;/code&gt; 表示已完成&lt;/li&gt;
&lt;/ol&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;MPI_Iprobe()&lt;/code&gt; 进行非阻塞测试, 如果消息已经到了 &lt;code&gt;flag&lt;/code&gt; 为 &lt;code&gt;1&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-orge3749a5" class="outline-3"&gt;
&lt;h3 id="orge3749a5"&gt;集体通信&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-orge3749a5"&gt;

&lt;div id="org343b540" class="figure"&gt;
&lt;p&gt;&lt;img src="https://chimez.github.io/img/MPI:_Message_Passing_Interface/2021-07-04_18-47-40_collective_comm.gif" alt="nil"&gt;
&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;
集体通信操作的类型有
&lt;/p&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;&lt;b&gt;同步&lt;/b&gt; 阻塞直到所有进程都到达同步点&lt;/li&gt;
&lt;li&gt;&lt;b&gt;数据移动&lt;/b&gt; broadcast, scatter, gather, all to all&lt;/li&gt;
&lt;li&gt;&lt;b&gt;集体计算(归约)&lt;/b&gt; min, max, add, multiply 等&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;

&lt;div id="outline-container-org2ec646c" class="outline-4"&gt;
&lt;h4 id="org2ec646c"&gt;常用集体通信函数&lt;/h4&gt;
&lt;div class="outline-text-4" id="text-org2ec646c"&gt;
&lt;ol class="org-ol"&gt;
&lt;li&gt;&lt;code&gt;MPI_Barrier (comm)&lt;/code&gt; 同步所有进程&lt;/li&gt;
&lt;li&gt;&lt;code&gt;MPI_Bcast (&amp;amp;buffer,count,datatype,root,comm)&lt;/code&gt; 将数据从 &lt;code&gt;root&lt;/code&gt; 进程广播到所有进程&lt;/li&gt;
&lt;li&gt;&lt;code&gt;MPI_Scatter (&amp;amp;sendbuf,sendcnt,sendtype,&amp;amp;recvbuf,recvcnt,recvtype,root,comm)&lt;/code&gt; 将数据分散到所有进程&lt;/li&gt;
&lt;li&gt;&lt;code&gt;MPI_Gather (&amp;amp;sendbuf,sendcnt,sendtype,&amp;amp;recvbuf,recvcount,recvtype,root,comm)&lt;/code&gt; 从所有进程获取数据到 &lt;code&gt;root&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;MPI_Allgather (&amp;amp;sendbuf,sendcount,sendtype,&amp;amp;recvbuf,recvcount,recvtype,comm)&lt;/code&gt; 所有进程都获得总的数据&lt;/li&gt;
&lt;li&gt;&lt;code&gt;MPI_Reduce (&amp;amp;sendbuf,&amp;amp;recvbuf,count,datatype,op,root,comm)&lt;/code&gt; 执行一个归约操作 &lt;code&gt;op&lt;/code&gt; 到进程 &lt;code&gt;root&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;MPI_Allreduce (&amp;amp;sendbuf,&amp;amp;recvbuf,count,datatype,op,comm)&lt;/code&gt; 执行归约操作到所有进程&lt;/li&gt;
&lt;li&gt;&lt;code&gt;MPI_Reduce_scatter (&amp;amp;sendbuf,&amp;amp;recvbuf,recvcount,datatype,op,comm)&lt;/code&gt; 先 reduce 再 scatter&lt;/li&gt;
&lt;li&gt;&lt;code&gt;MPI_Alltoall (&amp;amp;sendbuf,sendcount,sendtype,&amp;amp;recvbuf,recvcnt,recvtype,comm)&lt;/code&gt; 每个进程都执行 scatter&lt;/li&gt;
&lt;li&gt;&lt;code&gt;MPI_Scan (&amp;amp;sendbuf,&amp;amp;recvbuf,count,datatype,op,comm)&lt;/code&gt; 扫描操作&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-org027e387" class="outline-3"&gt;
&lt;h3 id="org027e387"&gt;自定义数据类型&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-org027e387"&gt;
&lt;p&gt;
用户定义的数据类型，称作 &lt;b&gt;derived data types&lt;/b&gt;
&lt;/p&gt;

&lt;ol class="org-ol"&gt;
&lt;li&gt;&lt;code&gt;MPI_Type_contiguous (count,oldtype,&amp;amp;newtype)&lt;/code&gt; 创建一个新的数据类型，是 &lt;code&gt;count&lt;/code&gt; 个旧类型数据的组合&lt;/li&gt;
&lt;li&gt;&lt;code&gt;MPI_Type_vector (count,blocklength,stride,oldtype,&amp;amp;newtype)&lt;/code&gt; 与 &lt;code&gt;MPI_Type_contiguous&lt;/code&gt; 相同，只不过每个数据间可以有间隔&lt;/li&gt;
&lt;li&gt;&lt;code&gt;MPI_Type_indexed (count,blocklens[],offsets[],old_type,&amp;amp;newtype)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;MPI_Type_create_struct&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;MPI_Type_get_extent&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;MPI_Type_commit (&amp;amp;datatype)&lt;/code&gt; 向系统提交类型&lt;/li&gt;
&lt;li&gt;&lt;code&gt;MPI_Type_free (&amp;amp;datatype)&lt;/code&gt; 释放指定类型的对象&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;

&lt;div id="outline-container-org5d03df9" class="outline-4"&gt;
&lt;h4 id="org5d03df9"&gt;自定义结构体&lt;/h4&gt;
&lt;div class="outline-text-4" id="text-org5d03df9"&gt;
&lt;p&gt;
&lt;code&gt;MPI_Type_create_struct(count, array_of_blocklengths, array_of_displacements, array_of_types, newtype)&lt;/code&gt;
&lt;/p&gt;
&lt;ol class="org-ol"&gt;
&lt;li&gt;&lt;code&gt;count&lt;/code&gt; 结构体中的元素数，也是下面三个数组的长度&lt;/li&gt;
&lt;li&gt;&lt;code&gt;array_of_blocklengths&lt;/code&gt; 每个块中的元素个数&lt;/li&gt;
&lt;li&gt;&lt;code&gt;array_of_displacements&lt;/code&gt; 每个块的偏移量&lt;/li&gt;
&lt;li&gt;&lt;code&gt;array_of_types&lt;/code&gt; 每个块的类型&lt;/li&gt;
&lt;li&gt;&lt;code&gt;newtype&lt;/code&gt; 输出&lt;/li&gt;
&lt;/ol&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;struct&lt;/span&gt; &lt;span class="nc"&gt;object&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;	&lt;/span&gt;&lt;span class="kt"&gt;char&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;	&lt;/span&gt;&lt;span class="kt"&gt;double&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;	&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;};&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;MPI_Datatype&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;newtype&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;object_len&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;blocklengths&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;MPI_Datatype&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;types&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;MPI_Aint&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;displacements&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;MPI_Aint&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;current_displacement&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;blocklength&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;types&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;MPI_CHAR&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;displacements&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;offsetof&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;struct&lt;/span&gt; &lt;span class="nc"&gt;object&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;blocklength&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;types&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;MPI_DOUBLE&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;displacements&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;offsetof&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;struct&lt;/span&gt; &lt;span class="nc"&gt;object&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;blocklength&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;types&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;MPI_INT&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;displacements&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;offsetof&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;struct&lt;/span&gt; &lt;span class="nc"&gt;object&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;MPI_Type_create_struct&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;object_len&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;blocklengths&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;displacements&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;types&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;newtype&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;MPI_Type_commit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;newtype&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;struct&lt;/span&gt; &lt;span class="nc"&gt;object&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;o&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;proc_id&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;	&lt;/span&gt;&lt;span class="n"&gt;MPI_Send&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;o&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;newtype&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;comm&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;proc_id&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;	&lt;/span&gt;&lt;span class="n"&gt;MPI_Recv&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;o&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;newtype&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;comm&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;MPI_STATUS_IGNORE&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;MPI_Type_free&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;newtype&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-org88725cc" class="outline-3"&gt;
&lt;h3 id="org88725cc"&gt;组和通信器管理&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-org88725cc"&gt;
&lt;p&gt;
&lt;b&gt;group&lt;/b&gt; 组是一些进程的有序集合，每个进程编号从 0 到 N-1, &lt;b&gt;communicator&lt;/b&gt; 通信器是一组需要相互通信的进程，每个组都有一个通信器。从编程的角度看，组是用来指定哪些进程相互通信，进而创建通信器的。
&lt;/p&gt;

&lt;p&gt;
典型的过程：
&lt;/p&gt;
&lt;ol class="org-ol"&gt;
&lt;li&gt;使用 &lt;code&gt;MPI_Comm_group()&lt;/code&gt; 从 &lt;code&gt;MPI_COMM_WORLD&lt;/code&gt; 中取出全局组的句柄&lt;/li&gt;
&lt;li&gt;使用 &lt;code&gt;MPI_Group_incl()&lt;/code&gt; 从全局组的子集中创建新的组&lt;/li&gt;
&lt;li&gt;使用 &lt;code&gt;MPI_Comm_create()&lt;/code&gt; 为新的组创建通信器&lt;/li&gt;
&lt;li&gt;使用 &lt;code&gt;MPI_Comm_rank()&lt;/code&gt; 确定新的通信器中的 rank&lt;/li&gt;
&lt;li&gt;进行通信&lt;/li&gt;
&lt;li&gt;使用 &lt;code&gt;MPI_Comm_free()&lt;/code&gt; 和 &lt;code&gt;MPI_Group_free()&lt;/code&gt; 释放不用的组和通信器对象&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;

&lt;div id="outline-container-orgef037d2" class="outline-4"&gt;
&lt;h4 id="orgef037d2"&gt;基本通信器&lt;/h4&gt;
&lt;div class="outline-text-4" id="text-orgef037d2"&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;&lt;code&gt;MPI_COMM_WORLD&lt;/code&gt; 全部的进程&lt;/li&gt;
&lt;li&gt;&lt;code&gt;MPI_COMM_SELF&lt;/code&gt; 只包含当前进程&lt;/li&gt;
&lt;li&gt;&lt;code&gt;MPI_COMM_NULL&lt;/code&gt; 无效通信器，用于一些函数的错误码&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;
通信器的类型是 &lt;code&gt;MPI_Comm&lt;/code&gt;
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-orgd924c33" class="outline-4"&gt;
&lt;h4 id="orgd924c33"&gt;复制通信器&lt;/h4&gt;
&lt;div class="outline-text-4" id="text-orgd924c33"&gt;
&lt;p&gt;
复制一个一样的通信器，主要用于库函数编写时防止修改全局参数    
&lt;/p&gt;

&lt;ol class="org-ol"&gt;
&lt;li&gt;&lt;code&gt;MPI_Comm_dup()&lt;/code&gt; 复制一个通信器&lt;/li&gt;
&lt;li&gt;&lt;code&gt;MPI_Comm_idup()&lt;/code&gt; 复制通信器，非阻塞&lt;/li&gt;
&lt;li&gt;&lt;code&gt;MPI_Comm_dup_with_info()&lt;/code&gt; 复制通信器并传递 info&lt;/li&gt;
&lt;li&gt;&lt;code&gt;MPI_Comm_idup_with_info()&lt;/code&gt; 复制通信器并传递 info, 非阻塞&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-orgd2fd205" class="outline-4"&gt;
&lt;h4 id="orgd2fd205"&gt;划分通信器&lt;/h4&gt;
&lt;div class="outline-text-4" id="text-orgd2fd205"&gt;
&lt;p&gt;
使用 &lt;code&gt;MPI_Comm_split(comm, color, key, newcomm)&lt;/code&gt;  将 &lt;code&gt;comm&lt;/code&gt; 中有相同 &lt;code&gt;color&lt;/code&gt; 的进程组成一个新的通信器 &lt;code&gt;newcomm&lt;/code&gt;, 新通信器中的 rank 由 &lt;code&gt;key&lt;/code&gt; 指定
&lt;/p&gt;

&lt;p&gt;
注意
&lt;/p&gt;
&lt;ol class="org-ol"&gt;
&lt;li&gt;代码会在所有进程中执行，所以只要进程中生成自己的 &lt;code&gt;color&lt;/code&gt; 和 &lt;code&gt;key&lt;/code&gt; ,返回的通信器就包括这些进程&lt;/li&gt;
&lt;li&gt;一般新通信器中的 &lt;code&gt;rank&lt;/code&gt; 跟全局的保存一致就行了， &lt;code&gt;MPI_Comm_rank(MPI_COMM_WORLD, &amp;amp;my_key)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;MPI_Comm_spawn()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;MPI_Comm_free()&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-org3d05369" class="outline-4"&gt;
&lt;h4 id="org3d05369"&gt;从组创建通信器&lt;/h4&gt;
&lt;div class="outline-text-4" id="text-org3d05369"&gt;
&lt;p&gt;
组的类型是 &lt;code&gt;MPI_Group&lt;/code&gt;
&lt;/p&gt;

&lt;ol class="org-ol"&gt;
&lt;li&gt;&lt;code&gt;MPI_Comm_group()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;MPI_Group_incl(group, n, ranks, newgroup)&lt;/code&gt; 将组中 &lt;code&gt;ranks&lt;/code&gt; 的进程添加到新组&lt;/li&gt;
&lt;li&gt;&lt;code&gt;MPI_Group_excl(group, n, ranks, newgroup)&lt;/code&gt; 除了 &lt;code&gt;ranks&lt;/code&gt; 以外的进程添加到新组&lt;/li&gt;
&lt;li&gt;&lt;code&gt;MPI_Group_difference()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;MPI_Group_union()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;MPI_Group_intersection()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;MPI_Group_difference()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;MPI_Group_size()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;MPI_Group_rank()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;MPI_Comm_create_group()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;MPI_Comm_create(comm, group, newcomm)&lt;/code&gt; 从组创建通信器&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-orge2eb199" class="outline-4"&gt;
&lt;h4 id="orge2eb199"&gt;通信器间的通信器&lt;/h4&gt;
&lt;div class="outline-text-4" id="text-orge2eb199"&gt;
&lt;p&gt;
&lt;code&gt;MPI_Intercomm_create(local_comm, local_leader, peer_comm, remote_leader, tag, newintercomm)&lt;/code&gt;
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-orgf5b03fd" class="outline-3"&gt;
&lt;h3 id="orgf5b03fd"&gt;虚拟拓扑&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-orgf5b03fd"&gt;
&lt;p&gt;
MPI 的术语 &lt;b&gt;virtual topologies&lt;/b&gt; 指的是一些进程相互连接构成一个几何形状，这个网络拓扑是虚拟的，与物理实际的连接无关。
&lt;/p&gt;

&lt;p&gt;
当特殊的通信模式与一个拓扑结果相匹配时 MPI 虚拟拓扑就很有用了。
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-org158df61" class="outline-3"&gt;
&lt;h3 id="org158df61"&gt;单边通信&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-org158df61"&gt;
&lt;/div&gt;
&lt;div id="outline-container-org40d22e7" class="outline-4"&gt;
&lt;h4 id="org40d22e7"&gt;基本概念&lt;/h4&gt;
&lt;div class="outline-text-4" id="text-org40d22e7"&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;Remote Memory Access(RMA), Remote Direct Momory Access (RDMA), 远程内存访问
&lt;ul class="org-ul"&gt;
&lt;li&gt;指的是两个进程 origin 和 target, origin 发起动作 put/get, 访问 target 的内存&lt;/li&gt;
&lt;li&gt;之所以叫单边通信，是因为 target 进程完全不知道发生了什么&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;window
&lt;ul class="org-ul"&gt;
&lt;li&gt;单边通信只能访问 target 进程所指定的一块内存，称为 window&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;distributed shared memory, virtual shared memory
&lt;ul class="org-ul"&gt;
&lt;li&gt;是除了 window 之外的另一种实现远程内存访问的方法&lt;/li&gt;
&lt;li&gt;只有所谓的 Partitioned Global Address Space(PGAS)语言支持，例如 Unified Parallel C (UPC)&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;active RMA 和 passive RMA
&lt;ul class="org-ul"&gt;
&lt;li&gt;active RMA 也叫做 active target synchronization, target 进程设置一个时间周期(epoch)，在这其中 window 可以被访问，类似于同步数据转移&lt;/li&gt;
&lt;li&gt;passive RMA 也叫做 passive target synchronization, target 进程不对 window 的访问做限制，这种方式很高效，但是非常难 debug 并且很容易死锁&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-orgc18088d" class="outline-4"&gt;
&lt;h4 id="orgc18088d"&gt;窗口&lt;/h4&gt;
&lt;div class="outline-text-4" id="text-orgc18088d"&gt;
&lt;p&gt;
用于单边通信的内存区域就是窗口，变量类型为 &lt;code&gt;MPI_Win&lt;/code&gt;, 进程可以向其中存取任何东西
&lt;/p&gt;

&lt;p&gt;
说明
&lt;/p&gt;
&lt;ol class="org-ol"&gt;
&lt;li&gt;窗口是定义在通信器上的，创建窗口操作是集体通信，即窗口的不同部分被不同的进程所拥有&lt;/li&gt;
&lt;li&gt;每个进程的窗口大小独立设置，可以设为 0&lt;/li&gt;
&lt;li&gt;窗口的内存分配和释放要显式进行&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;
常用函数
&lt;/p&gt;
&lt;ol class="org-ol"&gt;
&lt;li&gt;&lt;code&gt;MPI_Win_allocate()&lt;/code&gt; 分配窗口的内存&lt;/li&gt;
&lt;li&gt;&lt;code&gt;MPI_Win_free()&lt;/code&gt; 释放内存&lt;/li&gt;
&lt;li&gt;&lt;code&gt;MPI_Win_create()&lt;/code&gt; 基于指定的 buffer 创建窗口&lt;/li&gt;
&lt;li&gt;&lt;code&gt;MPI_Win_allocate_shared()&lt;/code&gt; 在共享内存的通信器上创建窗口&lt;/li&gt;
&lt;li&gt;&lt;code&gt;MPI_Win_create_dynamic()&lt;/code&gt; 创建窗口，但不分配内存&lt;/li&gt;
&lt;/ol&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;MPI_Info&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;info&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;MPI_Win&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;window&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;MPI_Win_allocate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;size&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;disp_unit&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;info&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;comm&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;memory&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;window&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="cm"&gt;/* 进行操作 */&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;MPI_Win_free&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;window&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-orgdfc22e1" class="outline-4"&gt;
&lt;h4 id="orgdfc22e1"&gt;动态分配内存&lt;/h4&gt;
&lt;div class="outline-text-4" id="text-orgdfc22e1"&gt;
&lt;ol class="org-ol"&gt;
&lt;li&gt;&lt;code&gt;MPI_Win_create_dynamic(MPI_Info info, MPI_Comm comm, MPI_Win *win)&lt;/code&gt;
&lt;ol class="org-ol"&gt;
&lt;li&gt;创建窗口，可以向其中动态的加入内存&lt;/li&gt;
&lt;/ol&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;int MPI_Win_free(MPI_Win *win)&lt;/code&gt;
&lt;ol class="org-ol"&gt;
&lt;li&gt;释放窗口的内存&lt;/li&gt;
&lt;/ol&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;int MPI_Alloc_mem(MPI_Aint size, MPI_Info info, void *baseptr)&lt;/code&gt;
&lt;ol class="org-ol"&gt;
&lt;li&gt;分配内存&lt;/li&gt;
&lt;li&gt;&lt;code&gt;size&lt;/code&gt; 是内存大小&lt;/li&gt;
&lt;li&gt;&lt;code&gt;baseptr&lt;/code&gt; 是输出的指针&lt;/li&gt;
&lt;li&gt;&lt;code&gt;info&lt;/code&gt; 可以是 &lt;code&gt;MPI_INFO_NULL&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;int MPI_Free_mem(void *base)&lt;/code&gt;
&lt;ol class="org-ol"&gt;
&lt;li&gt;释放分配的内存&lt;/li&gt;
&lt;/ol&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;MPI_Win_attach(MPI_Win win, void *base, MPI_Aint size)&lt;/code&gt;
&lt;ol class="org-ol"&gt;
&lt;li&gt;向窗口中添加内存&lt;/li&gt;
&lt;li&gt;&lt;code&gt;win&lt;/code&gt; 必须是 &lt;code&gt;MPI_Win_create_dynamic()&lt;/code&gt; 创建的窗口&lt;/li&gt;
&lt;li&gt;窗口中的内存就是这里指针的内存，没有复制&lt;/li&gt;
&lt;/ol&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;MPI_Win_detach(MPI_Win win, void *base)&lt;/code&gt;
&lt;ol class="org-ol"&gt;
&lt;li&gt;从窗口中去掉添加的内存&lt;/li&gt;
&lt;/ol&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;int MPI_Win_lock(int lock_type, int rank, int assert, MPI_Win win)&lt;/code&gt;
&lt;ol class="org-ol"&gt;
&lt;li&gt;对窗口整体加锁&lt;/li&gt;
&lt;li&gt;&lt;code&gt;lock_type&lt;/code&gt; 是 &lt;code&gt;MPI_LOCK_EXCLUSIVE&lt;/code&gt; 或 &lt;code&gt;MPI_LOCK_SHARED&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;rank&lt;/code&gt; 是获得锁的进程&lt;/li&gt;
&lt;li&gt;&lt;code&gt;assert&lt;/code&gt; 是用于做优化的参数，不需要就设 &lt;code&gt;assert=0&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;int MPI_Win_unlock(int rank, MPI_Win win)&lt;/code&gt;
&lt;ol class="org-ol"&gt;
&lt;li&gt;解锁&lt;/li&gt;
&lt;/ol&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;int MPI_Get_address(const void *location, MPI_Aint *address)&lt;/code&gt;
&lt;ol class="org-ol"&gt;
&lt;li&gt;获得调用内存中位置的地址&lt;/li&gt;
&lt;li&gt;应该用这个函数获得的 &lt;code&gt;MPI_Alloc_mem()&lt;/code&gt; 分配的地址作为值广播给其它需要用到这个值的进程&lt;/li&gt;
&lt;li&gt;对于在窗口中的指针，这里获得的地址就是偏移量&lt;/li&gt;
&lt;li&gt;可以把偏移量看做是窗口中的指针&lt;/li&gt;
&lt;/ol&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;MPI_Put(const void *origin_addr, int origin_count, MPI_Datatype origin_datatype, int target_rank, MPI_Aint target_disp, int target_count, MPI_Datatype target_datatype, MPI_Win win)&lt;/code&gt;
&lt;ol class="org-ol"&gt;
&lt;li&gt;从 &lt;code&gt;origin_addr&lt;/code&gt; 复制内存到 &lt;code&gt;target_rank&lt;/code&gt; 进程的从 &lt;code&gt;win&lt;/code&gt; 窗口的偏移 &lt;code&gt;target_disp&lt;/code&gt; 开始的地址&lt;/li&gt;
&lt;/ol&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;MPI_Get(void *origin_addr, int origin_count, MPI_Datatype origin_datatype, int target_rank, MPI_Aint target_disp, int target_count, MPI_Datatype target_datatype, MPI_Win win)&lt;/code&gt;
&lt;ol class="org-ol"&gt;
&lt;li&gt;从 &lt;code&gt;target_rank&lt;/code&gt; 进程的 &lt;code&gt;win&lt;/code&gt; 窗口偏移 &lt;code&gt;target_disp&lt;/code&gt; 复制内存到 &lt;code&gt;origin_addr&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;int MPI_Compare_and_swap(const void *origin_addr, const void *compare_addr, void *result_addr, MPI_Datatype datatype, int target_rank, MPI_Aint target_disp, MPI_Win win)&lt;/code&gt;
&lt;ol class="org-ol"&gt;
&lt;li&gt;比较并交换，原子操作&lt;/li&gt;
&lt;li&gt;比较当前内存中的旧值 &lt;code&gt;*result_addr&lt;/code&gt; 和之前读取到的旧值 &lt;code&gt;*compare_addr&lt;/code&gt; ，如果一样，则说明中间内存未被修改过，那么就用新值 &lt;code&gt;*origin_addr&lt;/code&gt; 替换旧值 &lt;code&gt;*result_addr&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;被修改的值属于 &lt;code&gt;target_rank&lt;/code&gt; 进程&lt;/li&gt;
&lt;li&gt;&lt;code&gt;target_disp&lt;/code&gt; 是从窗口的起点到 &lt;code&gt;target_rank&lt;/code&gt; 进程中被替换的内存 &lt;code&gt;result_addr&lt;/code&gt; 的起点之间的偏移量&lt;/li&gt;
&lt;/ol&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;int MPI_Win_fence(int assert, MPI_Win win)&lt;/code&gt;
&lt;ol class="org-ol"&gt;
&lt;li&gt;同步窗口在所有进程中&lt;/li&gt;
&lt;/ol&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;
参考：
&lt;/p&gt;
&lt;ol class="org-ol"&gt;
&lt;li&gt;这里实现了一个链表 &lt;a href="https://svn.mcs.anl.gov/repos/mpi/mpich2/trunk/test/mpi/rma/linked_list.c"&gt;https://svn.mcs.anl.gov/repos/mpi/mpich2/trunk/test/mpi/rma/linked_list.c&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;指针的内存要在进程中自己释放，窗口中实际没有保存数据&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;
例子
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="cm"&gt;/* 创建窗口 */&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;MPI_Win&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;win&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;MPI_Win_create_dynamic&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;MPI_INFO_NULL&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;MPI_COMM_WORLD&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;win&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="cm"&gt;/* 分配内存，并把它附加到窗口中，同时获得窗口中对应的偏移量，也就是窗口中的指针 */&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;i_ptr&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;MPI_Alloc_mem&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;sizeof&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;MPI_INFO_NULL&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;i_ptr&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;MPI_Win_attach&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;win&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;i_ptr&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;sizeof&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;MPI_Aint&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;i_disp&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;MPI_Get_address&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i_ptr&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;i_disp&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;i_ptr&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;proc_rank&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;printf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"%d, i_ptr=%p, %d, i_disp=%ld&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;proc_rank&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;i_ptr&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;i_ptr&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;i_disp&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;printf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"i ptr dead&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="cm"&gt;/* 读数据 */&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;MPI_Win_lock&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;MPI_LOCK_EXCLUSIVE&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;proc_rank&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;win&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;MPI_Get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;MPI_INT&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;proc_rank&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;i_disp&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;MPI_INT&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;win&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;printf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"%d: get= %d&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;proc_rank&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;MPI_Win_unlock&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;proc_rank&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;win&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="cm"&gt;/* 写数据 */&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;MPI_Win_lock&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;MPI_LOCK_EXCLUSIVE&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;proc_rank&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;win&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;put&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;proc_rank&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;MPI_Put&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;put&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;MPI_INT&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;proc_rank&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;i_disp&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;MPI_INT&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;win&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;MPI_Win_unlock&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;proc_rank&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;win&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="cm"&gt;/* 同步 */&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;MPI_Win_fence&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;win&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;MPI_Win_lock&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;MPI_LOCK_EXCLUSIVE&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;proc_rank&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;win&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;MPI_Get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;MPI_INT&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;proc_rank&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;i_disp&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;MPI_INT&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;win&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;printf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"%d: get again= %d&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;proc_rank&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;MPI_Win_unlock&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;proc_rank&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;win&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="cm"&gt;/* 释放内存时，要用本地指针释放 */&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;MPI_Free_mem&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i_ptr&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;MPI_Win_free&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;win&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-org6ee22d6" class="outline-4"&gt;
&lt;h4 id="org6ee22d6"&gt;共享内存&lt;/h4&gt;
&lt;div class="outline-text-4" id="text-org6ee22d6"&gt;
&lt;ol class="org-ol"&gt;
&lt;li&gt;&lt;code&gt;int MPI_Comm_split_type(MPI_Comm comm, int split_type, int key, MPI_Info info, MPI_Comm *newcomm)&lt;/code&gt;
&lt;ol class="org-ol"&gt;
&lt;li&gt;获得同一节点上的进程的通信器&lt;/li&gt;
&lt;li&gt;&lt;code&gt;split_type = MPI_COMM_TYPE_SHARED&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;comm = MPI_COMM_WORLD&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;key = proc_rank_world&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;int MPI_Win_allocate_shared (MPI_Aint size, int disp_unit, MPI_Info info, MPI_Comm comm, void *baseptr, MPI_Win *win)&lt;/code&gt;
&lt;ol class="org-ol"&gt;
&lt;li&gt;创建共享内存数据&lt;/li&gt;
&lt;li&gt;&lt;code&gt;size&lt;/code&gt; 是数据的比特大小，即 个数 * sizeof(type)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;disp_unit&lt;/code&gt; 是单个数据的比特大小，即 sizeof(type)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;baseptr&lt;/code&gt; 是本地数据的指针&lt;/li&gt;
&lt;li&gt;这个内存会在 &lt;code&gt;MPI_Win_free()&lt;/code&gt; 时释放掉&lt;/li&gt;
&lt;/ol&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;int MPI_Win_shared_query (MPI_Win win, int rank, MPI_Aint *size, int *disp_unit, void *baseptr)&lt;/code&gt;
&lt;ol class="org-ol"&gt;
&lt;li&gt;获得属于 &lt;code&gt;rank&lt;/code&gt; 进程的内存在当前进程中的地址&lt;/li&gt;
&lt;li&gt;&lt;code&gt;size&lt;/code&gt; win 大小&lt;/li&gt;
&lt;li&gt;&lt;code&gt;disp_unit&lt;/code&gt; 单位数据大小&lt;/li&gt;
&lt;li&gt;&lt;code&gt;baseptr&lt;/code&gt; 当前进程中用来访问这个内存的指针&lt;/li&gt;
&lt;/ol&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;proc_rank&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;MPI_Comm_rank&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;MPI_COMM_WORLD&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;proc_rank&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="cm"&gt;/* 获得同一节点上的通信器，以及对应的 rank */&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;MPI_Comm&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;comm_node&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;proc_rank_node&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;MPI_Comm_split_type&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;MPI_COMM_WORLD&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;MPI_COMM_TYPE_SHARED&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;proc_rank&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;MPI_INFO_NULL&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;comm_node&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;MPI_Comm_rank&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;comm_node&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;proc_rank_node&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="cm"&gt;/* 获得不同节点上编号为 0 的进程之间的通信器 */&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;MPI_Comm&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;comm_0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;proc_rank_0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;MPI_Comm_split&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;MPI_COMM_WORLD&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;proc_rank_node&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;proc_rank&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;comm_0&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;MPI_Comm_rank&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;comm_0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;proc_rank_0&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="cm"&gt;/* 分配内存, 只有编号为 0 的进程才分配，其它进程的大小是 0 */&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;MPI_Win&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;data_win&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;win_size&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;proc_rank&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;	&lt;/span&gt;&lt;span class="n"&gt;win_size&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;	&lt;/span&gt;&lt;span class="n"&gt;win_size&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;MPI_Win_allocate_shared&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;win_size&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;sizeof&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;MPI_INFO_NULL&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;comm_node&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;data_win&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="cm"&gt;/* 在全局编号 0 的进程上创建数据 */&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;proc_rank&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;	&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;MPI_Barrier&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;comm_node&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;MPI_Win_fence&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;data_win&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="cm"&gt;/* 分享数据给所有节点上编号 0 的进程 */&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;MPI_Bcast&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;MPI_INT&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;comm_0&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="cm"&gt;/* 其它进程获得节点编号 0 进程上的指针 */&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;MPI_Aint&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;size&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;disp_uint&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;MPI_Win_shared_query&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;data_win&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;size&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;disp_unit&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;data_0&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="cm"&gt;/* 释放内存 */&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;MPI_Win_free&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;data_win&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-org87e1c45" class="outline-3"&gt;
&lt;h3 id="org87e1c45"&gt;混合多线程&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-org87e1c45"&gt;
&lt;p&gt;
混合多线程的策略：
&lt;/p&gt;
&lt;ol class="org-ol"&gt;
&lt;li&gt;纯 MPI&lt;/li&gt;
&lt;li&gt;每个节点一个 MPI 进程，全部的线程&lt;/li&gt;
&lt;li&gt;每个 socket 一个 MPI 进程，和剩下的线程，比如20核的节点，每个节点两个进程，每个进程10线程&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;
大量实践认为混合多线程并不会比纯 MPI 速度快。
&lt;/p&gt;
&lt;/div&gt;

&lt;div id="outline-container-org02e0b2d" class="outline-4"&gt;
&lt;h4 id="org02e0b2d"&gt;线程初始化&lt;/h4&gt;
&lt;div class="outline-text-4" id="text-org02e0b2d"&gt;
&lt;p&gt;
使用 &lt;code&gt;MPI_Init_thread()&lt;/code&gt; 初始化带有线程的 MPI，可用的选项有（注意并不是所有MPI实现都提供下面全部的模式）
&lt;/p&gt;
&lt;ol class="org-ol"&gt;
&lt;li&gt;&lt;code&gt;MPI_THREAD_SINGLE&lt;/code&gt; 每个进程一个线程&lt;/li&gt;
&lt;li&gt;&lt;code&gt;MPI_THREAD_FUNNELED&lt;/code&gt; 每个进程有多个线程，但只有主线程可以调用 MPI 函数&lt;/li&gt;
&lt;li&gt;&lt;code&gt;MPI_THREAD_SERIALIZED&lt;/code&gt; 使用多个线程，每个线程都可以调用 MPI，但是只有一个线程可以调用同步通信&lt;/li&gt;
&lt;li&gt;&lt;code&gt;MPI_THREAD_MULTIPLE&lt;/code&gt; 使用多个线程，没有任何限制&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;
使用 &lt;code&gt;MPI_Query_thread()&lt;/code&gt; 来确定初始化之后提供的是哪种模式
&lt;/p&gt;

&lt;p&gt;
使用 &lt;code&gt;MPI_Is_thread_main()&lt;/code&gt; 来确定线程是否是主线程
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-orgded29be" class="outline-2"&gt;
&lt;h2 id="orgded29be"&gt;设计模式&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-orgded29be"&gt;
&lt;/div&gt;
&lt;div id="outline-container-org3a861d7" class="outline-3"&gt;
&lt;h3 id="org3a861d7"&gt;为每个节点创建一个通信器&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-org3a861d7"&gt;
&lt;p&gt;
用于创建节点内部的共享内存窗口
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="cm"&gt;/* 获得同一节点上的通信器，以及对应的 rank */&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="n"&gt;MPI_Comm&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;comm_node&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;proc_rank_node&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="n"&gt;MPI_Comm_split_type&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;MPI_COMM_WORLD&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;MPI_COMM_TYPE_SHARED&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;proc_rank&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;MPI_INFO_NULL&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;comm_node&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="n"&gt;MPI_Comm_rank&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;comm_node&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;proc_rank_node&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="cm"&gt;/* 获得不同节点上编号为 0 的进程之间的通信器 */&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="n"&gt;MPI_Comm&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;comm_0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;proc_rank_0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="n"&gt;MPI_Comm_split&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;MPI_COMM_WORLD&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;proc_rank_node&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;proc_rank&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;comm_0&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="n"&gt;MPI_Comm_rank&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;comm_0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;proc_rank_0&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="n"&gt;MPI_Comm_free&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;comm_node&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="n"&gt;MPI_Comm_free&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;comm_0&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-orgfec5271" class="outline-3"&gt;
&lt;h3 id="orgfec5271"&gt;非自旋等待&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-orgfec5271"&gt;
&lt;ol class="org-ol"&gt;
&lt;li&gt;阻塞通信是自旋锁，会一直燃烧 CPU， 为了给某个进程上的多线程任务让出 CPU，需要让其它进程非自旋等待&lt;/li&gt;
&lt;li&gt;使用 &lt;code&gt;MPI_Iprobe()&lt;/code&gt; 非阻塞地探测信号，并在探测周期中 &lt;code&gt;sleep()&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;proc_rank&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="n"&gt;MPI_Comm_rank&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;MPI_COMM_WORLD&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;proc_rank&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;finish&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;false&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="n"&gt;MPI_Request&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;finish_request&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;proc_rank&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="w"&gt;       &lt;/span&gt;&lt;span class="cm"&gt;/* do sth pthread or openmp */&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="w"&gt;       &lt;/span&gt;&lt;span class="n"&gt;finish&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;true&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;       &lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;proc_total&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;       &lt;/span&gt;&lt;span class="n"&gt;MPI_Comm_size&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;MPI_COMM_WORLD&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;proc_total&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;       &lt;/span&gt;&lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;proc_total&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;	   &lt;/span&gt;&lt;span class="n"&gt;MPI_Isend&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;finish&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;MPI_INT&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;MPI_COMM_WORLD&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;finish_request&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;	   &lt;/span&gt;&lt;span class="n"&gt;MPI_Wait&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;finish_request&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;MPI_STATUS_IGNORE&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;       &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;       &lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;flag&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;false&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;       &lt;/span&gt;&lt;span class="n"&gt;MPI_Status&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;finish_status&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="w"&gt;       &lt;/span&gt;&lt;span class="k"&gt;while&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="n"&gt;flag&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;	   &lt;/span&gt;&lt;span class="n"&gt;MPI_Iprobe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;MPI_ANY_TAG&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;MPI_COMM_WORLD&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;flag&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;finish_status&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;	   &lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;flag&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;	       &lt;/span&gt;&lt;span class="n"&gt;MPI_Irecv&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;finish&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;MPI_INT&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;MPI_COMM_WORLD&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;finish_request&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;	       &lt;/span&gt;&lt;span class="n"&gt;MPI_Wait&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;finish_request&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;MPI_STATUS_IGNORE&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;	       &lt;/span&gt;&lt;span class="k"&gt;break&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;	   &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;	   &lt;/span&gt;&lt;span class="n"&gt;sleep&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;       &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-org4a722b7" class="outline-3"&gt;
&lt;h3 id="org4a722b7"&gt;模拟单线程&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-org4a722b7"&gt;
&lt;p&gt;
随便写一个变量，按照顺序一个接一个的发送下去
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;   &lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;mpi4py&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;MPI&lt;/span&gt;

   &lt;span class="n"&gt;comm&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;MPI&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;COMM_WORLD&lt;/span&gt;
   &lt;span class="n"&gt;proc_rank&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;comm&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Get_rank&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
   &lt;span class="n"&gt;proc_num&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;comm&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Get_size&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

   &lt;span class="n"&gt;myturn&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;

   &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;proc_rank&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
       &lt;span class="n"&gt;myturn&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
   &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
       &lt;span class="n"&gt;myturn&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;comm&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;recv&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;source&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;proc_rank&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;tag&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;proc_rank&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

   &lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;proc_rank&lt;/span&gt;&lt;span class="si"&gt;=}&lt;/span&gt;&lt;span class="s2"&gt;, &lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;myturn&lt;/span&gt;&lt;span class="si"&gt;=}&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

   &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;proc_rank&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;proc_num&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
       &lt;span class="n"&gt;comm&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;send&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;myturn&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;dest&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;proc_rank&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;tag&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;proc_rank&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;</description><category>C</category><category>MPI</category><category>parallel</category><guid>https://chimez.github.io/posts/mpi/</guid><pubDate>Sun, 04 Jul 2021 09:00:31 GMT</pubDate></item></channel></rss>