<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="../assets/xml/rss.xsl" media="all"?><rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>chimez's blog (Posts about Programming Language)</title><link>https://chimez.github.io/</link><description></description><atom:link href="https://chimez.github.io/categories/cat_programming-language.xml" rel="self" type="application/rss+xml"></atom:link><language>en</language><copyright>Contents © 2021 &lt;a href="mailto:chimez@163.com"&gt;chimez&lt;/a&gt; </copyright><lastBuildDate>Fri, 01 Oct 2021 12:05:11 GMT</lastBuildDate><generator>Nikola (getnikola.com)</generator><docs>http://blogs.law.harvard.edu/tech/rss</docs><item><title>C Library</title><link>https://chimez.github.io/posts/c-library/</link><dc:creator>chimez</dc:creator><description>&lt;div id="outline-container-orgf3991da" class="outline-2"&gt;
&lt;h2 id="orgf3991da"&gt;C 语言标准库&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-orgf3991da"&gt;
&lt;p&gt;
C89有 15 个头文件， C99 新增了 9 个，一共 24个。
&lt;/p&gt;
&lt;/div&gt;


&lt;div id="outline-container-org4534d14" class="outline-3"&gt;
&lt;h3 id="org4534d14"&gt;标识符命名限制&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-org4534d14"&gt;
&lt;ol class="org-ol"&gt;
&lt;li&gt;由一个下划线和一个大写字母或两个下划线开头的标识符是标准库保留的&lt;/li&gt;
&lt;li&gt;由一个下划线开头的是文件作用域保留的&lt;/li&gt;
&lt;li&gt;标准库中的外部链接标识符都是保留的&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;


&lt;div id="outline-container-org8b8c8be" class="outline-2"&gt;
&lt;h2 id="org8b8c8be"&gt;输入/输出&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-org8b8c8be"&gt;
&lt;p&gt;
绝大部分内容都在 &lt;code&gt;&amp;lt;stdio.h&amp;gt;&lt;/code&gt; 头中
&lt;/p&gt;
&lt;/div&gt;

&lt;div id="outline-container-org00bae6e" class="outline-3"&gt;
&lt;h3 id="org00bae6e"&gt;流&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-org00bae6e"&gt;
&lt;p&gt;
流(stream) 表示任意输入/输出的源或目的地，一般程序都是从一个流获得输入，再通过另一个流输出。
&lt;/p&gt;
&lt;/div&gt;

&lt;div id="outline-container-org3fc9b80" class="outline-4"&gt;
&lt;h4 id="org3fc9b80"&gt;文件指针&lt;/h4&gt;
&lt;div class="outline-text-4" id="text-org3fc9b80"&gt;
&lt;p&gt;
C中访问流是通过文件指针实现的，类型为 &lt;code&gt;FILE *&lt;/code&gt;
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-org866cfa5" class="outline-4"&gt;
&lt;h4 id="org866cfa5"&gt;标准流&lt;/h4&gt;
&lt;div class="outline-text-4" id="text-org866cfa5"&gt;
&lt;ol class="org-ol"&gt;
&lt;li&gt;&lt;code&gt;stdin&lt;/code&gt; 标准输入&lt;/li&gt;
&lt;li&gt;&lt;code&gt;stdout&lt;/code&gt; 标准输出&lt;/li&gt;
&lt;li&gt;&lt;code&gt;stderr&lt;/code&gt; 标准错误&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-org9c25695" class="outline-4"&gt;
&lt;h4 id="org9c25695"&gt;文件类型&lt;/h4&gt;
&lt;div class="outline-text-4" id="text-org9c25695"&gt;
&lt;p&gt;
c中支持两种文件类型
&lt;/p&gt;
&lt;ol class="org-ol"&gt;
&lt;li&gt;文本文件，可分为若干行，并在文件末尾可以有一个特殊标记&lt;/li&gt;
&lt;li&gt;二进制文件&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-orga980b98" class="outline-3"&gt;
&lt;h3 id="orga980b98"&gt;文件操作&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-orga980b98"&gt;
&lt;/div&gt;
&lt;div id="outline-container-orgd84ec6f" class="outline-4"&gt;
&lt;h4 id="orgd84ec6f"&gt;打开文件&lt;/h4&gt;
&lt;div class="outline-text-4" id="text-orgd84ec6f"&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="kt"&gt;FILE&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="nf"&gt;fopen&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;const&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;char&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kr"&gt;restrict&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;filename&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;const&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;char&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kr"&gt;restrict&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;mode&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;ol class="org-ol"&gt;
&lt;li&gt;当文件无法打开时返回 &lt;code&gt;NULL&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;模式中有 "b" 说明是二进制文件&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;
模式说明
&lt;/p&gt;
&lt;ol class="org-ol"&gt;
&lt;li&gt;"r" 读&lt;/li&gt;
&lt;li&gt;"w" 写&lt;/li&gt;
&lt;li&gt;"a" 追加&lt;/li&gt;
&lt;li&gt;"r+" 从文件头开始读和写&lt;/li&gt;
&lt;li&gt;"w+" 读和写文件，覆盖&lt;/li&gt;
&lt;li&gt;&lt;p&gt;
"a+" 读和写文件，追加
&lt;/p&gt;

&lt;p&gt;
常用模式
&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="w"&gt;       &lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="n"&gt;fp&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;fopen&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;filename&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;"r"&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;NULL&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-orgd0da42d" class="outline-4"&gt;
&lt;h4 id="orgd0da42d"&gt;关闭文件&lt;/h4&gt;
&lt;div class="outline-text-4" id="text-orgd0da42d"&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;fclose&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;FILE&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;stream&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;ol class="org-ol"&gt;
&lt;li&gt;成功关闭返回 0，否则返回错误代码 &lt;code&gt;EOF&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/div&gt;


&lt;div id="outline-container-orga4eccd8" class="outline-4"&gt;
&lt;h4 id="orga4eccd8"&gt;为流重新指定文件&lt;/h4&gt;
&lt;div class="outline-text-4" id="text-orga4eccd8"&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="kt"&gt;FILE&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="nf"&gt;freopen&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;const&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;char&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kr"&gt;restrict&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;filename&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;		  &lt;/span&gt;&lt;span class="k"&gt;const&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;char&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kr"&gt;restrict&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;mode&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;		  &lt;/span&gt;&lt;span class="kt"&gt;FILE&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kr"&gt;restrict&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;stream&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-org6e4ce43" class="outline-4"&gt;
&lt;h4 id="org6e4ce43"&gt;临时文件&lt;/h4&gt;
&lt;div class="outline-text-4" id="text-org6e4ce43"&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="cm"&gt;/* 创建临时文件 */&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="kt"&gt;FILE&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="nf"&gt;tmpfile&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;void&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="cm"&gt;/* 获取临时文件的名字 */&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="kt"&gt;char&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="nf"&gt;tmpnam&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;char&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-org9dd1611" class="outline-4"&gt;
&lt;h4 id="org9dd1611"&gt;文件缓冲&lt;/h4&gt;
&lt;div class="outline-text-4" id="text-org9dd1611"&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="cm"&gt;/* 清洗缓冲区 */&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;fflush&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;FILE&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;stream&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="cm"&gt;/* 设置缓冲流 */&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;setvbuf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;FILE&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kr"&gt;restrict&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;stream&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;char&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kr"&gt;restrict&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;buf&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;mode&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;size_t&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;size&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-orgc46c592" class="outline-4"&gt;
&lt;h4 id="orgc46c592"&gt;删除文件&lt;/h4&gt;
&lt;div class="outline-text-4" id="text-orgc46c592"&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="cm"&gt;/* 删除文件 */&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;remove&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;const&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;char&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;filename&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="cm"&gt;/* 重命名文件 */&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;rename&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;const&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;char&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;old&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;const&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;char&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;new&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-orgfde5a82" class="outline-2"&gt;
&lt;h2 id="orgfde5a82"&gt;数学与数值计算&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-orgfde5a82"&gt;
&lt;ol class="org-ol"&gt;
&lt;li&gt;&amp;lt;float.h&amp;gt; 定义浮点类型的范围和精度，其中没有类型和函数&lt;/li&gt;
&lt;li&gt;&amp;lt;limits.h&amp;gt; 定义整数类型的取值范围，其中没有类型和函数&lt;/li&gt;
&lt;li&gt;&amp;lt;math.h&amp;gt; 定义数学计算的函数&lt;/li&gt;
&lt;li&gt;&amp;lt;stdint.h&amp;gt; 整数类型&lt;/li&gt;
&lt;li&gt;&amp;lt;inttypes.h&amp;gt; 整数类型的格式转换&lt;/li&gt;
&lt;li&gt;&amp;lt;complex.h&amp;gt; 复数&lt;/li&gt;
&lt;li&gt;&amp;lt;tgmath.h&amp;gt; 泛型数学&lt;/li&gt;
&lt;li&gt;&amp;lt;fenv.h&amp;gt; 浮点环境&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;

&lt;div id="outline-container-orgfd7a009" class="outline-3"&gt;
&lt;h3 id="orgfd7a009"&gt;错误&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-orgfd7a009"&gt;
&lt;p&gt;
当发生错误时，大多数函数会将一个错误码存储到 &lt;code&gt;errno&lt;/code&gt; 变量中。此外，如果函数返回值大于double类型最大值会返回 &lt;code&gt;HUGE_VAL&lt;/code&gt; 值。
&lt;/p&gt;
&lt;ol class="org-ol"&gt;
&lt;li&gt;定义域错误。当函数的参数超出定义域，会将 &lt;code&gt;EDOM&lt;/code&gt; 存储到 &lt;code&gt;errno&lt;/code&gt; 中&lt;/li&gt;
&lt;li&gt;取值范围错误。当函数返回值超出double范围时，会将 &lt;code&gt;ERANGE&lt;/code&gt; 存储到 &lt;code&gt;errno&lt;/code&gt; 中&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-org0d07d00" class="outline-3"&gt;
&lt;h3 id="org0d07d00"&gt;紧缩(constraction)&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-org0d07d00"&gt;
&lt;p&gt;
C99中新增加了融合乘加 (fused multiply-add) 函数，即
&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;d&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;fma&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;d&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;
这种合并可能会速度更快一点，编译器是否自动进行紧缩可以由 &lt;code&gt;#pragma STDC FP_CONTRACT ON/OFF/DEFAULT&lt;/code&gt; 来控制。
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;


&lt;div id="outline-container-org5515877" class="outline-2"&gt;
&lt;h2 id="org5515877"&gt;字符、字符串与国际化&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-org5515877"&gt;
&lt;ol class="org-ol"&gt;
&lt;li&gt;&amp;lt;ctype.h&amp;gt; 处理字符&lt;/li&gt;
&lt;li&gt;&amp;lt;string.h&amp;gt; 处理字符串&lt;/li&gt;
&lt;li&gt;&amp;lt;locale.h&amp;gt; 本地化&lt;/li&gt;
&lt;li&gt;&amp;lt;iso646.h&amp;gt; 拼写替换&lt;/li&gt;
&lt;li&gt;&amp;lt;wchar.h&amp;gt; 多字节和宽字符工具&lt;/li&gt;
&lt;li&gt;&amp;lt;wctype.h&amp;gt; 宽字符分类和映射工具&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;


&lt;div id="outline-container-orgb6c7660" class="outline-3"&gt;
&lt;h3 id="orgb6c7660"&gt;&amp;lt;string.h&amp;gt;&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-orgb6c7660"&gt;
&lt;p&gt;
提供了5种函数
&lt;/p&gt;
&lt;ol class="org-ol"&gt;
&lt;li&gt;复制: memcpy, memmove, strcpy, strncpy&lt;/li&gt;
&lt;li&gt;拼接: strcat, strncat&lt;/li&gt;
&lt;li&gt;比较: memcmp, strcmp, strcoll, strncmp, strxfrm&lt;/li&gt;
&lt;li&gt;搜索: memchr, strchr, strcpn, strpbrk, strrchr, strspn, strstr, strtok&lt;/li&gt;
&lt;li&gt;其它（初始化、长度）: memset, strlen&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-orgbbcac1b" class="outline-2"&gt;
&lt;h2 id="orgbbcac1b"&gt;错误处理&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-orgbbcac1b"&gt;
&lt;ol class="org-ol"&gt;
&lt;li&gt;&amp;lt;assert.h&amp;gt; 诊断&lt;/li&gt;
&lt;li&gt;&amp;lt;errno.h&amp;gt; 错误&lt;/li&gt;
&lt;li&gt;&amp;lt;signal.h&amp;gt; 信号处理&lt;/li&gt;
&lt;li&gt;&amp;lt;setjmp.h&amp;gt; 非局部跳转&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;

&lt;div id="outline-container-org3ee0d2e" class="outline-3"&gt;
&lt;h3 id="org3ee0d2e"&gt;&amp;lt;assert.h&amp;gt; 诊断&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-org3ee0d2e"&gt;
&lt;p&gt;
assert 是一个宏。当参数值为 0 时，assert 会向 stderr 写消息，并调用 abort 函数中止程序。
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="kt"&gt;void&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;assert&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;scalar&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;expression&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-org953a7f4" class="outline-3"&gt;
&lt;h3 id="org953a7f4"&gt;&amp;lt;errno.h&amp;gt; 错误&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-org953a7f4"&gt;
&lt;p&gt;
错误代码存储在 errno 变量中，每次使用都要把它置零
&lt;/p&gt;

&lt;p&gt;
errno 主要作用是说明错误类型，而不是发生错误
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-org35d8089" class="outline-3"&gt;
&lt;h3 id="org35d8089"&gt;&amp;lt;signal.h&amp;gt; 信号处理&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-org35d8089"&gt;
&lt;/div&gt;
&lt;div id="outline-container-org417df94" class="outline-4"&gt;
&lt;h4 id="org417df94"&gt;信号宏&lt;/h4&gt;
&lt;div class="outline-text-4" id="text-org417df94"&gt;
&lt;p&gt;
UNIX 系统提供了更多信号宏，都是 SIG开头
&lt;/p&gt;
&lt;ol class="org-ol"&gt;
&lt;li&gt;SIGABRT: 异常终止(可能来自abort)&lt;/li&gt;
&lt;li&gt;SIGFPE: 算术错误(除0或溢出)&lt;/li&gt;
&lt;li&gt;SIGILL: 无效指令&lt;/li&gt;
&lt;li&gt;SIGINT: 中断&lt;/li&gt;
&lt;li&gt;SIGSEGV: 无效存储访问&lt;/li&gt;
&lt;li&gt;SIGTERM: 终止请求&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-orgbe27eb7" class="outline-4"&gt;
&lt;h4 id="orgbe27eb7"&gt;signal 函数&lt;/h4&gt;
&lt;div class="outline-text-4" id="text-orgbe27eb7"&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="kt"&gt;void&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;signal&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;sig&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;void&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;func&lt;/span&gt;&lt;span class="p"&gt;)(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="p"&gt;)))(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;signal&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;SIG&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;handler&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;
指定信号的处理函数
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-orgfc78580" class="outline-4"&gt;
&lt;h4 id="orgfc78580"&gt;信号处理函数&lt;/h4&gt;
&lt;div class="outline-text-4" id="text-orgfc78580"&gt;
&lt;ol class="org-ol"&gt;
&lt;li&gt;SIG&lt;sub&gt;DFL&lt;/sub&gt;: 按默认方式处理，实现定义，大多数时候是终止程序&lt;/li&gt;
&lt;li&gt;SIG&lt;sub&gt;IGN&lt;/sub&gt;: 忽略信号&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-orge9f4bfc" class="outline-4"&gt;
&lt;h4 id="orge9f4bfc"&gt;raise 函数&lt;/h4&gt;
&lt;div class="outline-text-4" id="text-orge9f4bfc"&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;raise&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;sig&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;
产生一个信号，0表示调用成功。
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-orgd27bdac" class="outline-3"&gt;
&lt;h3 id="orgd27bdac"&gt;&amp;lt;setjmp.h&amp;gt; 非局部跳转&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-orgd27bdac"&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="cm"&gt;/* 设置跳转位置 */&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;setjmp&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;jmp_buf&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;env&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="cm"&gt;/* 跳转到 val 位置 */&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="kt"&gt;void&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;longjmp&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;jmp_buf&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;env&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;val&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;
可以实现跨函数的跳转
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;


&lt;div id="outline-container-org104a79c" class="outline-2"&gt;
&lt;h2 id="org104a79c"&gt;可变参数&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-org104a79c"&gt;
&lt;p&gt;
&amp;lt;stdarg.h&amp;gt; 头
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="cm"&gt;/* 可变参数类型，其中保存所有的可变参数 */&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="kt"&gt;va_list&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;ap&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="cm"&gt;/* 将 src 中的参数复制到 dest 中 */&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="kt"&gt;void&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;va_copy&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;va_list&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;dest&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;va_list&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;src&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="cm"&gt;/* 开始读取参数列表， parmN 为保存参数个数的变量名 */&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="kt"&gt;void&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;va_start&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;va_list&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;ap&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;parmN&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="cm"&gt;/* 获取一个类型为 type 的参数，类似出栈 */&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="n"&gt;type&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;va_arg&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;va_list&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;ap&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;type&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="cm"&gt;/* 清理参数列表, 每次函数结束前都要用 */&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="kt"&gt;void&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;va_end&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;va_list&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;ap&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-org9d35b23" class="outline-2"&gt;
&lt;h2 id="org9d35b23"&gt;日期和时间&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-org9d35b23"&gt;
&lt;p&gt;
&amp;lt;time.h&amp;gt; 中提供三种类型
&lt;/p&gt;
&lt;ol class="org-ol"&gt;
&lt;li&gt;clock&lt;sub&gt;t&lt;/sub&gt; 按时钟度量&lt;/li&gt;
&lt;li&gt;time&lt;sub&gt;t&lt;/sub&gt; 日历时间&lt;/li&gt;
&lt;li&gt;struct tm 分解时间&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;

&lt;div id="outline-container-org33a3336" class="outline-3"&gt;
&lt;h3 id="org33a3336"&gt;时间处理函数&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-org33a3336"&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="kt"&gt;clock_t&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;clock&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;void&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="kt"&gt;double&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;difftime&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;time_t&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;time1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;time_t&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;time0&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="kt"&gt;time_t&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;mktime&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;struct&lt;/span&gt; &lt;span class="nc"&gt;tm&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;timeptr&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="kt"&gt;time_t&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;time&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;time_t&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;timer&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-org9a5ffae" class="outline-3"&gt;
&lt;h3 id="org9a5ffae"&gt;时间转换函数&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-org9a5ffae"&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="kt"&gt;char&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="nf"&gt;asctime&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;const&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;struct&lt;/span&gt; &lt;span class="nc"&gt;tm&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;timeptr&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="kt"&gt;char&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="nf"&gt;ctime&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;const&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;time_t&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;timer&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="k"&gt;struct&lt;/span&gt; &lt;span class="nc"&gt;tm&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;gmtime&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;const&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;time_t&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;timer&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="k"&gt;struct&lt;/span&gt; &lt;span class="nc"&gt;tm&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;localtime&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;const&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;time_t&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;timer&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="kt"&gt;size_t&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;strftime&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;char&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kr"&gt;restrict&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;size_t&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;maxsize&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;		   &lt;/span&gt;&lt;span class="k"&gt;const&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;char&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kr"&gt;restrict&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;		   &lt;/span&gt;&lt;span class="k"&gt;const&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;struct&lt;/span&gt; &lt;span class="nc"&gt;tm&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kr"&gt;restrict&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;timeptr&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-orga91657a" class="outline-2"&gt;
&lt;h2 id="orga91657a"&gt;实用工具&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-orga91657a"&gt;
&lt;p&gt;
包括
&lt;/p&gt;
&lt;ol class="org-ol"&gt;
&lt;li&gt;数值转换函数: atof, atoi, atol, strtod, strtol, strtoul, atoll, strtof, strtold, strtoll, strtoull&lt;/li&gt;
&lt;li&gt;伪随机序列生成函数: rand, srand&lt;/li&gt;
&lt;li&gt;内存管理函数: malloc, calloc, realloc, free&lt;/li&gt;
&lt;li&gt;与外部通信: abort, atexit, exit, _Exit, getenv, system&lt;/li&gt;
&lt;li&gt;搜索与排序: bsearch, qsort&lt;/li&gt;
&lt;li&gt;整数运算函数: abs, labs, llabs, div, ldiv, lldiv&lt;/li&gt;
&lt;li&gt;多字节/宽字符转换函数&lt;/li&gt;
&lt;li&gt;多字节/宽字符串转换函数&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/div&gt;</description><category>C</category><guid>https://chimez.github.io/posts/c-library/</guid><pubDate>Fri, 26 Mar 2021 08:17:14 GMT</pubDate></item><item><title>C 指针与内存管理</title><link>https://chimez.github.io/posts/c-memory-management/</link><dc:creator>chimez</dc:creator><description>&lt;div id="outline-container-org7b67cf5" class="outline-2"&gt;
&lt;h2 id="org7b67cf5"&gt;动态存储分配&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-org7b67cf5"&gt;
&lt;/div&gt;
&lt;div id="outline-container-orgf847af5" class="outline-3"&gt;
&lt;h3 id="orgf847af5"&gt;内存分配函数&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-orgf847af5"&gt;
&lt;p&gt;
在 &lt;code&gt;&amp;lt;stdlib.h&amp;gt;&lt;/code&gt; 头文件中的
&lt;/p&gt;
&lt;ol class="org-ol"&gt;
&lt;li&gt;&lt;code&gt;malloc&lt;/code&gt; 分配内存，不初始化&lt;/li&gt;
&lt;li&gt;&lt;code&gt;calloc&lt;/code&gt; 分配内存，并清零&lt;/li&gt;
&lt;li&gt;&lt;code&gt;realloc&lt;/code&gt; 调制分配内存大小&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;
内存分配函数返回 &lt;code&gt;void *&lt;/code&gt; 类型，本质上只是内存地址
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-org2969e4c" class="outline-3"&gt;
&lt;h3 id="org2969e4c"&gt;空指针&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-org2969e4c"&gt;
&lt;p&gt;
内存分配函数有可能返回空指针 &lt;code&gt;NULL&lt;/code&gt; ，使用空指针会导致程序崩溃，所以要判断指针是否为空指针。
&lt;/p&gt;

&lt;p&gt;
c语言中空指针为假，非空指针都为真。
&lt;/p&gt;

&lt;p&gt;
常用如下方式进行判断
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;NULL&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;		&lt;/span&gt;&lt;span class="p"&gt;...;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-orge26f356" class="outline-3"&gt;
&lt;h3 id="orge26f356"&gt;malloc&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-orge26f356"&gt;
&lt;p&gt;
原型 &lt;code&gt;void *malloc(size_t size);&lt;/code&gt;
&lt;/p&gt;

&lt;p&gt;
惯用法
&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kt"&gt;double&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;malloc&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;N&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;sizeof&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-orgd43a770" class="outline-3"&gt;
&lt;h3 id="orgd43a770"&gt;calloc&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-orgd43a770"&gt;
&lt;p&gt;
原型 &lt;code&gt;void *calloc(size_t nmemb, size_t size);&lt;/code&gt;
分配 nmemb 个元素，每个元素大小为 size.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-org2539321" class="outline-3"&gt;
&lt;h3 id="org2539321"&gt;realloc&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-org2539321"&gt;
&lt;p&gt;
原型 &lt;code&gt;void *realloc(void *ptr, size_t size);&lt;/code&gt;
&lt;/p&gt;
&lt;ol class="org-ol"&gt;
&lt;li&gt;扩展时，不会对新加进来的做初始化&lt;/li&gt;
&lt;li&gt;扩展失败时，返回空指针并不影响原来的元素&lt;/li&gt;
&lt;li&gt;传入空指针时，与 &lt;code&gt;malloc&lt;/code&gt; 行为一致&lt;/li&gt;
&lt;li&gt;第二个参数是0时，释放内存&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;
一旦 &lt;code&gt;realloc&lt;/code&gt; 返回，记得更新之前的所有指针，因为可能会把元素都复制到了别的地址
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;


&lt;div id="outline-container-orgd3ce21a" class="outline-3"&gt;
&lt;h3 id="orgd3ce21a"&gt;释放内存 free&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-orgd3ce21a"&gt;
&lt;p&gt;
原型 &lt;code&gt;void free(void *ptr);&lt;/code&gt;
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;


&lt;div id="outline-container-org750d774" class="outline-2"&gt;
&lt;h2 id="org750d774"&gt;声明&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-org750d774"&gt;
&lt;/div&gt;
&lt;div id="outline-container-orgb524307" class="outline-3"&gt;
&lt;h3 id="orgb524307"&gt;声明说明符&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-orgb524307"&gt;
&lt;ol class="org-ol"&gt;
&lt;li&gt;存储类型。包括 &lt;code&gt;auto, static, extern, register&lt;/code&gt; ，只能有一个，必须放在最前面&lt;/li&gt;
&lt;li&gt;类型限定符。包括 &lt;code&gt;const, volatile, restrict(C99)&lt;/code&gt; ，可以有一个或多个&lt;/li&gt;
&lt;li&gt;类型说明符。包括基本类型、结构、枚举和联合&lt;/li&gt;
&lt;li&gt;函数说明符。包括 &lt;code&gt;inline(C99)&lt;/code&gt; ，只用于函数声明&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-org51a6254" class="outline-3"&gt;
&lt;h3 id="org51a6254"&gt;解释复杂的声明符&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-org51a6254"&gt;
&lt;ol class="org-ol"&gt;
&lt;li&gt;始终从内往外读声明符&lt;/li&gt;
&lt;li&gt;[]和()优先于 * ,即 *p[] 是数组， *f() 是函数&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/div&gt;


&lt;div id="outline-container-org176135e" class="outline-3"&gt;
&lt;h3 id="org176135e"&gt;关键字&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-org176135e"&gt;
&lt;table border="2" cellspacing="0" cellpadding="6" rules="groups" frame="hsides"&gt;


&lt;colgroup&gt;
&lt;col class="org-left"&gt;

&lt;col class="org-left"&gt;

&lt;col class="org-left"&gt;

&lt;col class="org-left"&gt;

&lt;col class="org-left"&gt;

&lt;col class="org-left"&gt;
&lt;/colgroup&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th scope="col" class="org-left"&gt;&lt;b&gt;关键字&lt;/b&gt;&lt;/th&gt;
&lt;th scope="col" class="org-left"&gt;&lt;b&gt;存储类别&lt;/b&gt;&lt;/th&gt;
&lt;th scope="col" class="org-left"&gt;&lt;b&gt;存储期&lt;/b&gt;&lt;/th&gt;
&lt;th scope="col" class="org-left"&gt;&lt;b&gt;作用域&lt;/b&gt;&lt;/th&gt;
&lt;th scope="col" class="org-left"&gt;&lt;b&gt;链接&lt;/b&gt;&lt;/th&gt;
&lt;th scope="col" class="org-left"&gt;&lt;b&gt;声明方式&lt;/b&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class="org-left"&gt;可选 (&lt;code&gt;auto&lt;/code&gt;)&lt;/td&gt;
&lt;td class="org-left"&gt;自动&lt;/td&gt;
&lt;td class="org-left"&gt;自动&lt;/td&gt;
&lt;td class="org-left"&gt;块&lt;/td&gt;
&lt;td class="org-left"&gt;无&lt;/td&gt;
&lt;td class="org-left"&gt;块内&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="org-left"&gt;&lt;code&gt;register&lt;/code&gt;&lt;/td&gt;
&lt;td class="org-left"&gt;寄存器&lt;/td&gt;
&lt;td class="org-left"&gt;自动&lt;/td&gt;
&lt;td class="org-left"&gt;块&lt;/td&gt;
&lt;td class="org-left"&gt;无&lt;/td&gt;
&lt;td class="org-left"&gt;块内&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="org-left"&gt;无&lt;/td&gt;
&lt;td class="org-left"&gt;静态外部链接&lt;/td&gt;
&lt;td class="org-left"&gt;静态&lt;/td&gt;
&lt;td class="org-left"&gt;文件&lt;/td&gt;
&lt;td class="org-left"&gt;外部&lt;/td&gt;
&lt;td class="org-left"&gt;函数外&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="org-left"&gt;&lt;code&gt;static&lt;/code&gt;&lt;/td&gt;
&lt;td class="org-left"&gt;静态内部链接&lt;/td&gt;
&lt;td class="org-left"&gt;静态&lt;/td&gt;
&lt;td class="org-left"&gt;文件&lt;/td&gt;
&lt;td class="org-left"&gt;内部&lt;/td&gt;
&lt;td class="org-left"&gt;函数外&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="org-left"&gt;&lt;code&gt;static&lt;/code&gt;&lt;/td&gt;
&lt;td class="org-left"&gt;静态无链接&lt;/td&gt;
&lt;td class="org-left"&gt;静态&lt;/td&gt;
&lt;td class="org-left"&gt;块&lt;/td&gt;
&lt;td class="org-left"&gt;无&lt;/td&gt;
&lt;td class="org-left"&gt;块内&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="org-left"&gt;&lt;code&gt;extern&lt;/code&gt;&lt;/td&gt;
&lt;td class="org-left"&gt;外部&lt;/td&gt;
&lt;td class="org-left"&gt; &lt;/td&gt;
&lt;td class="org-left"&gt; &lt;/td&gt;
&lt;td class="org-left"&gt; &lt;/td&gt;
&lt;td class="org-left"&gt; &lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="org-left"&gt;&lt;code&gt;_Thread_local&lt;/code&gt;&lt;/td&gt;
&lt;td class="org-left"&gt; &lt;/td&gt;
&lt;td class="org-left"&gt; &lt;/td&gt;
&lt;td class="org-left"&gt; &lt;/td&gt;
&lt;td class="org-left"&gt; &lt;/td&gt;
&lt;td class="org-left"&gt; &lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="org-left"&gt;&lt;code&gt;const&lt;/code&gt;&lt;/td&gt;
&lt;td class="org-left"&gt;不可变&lt;/td&gt;
&lt;td class="org-left"&gt; &lt;/td&gt;
&lt;td class="org-left"&gt; &lt;/td&gt;
&lt;td class="org-left"&gt; &lt;/td&gt;
&lt;td class="org-left"&gt; &lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="org-left"&gt;&lt;code&gt;inline&lt;/code&gt;&lt;/td&gt;
&lt;td class="org-left"&gt; &lt;/td&gt;
&lt;td class="org-left"&gt; &lt;/td&gt;
&lt;td class="org-left"&gt; &lt;/td&gt;
&lt;td class="org-left"&gt; &lt;/td&gt;
&lt;td class="org-left"&gt; &lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="org-left"&gt;&lt;code&gt;volatile&lt;/code&gt;&lt;/td&gt;
&lt;td class="org-left"&gt;代理，可由其它程序改变&lt;/td&gt;
&lt;td class="org-left"&gt; &lt;/td&gt;
&lt;td class="org-left"&gt; &lt;/td&gt;
&lt;td class="org-left"&gt; &lt;/td&gt;
&lt;td class="org-left"&gt; &lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="org-left"&gt;&lt;code&gt;restrict&lt;/code&gt;&lt;/td&gt;
&lt;td class="org-left"&gt;限定唯一的指针&lt;/td&gt;
&lt;td class="org-left"&gt; &lt;/td&gt;
&lt;td class="org-left"&gt; &lt;/td&gt;
&lt;td class="org-left"&gt; &lt;/td&gt;
&lt;td class="org-left"&gt; &lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="org-left"&gt;&lt;code&gt;_Atomic&lt;/code&gt;&lt;/td&gt;
&lt;td class="org-left"&gt; &lt;/td&gt;
&lt;td class="org-left"&gt; &lt;/td&gt;
&lt;td class="org-left"&gt; &lt;/td&gt;
&lt;td class="org-left"&gt; &lt;/td&gt;
&lt;td class="org-left"&gt; &lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;


&lt;ol class="org-ol"&gt;
&lt;li&gt;好的设计不应该使用文件作用域的变量&lt;/li&gt;
&lt;li&gt;&lt;code&gt;auto&lt;/code&gt; 关键字用于明确显示使用了与外部同名的变量名，与 c++ 中的完全不同，不建议使用&lt;/li&gt;
&lt;li&gt;函数的默认类别是 &lt;code&gt;extern&lt;/code&gt; 除非使用了 &lt;code&gt;static&lt;/code&gt; 指定为模块私有&lt;/li&gt;
&lt;li&gt;&lt;code&gt;static&lt;/code&gt; 静态指的是生命周期一直在， &lt;code&gt;const&lt;/code&gt; 才是不可变&lt;/li&gt;
&lt;li&gt;&lt;code&gt;const&lt;/code&gt; 变量只能初始化，不能修改&lt;/li&gt;
&lt;li&gt;&lt;code&gt;const float * pf&lt;/code&gt; 指针 &lt;code&gt;pf&lt;/code&gt; 指向 &lt;code&gt;const float&lt;/code&gt; 类型的对象，即对象内容不可变，但指针可以指向其它地址&lt;/li&gt;
&lt;li&gt;&lt;code&gt;float const * pf&lt;/code&gt; 同上&lt;/li&gt;
&lt;li&gt;&lt;code&gt;float * const pf&lt;/code&gt; 指针 &lt;code&gt;pf&lt;/code&gt; 指向 &lt;code&gt;float&lt;/code&gt; 类型的对象，即对象内容可变，但指针不能指向其它地址&lt;/li&gt;
&lt;li&gt;即 &lt;code&gt;const&lt;/code&gt; 在 &lt;code&gt;*&lt;/code&gt; 前面表示指向的值不能变，在 &lt;code&gt;*&lt;/code&gt; 后面表示指针本身不能变&lt;/li&gt;
&lt;li&gt;函数的形参中有 &lt;code&gt;const&lt;/code&gt; 表示传递的值不变&lt;/li&gt;
&lt;li&gt;&lt;code&gt;restrict&lt;/code&gt; 限制指针是指向内存的唯一和初始方式，用于优化&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;


&lt;div id="outline-container-org0918d60" class="outline-2"&gt;
&lt;h2 id="org0918d60"&gt;TODO&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-org0918d60"&gt;
&lt;ol class="org-ol"&gt;
&lt;li&gt;-Ofast -flto -march=native -funroll-loops -fPIC&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/div&gt;</description><category>C</category><category>Memory Management</category><guid>https://chimez.github.io/posts/c-memory-management/</guid><pubDate>Fri, 12 Feb 2021 00:37:35 GMT</pubDate></item></channel></rss>