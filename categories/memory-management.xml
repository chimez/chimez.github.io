<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="../assets/xml/rss.xsl" media="all"?><rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>chimez's blog (关于 Memory Management 的文章)</title><link>https://chimez.github.io/</link><description></description><atom:link href="https://chimez.github.io/categories/memory-management.xml" rel="self" type="application/rss+xml"></atom:link><language>zh_cn</language><copyright>Contents © 2023 &lt;a href="mailto:chimez@163.com"&gt;chimez&lt;/a&gt; </copyright><lastBuildDate>Wed, 18 Oct 2023 02:37:53 GMT</lastBuildDate><generator>Nikola (getnikola.com)</generator><docs>http://blogs.law.harvard.edu/tech/rss</docs><item><title>C 指针与内存管理</title><link>https://chimez.github.io/posts/c-memory-management/</link><dc:creator>chimez</dc:creator><description>&lt;div id="outline-container-org3c4721e" class="outline-2"&gt;
&lt;h2 id="org3c4721e"&gt;动态存储分配&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-org3c4721e"&gt;
&lt;/div&gt;
&lt;div id="outline-container-orgb92c61e" class="outline-3"&gt;
&lt;h3 id="orgb92c61e"&gt;内存分配函数&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-orgb92c61e"&gt;
&lt;p&gt;
在 &lt;code&gt;&amp;lt;stdlib.h&amp;gt;&lt;/code&gt; 头文件中的
&lt;/p&gt;
&lt;ol class="org-ol"&gt;
&lt;li&gt;&lt;code&gt;malloc&lt;/code&gt; 分配内存，不初始化&lt;/li&gt;
&lt;li&gt;&lt;code&gt;calloc&lt;/code&gt; 分配内存，并清零&lt;/li&gt;
&lt;li&gt;&lt;code&gt;realloc&lt;/code&gt; 调制分配内存大小&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;
内存分配函数返回 &lt;code&gt;void *&lt;/code&gt; 类型，本质上只是内存地址
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-org799f82a" class="outline-3"&gt;
&lt;h3 id="org799f82a"&gt;空指针&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-org799f82a"&gt;
&lt;p&gt;
内存分配函数有可能返回空指针 &lt;code&gt;NULL&lt;/code&gt; ，使用空指针会导致程序崩溃，所以要判断指针是否为空指针。
&lt;/p&gt;

&lt;p&gt;
c语言中空指针为假，非空指针都为真。
&lt;/p&gt;

&lt;p&gt;
常用如下方式进行判断
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;NULL&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;                &lt;/span&gt;&lt;span class="p"&gt;...;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-org4f7fe00" class="outline-3"&gt;
&lt;h3 id="org4f7fe00"&gt;malloc&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-org4f7fe00"&gt;
&lt;p&gt;
原型 &lt;code&gt;void *malloc(size_t size);&lt;/code&gt;
&lt;/p&gt;

&lt;p&gt;
惯用法
&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kt"&gt;double&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;malloc&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;N&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;sizeof&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-org5169cdf" class="outline-3"&gt;
&lt;h3 id="org5169cdf"&gt;calloc&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-org5169cdf"&gt;
&lt;p&gt;
原型 &lt;code&gt;void *calloc(size_t nmemb, size_t size);&lt;/code&gt;
分配 nmemb 个元素，每个元素大小为 size.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-org9232fe4" class="outline-3"&gt;
&lt;h3 id="org9232fe4"&gt;realloc&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-org9232fe4"&gt;
&lt;p&gt;
原型 &lt;code&gt;void *realloc(void *ptr, size_t size);&lt;/code&gt;
&lt;/p&gt;
&lt;ol class="org-ol"&gt;
&lt;li&gt;扩展时，不会对新加进来的做初始化&lt;/li&gt;
&lt;li&gt;扩展失败时，返回空指针并不影响原来的元素&lt;/li&gt;
&lt;li&gt;传入空指针时，与 &lt;code&gt;malloc&lt;/code&gt; 行为一致&lt;/li&gt;
&lt;li&gt;第二个参数是0时，释放内存&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;
一旦 &lt;code&gt;realloc&lt;/code&gt; 返回，记得更新之前的所有指针，因为可能会把元素都复制到了别的地址
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;


&lt;div id="outline-container-orgd838de9" class="outline-3"&gt;
&lt;h3 id="orgd838de9"&gt;释放内存 free&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-orgd838de9"&gt;
&lt;p&gt;
原型 &lt;code&gt;void free(void *ptr);&lt;/code&gt;
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;


&lt;div id="outline-container-orgcc3b882" class="outline-2"&gt;
&lt;h2 id="orgcc3b882"&gt;声明&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-orgcc3b882"&gt;
&lt;/div&gt;
&lt;div id="outline-container-org15f6f16" class="outline-3"&gt;
&lt;h3 id="org15f6f16"&gt;声明说明符&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-org15f6f16"&gt;
&lt;ol class="org-ol"&gt;
&lt;li&gt;存储类型。包括 &lt;code&gt;auto, static, extern, register&lt;/code&gt; ，只能有一个，必须放在最前面&lt;/li&gt;
&lt;li&gt;类型限定符。包括 &lt;code&gt;const, volatile, restrict(C99)&lt;/code&gt; ，可以有一个或多个&lt;/li&gt;
&lt;li&gt;类型说明符。包括基本类型、结构、枚举和联合&lt;/li&gt;
&lt;li&gt;函数说明符。包括 &lt;code&gt;inline(C99)&lt;/code&gt; ，只用于函数声明&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-org1e6561c" class="outline-3"&gt;
&lt;h3 id="org1e6561c"&gt;解释复杂的声明符&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-org1e6561c"&gt;
&lt;ol class="org-ol"&gt;
&lt;li&gt;始终从内往外读声明符&lt;/li&gt;
&lt;li&gt;[]和()优先于 * ,即 *p[] 是数组， *f() 是函数&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/div&gt;


&lt;div id="outline-container-org5e7cc41" class="outline-3"&gt;
&lt;h3 id="org5e7cc41"&gt;关键字&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-org5e7cc41"&gt;
&lt;table border="2" cellspacing="0" cellpadding="6" rules="groups" frame="hsides"&gt;


&lt;colgroup&gt;
&lt;col class="org-left"&gt;

&lt;col class="org-left"&gt;

&lt;col class="org-left"&gt;

&lt;col class="org-left"&gt;

&lt;col class="org-left"&gt;

&lt;col class="org-left"&gt;
&lt;/colgroup&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th scope="col" class="org-left"&gt;&lt;b&gt;关键字&lt;/b&gt;&lt;/th&gt;
&lt;th scope="col" class="org-left"&gt;&lt;b&gt;存储类别&lt;/b&gt;&lt;/th&gt;
&lt;th scope="col" class="org-left"&gt;&lt;b&gt;存储期&lt;/b&gt;&lt;/th&gt;
&lt;th scope="col" class="org-left"&gt;&lt;b&gt;作用域&lt;/b&gt;&lt;/th&gt;
&lt;th scope="col" class="org-left"&gt;&lt;b&gt;链接&lt;/b&gt;&lt;/th&gt;
&lt;th scope="col" class="org-left"&gt;&lt;b&gt;声明方式&lt;/b&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class="org-left"&gt;可选 (&lt;code&gt;auto&lt;/code&gt;)&lt;/td&gt;
&lt;td class="org-left"&gt;自动&lt;/td&gt;
&lt;td class="org-left"&gt;自动&lt;/td&gt;
&lt;td class="org-left"&gt;块&lt;/td&gt;
&lt;td class="org-left"&gt;无&lt;/td&gt;
&lt;td class="org-left"&gt;块内&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="org-left"&gt;&lt;code&gt;register&lt;/code&gt;&lt;/td&gt;
&lt;td class="org-left"&gt;寄存器&lt;/td&gt;
&lt;td class="org-left"&gt;自动&lt;/td&gt;
&lt;td class="org-left"&gt;块&lt;/td&gt;
&lt;td class="org-left"&gt;无&lt;/td&gt;
&lt;td class="org-left"&gt;块内&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="org-left"&gt;无&lt;/td&gt;
&lt;td class="org-left"&gt;静态外部链接&lt;/td&gt;
&lt;td class="org-left"&gt;静态&lt;/td&gt;
&lt;td class="org-left"&gt;文件&lt;/td&gt;
&lt;td class="org-left"&gt;外部&lt;/td&gt;
&lt;td class="org-left"&gt;函数外&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="org-left"&gt;&lt;code&gt;static&lt;/code&gt;&lt;/td&gt;
&lt;td class="org-left"&gt;静态内部链接&lt;/td&gt;
&lt;td class="org-left"&gt;静态&lt;/td&gt;
&lt;td class="org-left"&gt;文件&lt;/td&gt;
&lt;td class="org-left"&gt;内部&lt;/td&gt;
&lt;td class="org-left"&gt;函数外&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="org-left"&gt;&lt;code&gt;static&lt;/code&gt;&lt;/td&gt;
&lt;td class="org-left"&gt;静态无链接&lt;/td&gt;
&lt;td class="org-left"&gt;静态&lt;/td&gt;
&lt;td class="org-left"&gt;块&lt;/td&gt;
&lt;td class="org-left"&gt;无&lt;/td&gt;
&lt;td class="org-left"&gt;块内&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="org-left"&gt;&lt;code&gt;extern&lt;/code&gt;&lt;/td&gt;
&lt;td class="org-left"&gt;外部&lt;/td&gt;
&lt;td class="org-left"&gt; &lt;/td&gt;
&lt;td class="org-left"&gt; &lt;/td&gt;
&lt;td class="org-left"&gt; &lt;/td&gt;
&lt;td class="org-left"&gt; &lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="org-left"&gt;&lt;code&gt;_Thread_local&lt;/code&gt;&lt;/td&gt;
&lt;td class="org-left"&gt; &lt;/td&gt;
&lt;td class="org-left"&gt; &lt;/td&gt;
&lt;td class="org-left"&gt; &lt;/td&gt;
&lt;td class="org-left"&gt; &lt;/td&gt;
&lt;td class="org-left"&gt; &lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="org-left"&gt;&lt;code&gt;const&lt;/code&gt;&lt;/td&gt;
&lt;td class="org-left"&gt;不可变&lt;/td&gt;
&lt;td class="org-left"&gt; &lt;/td&gt;
&lt;td class="org-left"&gt; &lt;/td&gt;
&lt;td class="org-left"&gt; &lt;/td&gt;
&lt;td class="org-left"&gt; &lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="org-left"&gt;&lt;code&gt;inline&lt;/code&gt;&lt;/td&gt;
&lt;td class="org-left"&gt; &lt;/td&gt;
&lt;td class="org-left"&gt; &lt;/td&gt;
&lt;td class="org-left"&gt; &lt;/td&gt;
&lt;td class="org-left"&gt; &lt;/td&gt;
&lt;td class="org-left"&gt; &lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="org-left"&gt;&lt;code&gt;volatile&lt;/code&gt;&lt;/td&gt;
&lt;td class="org-left"&gt;代理，可由其它程序改变&lt;/td&gt;
&lt;td class="org-left"&gt; &lt;/td&gt;
&lt;td class="org-left"&gt; &lt;/td&gt;
&lt;td class="org-left"&gt; &lt;/td&gt;
&lt;td class="org-left"&gt; &lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="org-left"&gt;&lt;code&gt;restrict&lt;/code&gt;&lt;/td&gt;
&lt;td class="org-left"&gt;限定唯一的指针&lt;/td&gt;
&lt;td class="org-left"&gt; &lt;/td&gt;
&lt;td class="org-left"&gt; &lt;/td&gt;
&lt;td class="org-left"&gt; &lt;/td&gt;
&lt;td class="org-left"&gt; &lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="org-left"&gt;&lt;code&gt;_Atomic&lt;/code&gt;&lt;/td&gt;
&lt;td class="org-left"&gt; &lt;/td&gt;
&lt;td class="org-left"&gt; &lt;/td&gt;
&lt;td class="org-left"&gt; &lt;/td&gt;
&lt;td class="org-left"&gt; &lt;/td&gt;
&lt;td class="org-left"&gt; &lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;


&lt;ol class="org-ol"&gt;
&lt;li&gt;好的设计不应该使用文件作用域的变量&lt;/li&gt;
&lt;li&gt;&lt;code&gt;auto&lt;/code&gt; 关键字用于明确显示使用了与外部同名的变量名，与 c++ 中的完全不同，不建议使用&lt;/li&gt;
&lt;li&gt;函数的默认类别是 &lt;code&gt;extern&lt;/code&gt; 除非使用了 &lt;code&gt;static&lt;/code&gt; 指定为模块私有&lt;/li&gt;
&lt;li&gt;&lt;code&gt;static&lt;/code&gt; 静态指的是生命周期一直在， &lt;code&gt;const&lt;/code&gt; 才是不可变&lt;/li&gt;
&lt;li&gt;&lt;code&gt;const&lt;/code&gt; 变量只能初始化，不能修改&lt;/li&gt;
&lt;li&gt;&lt;code&gt;const float * pf&lt;/code&gt; 指针 &lt;code&gt;pf&lt;/code&gt; 指向 &lt;code&gt;const float&lt;/code&gt; 类型的对象，即对象内容不可变，但指针可以指向其它地址&lt;/li&gt;
&lt;li&gt;&lt;code&gt;float const * pf&lt;/code&gt; 同上&lt;/li&gt;
&lt;li&gt;&lt;code&gt;float * const pf&lt;/code&gt; 指针 &lt;code&gt;pf&lt;/code&gt; 指向 &lt;code&gt;float&lt;/code&gt; 类型的对象，即对象内容可变，但指针不能指向其它地址&lt;/li&gt;
&lt;li&gt;即 &lt;code&gt;const&lt;/code&gt; 在 &lt;code&gt;*&lt;/code&gt; 前面表示指向的值不能变，在 &lt;code&gt;*&lt;/code&gt; 后面表示指针本身不能变&lt;/li&gt;
&lt;li&gt;函数的形参中有 &lt;code&gt;const&lt;/code&gt; 表示传递的值不变&lt;/li&gt;
&lt;li&gt;&lt;code&gt;restrict&lt;/code&gt; 限制指针是指向内存的唯一和初始方式，用于优化&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;


&lt;div id="outline-container-org84b7bf2" class="outline-2"&gt;
&lt;h2 id="org84b7bf2"&gt;TODO&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-org84b7bf2"&gt;
&lt;ol class="org-ol"&gt;
&lt;li&gt;-Ofast -flto -march=native -funroll-loops -fPIC&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/div&gt;</description><category>C</category><category>Memory Management</category><guid>https://chimez.github.io/posts/c-memory-management/</guid><pubDate>Fri, 12 Feb 2021 00:37:35 GMT</pubDate></item></channel></rss>