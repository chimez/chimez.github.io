<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="../assets/xml/rss.xsl" media="all"?><rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>chimez's blog (Posts about cython)</title><link>https://chimez.github.io/</link><description></description><atom:link href="https://chimez.github.io/categories/cython.xml" rel="self" type="application/rss+xml"></atom:link><language>en</language><copyright>Contents © 2021 &lt;a href="mailto:chimez@163.com"&gt;chimez&lt;/a&gt; </copyright><lastBuildDate>Fri, 01 Oct 2021 12:05:15 GMT</lastBuildDate><generator>Nikola (getnikola.com)</generator><docs>http://blogs.law.harvard.edu/tech/rss</docs><item><title>cython</title><link>https://chimez.github.io/posts/cython/</link><dc:creator>chimez</dc:creator><description>&lt;div id="outline-container-org623bff5" class="outline-2"&gt;
&lt;h2 id="org623bff5"&gt;Cython&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-org623bff5"&gt;
&lt;/div&gt;
&lt;div id="outline-container-orgcae80f3" class="outline-3"&gt;
&lt;h3 id="orgcae80f3"&gt;基本概念&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-orgcae80f3"&gt;
&lt;/div&gt;
&lt;div id="outline-container-org12f0306" class="outline-4"&gt;
&lt;h4 id="org12f0306"&gt;文件&lt;/h4&gt;
&lt;div class="outline-text-4" id="text-org12f0306"&gt;
&lt;ol class="org-ol"&gt;
&lt;li&gt;&lt;code&gt;.pyx&lt;/code&gt; 是 &lt;code&gt;cython&lt;/code&gt; 语法的源文件&lt;/li&gt;
&lt;li&gt;&lt;code&gt;.pyd&lt;/code&gt; (windows) 是 windows 平台上编译后的文件，对应 linux 平台的 &lt;code&gt;*.so&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;.pyd&lt;/code&gt; (源文件) 是外部声明，即对 &lt;code&gt;.h&lt;/code&gt; 头文件的重新封装&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-org356013e" class="outline-4"&gt;
&lt;h4 id="org356013e"&gt;库&lt;/h4&gt;
&lt;div class="outline-text-4" id="text-org356013e"&gt;
&lt;ol class="org-ol"&gt;
&lt;li&gt;&lt;code&gt;Cython.Build&lt;/code&gt; python 端调用，用于编译&lt;/li&gt;
&lt;li&gt;&lt;code&gt;cython.parallel&lt;/code&gt; cython 端调用，并行 &lt;code&gt;prange&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;
所有 c 库在 &lt;a href="https://github.com/cython/cython/tree/master/Cython/Includes"&gt;Cython/Includes&lt;/a&gt; 中
&lt;/p&gt;
&lt;ol class="org-ol"&gt;
&lt;li&gt;&lt;code&gt;libc&lt;/code&gt; cython 端调用， c 标准库&lt;/li&gt;
&lt;li&gt;&lt;code&gt;libcpp&lt;/code&gt; cython 端调用， c++ stl 库&lt;/li&gt;
&lt;li&gt;&lt;code&gt;numpy&lt;/code&gt; cython 端调用，numpy 支持&lt;/li&gt;
&lt;li&gt;&lt;code&gt;posix&lt;/code&gt; cython 端调用，posix 库&lt;/li&gt;
&lt;li&gt;&lt;code&gt;openmp&lt;/code&gt; cython 端调用，并行&lt;/li&gt;
&lt;li&gt;&lt;code&gt;cpython&lt;/code&gt; cython 端调用， python 的 c 接口&lt;/li&gt;
&lt;li&gt;&lt;code&gt;cython&lt;/code&gt; cython 端调用，控制特殊行为&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-orgea8d3ea" class="outline-4"&gt;
&lt;h4 id="orgea8d3ea"&gt;语法&lt;/h4&gt;
&lt;div class="outline-text-4" id="text-orgea8d3ea"&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    from libc.math cimport log2 # 引入 c 函数
    cdef int x # 声明变量类型
    cdef int [:,:] x # 声明变量是 numpy 的 2d 向量
    ctypedef struct queue: # 声明类型
	pass

    ctypedef fused my_type: # 泛型
	int
	double
	long long

    # 类的定义，注意使用 __cinit__
    cdef class A:
	cdef int a
	def __cinit__(self):
	    self.a = 1

    &amp;lt;void*&amp;gt;value # 类型转换成指针

    # 定义 c 函数，异常时返回 -1
    cdef int func(int x) execpt? -1:
	pass
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-org0e3efab" class="outline-4"&gt;
&lt;h4 id="org0e3efab"&gt;文件注解&lt;/h4&gt;
&lt;div class="outline-text-4" id="text-org0e3efab"&gt;
&lt;ol class="org-ol"&gt;
&lt;li&gt;&lt;code&gt;# distutils: language=c++&lt;/code&gt; 使用 &lt;code&gt;c++&lt;/code&gt; 编译&lt;/li&gt;
&lt;li&gt;&lt;code&gt;# distutils: sources = c-algorithms/src/queue.c&lt;/code&gt; 指定静态链接的源文件&lt;/li&gt;
&lt;li&gt;&lt;code&gt;# distutils: include_dirs = c-algorithms/src/&lt;/code&gt; 指定头文件目录&lt;/li&gt;
&lt;li&gt;&lt;code&gt;# distutils: extra_compile_args=-fopenmp&lt;/code&gt; 指定编译器参数&lt;/li&gt;
&lt;li&gt;&lt;code&gt;# distutils: extra_link_args=-fopenmp&lt;/code&gt; 指定链接参数&lt;/li&gt;
&lt;li&gt;&lt;code&gt;# cython: infer_types=True&lt;/code&gt; 自动推断类型，只作用于一级缩进的变量&lt;/li&gt;
&lt;li&gt;&lt;code&gt;# cython: profile=True&lt;/code&gt; 开启 profile&lt;/li&gt;
&lt;li&gt;&lt;code&gt;# cython: linetrace=True&lt;/code&gt; 开启 profile 行追踪&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-orgb070531" class="outline-4"&gt;
&lt;h4 id="orgb070531"&gt;函数注解&lt;/h4&gt;
&lt;div class="outline-text-4" id="text-orgb070531"&gt;
&lt;ol class="org-ol"&gt;
&lt;li&gt;&lt;code&gt;@cython.boundscheck(False)&lt;/code&gt; 关闭数组边界检查&lt;/li&gt;
&lt;li&gt;&lt;code&gt;@cython.wraparound(False)&lt;/code&gt; 关闭负指标&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-orga07bc8e" class="outline-3"&gt;
&lt;h3 id="orga07bc8e"&gt;编译&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-orga07bc8e"&gt;
&lt;/div&gt;
&lt;div id="outline-container-org03f4285" class="outline-4"&gt;
&lt;h4 id="org03f4285"&gt;基本结构&lt;/h4&gt;
&lt;div class="outline-text-4" id="text-org03f4285"&gt;
&lt;p&gt;
&lt;code&gt;setup.py&lt;/code&gt;
&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    &lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;setuptools&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;setup&lt;/span&gt;
    &lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;Cython.Build&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;cythonize&lt;/span&gt;

    &lt;span class="n"&gt;setup&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
	&lt;span class="n"&gt;ext_modules&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;cythonize&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"helloworld.pyx"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
&lt;code&gt;helloworld.pyx&lt;/code&gt;
&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    &lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"Hello World"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
执行命令
&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    python setup.py build_ext --inplace
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
这编译得到的 &lt;code&gt;helloworld.so&lt;/code&gt; 或 &lt;code&gt;helloworld.pyd&lt;/code&gt;
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-org54462fb" class="outline-4"&gt;
&lt;h4 id="org54462fb"&gt;动态链接&lt;/h4&gt;
&lt;div class="outline-text-4" id="text-org54462fb"&gt;
&lt;p&gt;
&lt;a href="https://cython.readthedocs.io/en/latest/src/tutorial/external.html#dynamic-linking"&gt;参考&lt;/a&gt;
&lt;/p&gt;

&lt;p&gt;
需要指明 &lt;code&gt;libraries&lt;/code&gt; 参数
&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    &lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;setuptools&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Extension&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;setup&lt;/span&gt;
    &lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;Cython.Build&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;cythonize&lt;/span&gt;

    &lt;span class="n"&gt;ext_modules&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
	&lt;span class="n"&gt;Extension&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"demo"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
		  &lt;span class="n"&gt;sources&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;"demo.pyx"&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
		  &lt;span class="n"&gt;libraries&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;"m"&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;  &lt;span class="c1"&gt;# Unix-like specific&lt;/span&gt;
		  &lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;]&lt;/span&gt;

    &lt;span class="n"&gt;setup&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"Demos"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
	  &lt;span class="n"&gt;ext_modules&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;cythonize&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ext_modules&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-org58aa4b1" class="outline-4"&gt;
&lt;h4 id="org58aa4b1"&gt;静态链接&lt;/h4&gt;
&lt;div class="outline-text-4" id="text-org58aa4b1"&gt;
&lt;p&gt;
使用注解 
&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    # distutils: sources = c-algorithms/src/queue.c
    # distutils: include_dirs = c-algorithms/src/

    pass
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-orgf4104de" class="outline-3"&gt;
&lt;h3 id="orgf4104de"&gt;使用 c 库&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-orgf4104de"&gt;
&lt;/div&gt;
&lt;div id="outline-container-orga658036" class="outline-4"&gt;
&lt;h4 id="orga658036"&gt;外部声明&lt;/h4&gt;
&lt;div class="outline-text-4" id="text-orga658036"&gt;
&lt;p&gt;
使用头文件, 外部声明可以放在 &lt;code&gt;.pyd&lt;/code&gt; 文件中
&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    cdef extern from "math.h":
	double sin(double x)
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-org440ac00" class="outline-4"&gt;
&lt;h4 id="org440ac00"&gt;异常处理&lt;/h4&gt;
&lt;div class="outline-text-4" id="text-org440ac00"&gt;
&lt;ol class="org-ol"&gt;
&lt;li&gt;&lt;code&gt;except? -1&lt;/code&gt; 语法表示当发生任何错误时，返回 &lt;code&gt;-1&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;execpt *&lt;/code&gt; 表示返回时调用 &lt;code&gt;PyErr_Occurred()&lt;/code&gt; ，当函数返回 &lt;code&gt;void&lt;/code&gt; 并且需要传递错误时使用这个&lt;/li&gt;
&lt;/ol&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    cdef int pop(self) except? -1:
	if cqueue.queue_is_empty(self._c_queue):
	    raise IndexError("Queue is empty")
	return &amp;lt;Py_ssize_t&amp;gt;cqueue.queue_pop_head(self._c_queue)

    cdef int spam() except *:
	...
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-org2f9d47d" class="outline-3"&gt;
&lt;h3 id="org2f9d47d"&gt;使用 numpy&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-org2f9d47d"&gt;
&lt;p&gt;
numpy 的 &lt;code&gt;ndarray&lt;/code&gt; 在 cython 中用做 typed memoryview
&lt;/p&gt;
&lt;/div&gt;

&lt;div id="outline-container-orgc0b1489" class="outline-4"&gt;
&lt;h4 id="orgc0b1489"&gt;基本例子&lt;/h4&gt;
&lt;div class="outline-text-4" id="text-orgc0b1489"&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    import numpy as np

    DTYPE = np.intc


    cdef int clip(int a, int min_value, int max_value):
	return min(max(a, min_value), max_value)


    def compute(int[:, :] array_1, int[:, :] array_2, int a, int b, int c):

	cdef Py_ssize_t x_max = array_1.shape[0]
	cdef Py_ssize_t y_max = array_1.shape[1]
	assert tuple(array_1.shape) == tuple(array_2.shape)

	result = np.zeros((x_max, y_max), dtype=DTYPE)
	cdef int[:, :] result_view = result

	cdef int tmp
	cdef Py_ssize_t x, y

	for x in range(x_max):
	    for y in range(y_max):

		tmp = clip(array_1[x, y], 2, 10)
		tmp = tmp * a + array_2[x, y] * b
		result_view[x, y] = tmp + c

	return result
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-orgdb2cd81" class="outline-3"&gt;
&lt;h3 id="orgdb2cd81"&gt;并行&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-orgdb2cd81"&gt;
&lt;ol class="org-ol"&gt;
&lt;li&gt;使用 &lt;code&gt;prange&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;
使用 &lt;code&gt;nogil&lt;/code&gt;
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;      from cython.parallel import prange
      cdef int func(int x) nogil:
	  cdef int i
	  cdef int y
	  for i in prange(x, nogil=True):
	      y += i 
	  return y
&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;</description><category>cython</category><category>python</category><guid>https://chimez.github.io/posts/cython/</guid><pubDate>Thu, 05 Aug 2021 12:47:25 GMT</pubDate></item></channel></rss>