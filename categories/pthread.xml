<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="../assets/xml/rss.xsl" media="all"?><rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>chimez's blog (关于 pthread 的文章)</title><link>https://chimez.github.io/</link><description></description><atom:link href="https://chimez.github.io/categories/pthread.xml" rel="self" type="application/rss+xml"></atom:link><language>zh_cn</language><copyright>Contents © 2025 &lt;a href="mailto:chimez@163.com"&gt;chimez&lt;/a&gt; </copyright><lastBuildDate>Wed, 18 Jun 2025 02:51:08 GMT</lastBuildDate><generator>Nikola (getnikola.com)</generator><docs>http://blogs.law.harvard.edu/tech/rss</docs><item><title>pthread</title><link>https://chimez.github.io/posts/pthread/</link><dc:creator>chimez</dc:creator><description>&lt;div id="outline-container-org13eaff9" class="outline-2"&gt;
&lt;h2 id="org13eaff9"&gt;pthread: POSIX Threads&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-org13eaff9"&gt;
&lt;p&gt;
pthread 是 POSIX 标准的线程 API, 放在头文件 &lt;code&gt;&amp;lt;pthread.h&amp;gt;&lt;/code&gt; 中，并由 libc 提供实现。
&lt;/p&gt;
&lt;/div&gt;
&lt;div id="outline-container-org495a3d0" class="outline-4"&gt;
&lt;h4 id="org495a3d0"&gt;参考&lt;/h4&gt;
&lt;div class="outline-text-4" id="text-org495a3d0"&gt;
&lt;ol class="org-ol"&gt;
&lt;li&gt;&lt;a href="https://hpc-tutorials.llnl.gov/posix/"&gt;llnl 教程&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-org9d45c01" class="outline-3"&gt;
&lt;h3 id="org9d45c01"&gt;pthread API&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-org9d45c01"&gt;
&lt;p&gt;
标准 pthread API 包括以下几部分
&lt;/p&gt;
&lt;ol class="org-ol"&gt;
&lt;li&gt;线程管理：创建、检测、合并等&lt;/li&gt;
&lt;li&gt;互斥锁(mutex)：创建、销毁、加锁、解锁等&lt;/li&gt;
&lt;li&gt;条件变量：在线程间共享锁、创建、销毁、等待和信号&lt;/li&gt;
&lt;li&gt;&lt;p&gt;
同步：管理读写锁和屏障
&lt;/p&gt;

&lt;p&gt;
API 命名结构如下：
&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;table border="2" cellspacing="0" cellpadding="6" rules="groups" frame="hsides"&gt;


&lt;colgroup&gt;
&lt;col class="org-left"&gt;

&lt;col class="org-left"&gt;
&lt;/colgroup&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th scope="col" class="org-left"&gt;Routine Prefix&lt;/th&gt;
&lt;th scope="col" class="org-left"&gt;Functional Group&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class="org-left"&gt;&lt;code&gt;pthread_&lt;/code&gt;&lt;/td&gt;
&lt;td class="org-left"&gt;Threads themselves and miscellaneous subroutines&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="org-left"&gt;&lt;code&gt;pthread_attr_&lt;/code&gt;&lt;/td&gt;
&lt;td class="org-left"&gt;Thread attributes objects&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="org-left"&gt;&lt;code&gt;pthread_mutex_&lt;/code&gt;&lt;/td&gt;
&lt;td class="org-left"&gt;Mutexes&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="org-left"&gt;&lt;code&gt;pthread_mutexattr_&lt;/code&gt;&lt;/td&gt;
&lt;td class="org-left"&gt;Mutex attributes objects.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="org-left"&gt;&lt;code&gt;pthread_cond_&lt;/code&gt;&lt;/td&gt;
&lt;td class="org-left"&gt;Condition variables&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="org-left"&gt;&lt;code&gt;pthread_condattr_&lt;/code&gt;&lt;/td&gt;
&lt;td class="org-left"&gt;Condition attributes objects&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="org-left"&gt;&lt;code&gt;pthread_key_&lt;/code&gt;&lt;/td&gt;
&lt;td class="org-left"&gt;Thread-specific data keys&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="org-left"&gt;&lt;code&gt;pthread_rwlock_&lt;/code&gt;&lt;/td&gt;
&lt;td class="org-left"&gt;Read/write locks&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="org-left"&gt;&lt;code&gt;pthread_barrier_&lt;/code&gt;&lt;/td&gt;
&lt;td class="org-left"&gt;Synchronization barriers&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-org4d03554" class="outline-3"&gt;
&lt;h3 id="org4d03554"&gt;线程管理&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-org4d03554"&gt;
&lt;/div&gt;
&lt;div id="outline-container-org22bb3ab" class="outline-4"&gt;
&lt;h4 id="org22bb3ab"&gt;创建和终止线程&lt;/h4&gt;
&lt;div class="outline-text-4" id="text-org22bb3ab"&gt;
&lt;p&gt;
包括以下函数
&lt;/p&gt;
&lt;ol class="org-ol"&gt;
&lt;li&gt;&lt;code&gt;pthread_create(thread,attr,start_routine,arg)&lt;/code&gt; 创建线程&lt;/li&gt;
&lt;li&gt;&lt;code&gt;pthread_exit(status)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;pthread_cancel(thread)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;pthread_attr_init(attr)&lt;/code&gt; 创建线程属性对象&lt;/li&gt;
&lt;li&gt;&lt;code&gt;pthread_attr_destroy(attr)&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;
注意：
&lt;/p&gt;
&lt;ol class="org-ol"&gt;
&lt;li&gt;每个线程结束时最后都调用 &lt;code&gt;pthread_exit&lt;/code&gt; 返回&lt;/li&gt;
&lt;li&gt;最好主函数也用 &lt;code&gt;pthread_exit&lt;/code&gt; 返回&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-org5865e56" class="outline-4"&gt;
&lt;h4 id="org5865e56"&gt;合并和检测线程&lt;/h4&gt;
&lt;div class="outline-text-4" id="text-org5865e56"&gt;
&lt;ol class="org-ol"&gt;
&lt;li&gt;&lt;code&gt;pthread_join (threadid,status)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;pthread_detach (threadid)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;pthread_attr_setdetachstate (attr,detachstate)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;pthread_attr_getdetachstate (attr,detachstate)&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;
注意：
&lt;/p&gt;
&lt;ol class="org-ol"&gt;
&lt;li&gt;如果线程需要被 &lt;code&gt;join&lt;/code&gt; 最好显式设置 &lt;code&gt;joinable&lt;/code&gt; 属性，因为不是所有实现都默认加这个属性&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-org8a0db8c" class="outline-4"&gt;
&lt;h4 id="org8a0db8c"&gt;栈管理&lt;/h4&gt;
&lt;div class="outline-text-4" id="text-org8a0db8c"&gt;
&lt;ol class="org-ol"&gt;
&lt;li&gt;&lt;code&gt;pthread_attr_getstacksize (attr, stacksize)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;pthread_attr_setstacksize (attr, stacksize)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;pthread_attr_getstackaddr (attr, stackaddr)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;pthread_attr_setstackaddr (attr, stackaddr)&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;
注意：
&lt;/p&gt;
&lt;ol class="org-ol"&gt;
&lt;li&gt;线程的栈大小是实现相关的，所以为了程序可移植，最好自己设置栈大小&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-org78b1caa" class="outline-4"&gt;
&lt;h4 id="org78b1caa"&gt;其它&lt;/h4&gt;
&lt;div class="outline-text-4" id="text-org78b1caa"&gt;
&lt;ol class="org-ol"&gt;
&lt;li&gt;&lt;code&gt;pthread_self ()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;pthread_equal (thread1,thread2)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;pthread_once (once_control, init_routine)&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-orgafd1f51" class="outline-3"&gt;
&lt;h3 id="orgafd1f51"&gt;互斥锁&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-orgafd1f51"&gt;
&lt;p&gt;
典型的使用锁的过程是
&lt;/p&gt;
&lt;ol class="org-ol"&gt;
&lt;li&gt;创建并初始化锁变量&lt;/li&gt;
&lt;li&gt;几个线程尝试加锁&lt;/li&gt;
&lt;li&gt;只有一个会成功并获得锁&lt;/li&gt;
&lt;li&gt;获得锁的线程进行一些操作&lt;/li&gt;
&lt;li&gt;释放锁&lt;/li&gt;
&lt;li&gt;另一个线程尝试获得锁&lt;/li&gt;
&lt;li&gt;最终锁被销毁&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div id="outline-container-org67fa40a" class="outline-4"&gt;
&lt;h4 id="org67fa40a"&gt;创建和销毁锁&lt;/h4&gt;
&lt;div class="outline-text-4" id="text-org67fa40a"&gt;
&lt;ol class="org-ol"&gt;
&lt;li&gt;&lt;code&gt;pthread_mutex_init (mutex,attr)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;pthread_mutex_destroy (mutex)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;pthread_mutexattr_init (attr)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;pthread_mutexattr_destroy (attr)&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;
注意：
&lt;/p&gt;
&lt;ol class="org-ol"&gt;
&lt;li&gt;创建锁变量可以用 &lt;code&gt;pthread_mutex_t mymutex = PTHREAD_MUTEX_INITIALIZER;&lt;/code&gt;, 也可以用 &lt;code&gt;pthread_mutex_init()&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-org33d1f43" class="outline-4"&gt;
&lt;h4 id="org33d1f43"&gt;加锁和解锁&lt;/h4&gt;
&lt;div class="outline-text-4" id="text-org33d1f43"&gt;
&lt;ol class="org-ol"&gt;
&lt;li&gt;&lt;code&gt;pthread_mutex_lock (mutex)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;pthread_mutex_trylock (mutex)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;pthread_mutex_unlock (mutex)&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-org8997b6a" class="outline-3"&gt;
&lt;h3 id="org8997b6a"&gt;条件变量&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-org8997b6a"&gt;
&lt;p&gt;
条件变量也是用于线程间同步的机制，与加锁的共享内存不同，条件变量用于传递消息。
&lt;/p&gt;
&lt;/div&gt;
&lt;div id="outline-container-org5a69549" class="outline-4"&gt;
&lt;h4 id="org5a69549"&gt;创建和销毁条件变量&lt;/h4&gt;
&lt;div class="outline-text-4" id="text-org5a69549"&gt;
&lt;ol class="org-ol"&gt;
&lt;li&gt;&lt;code&gt;pthread_cond_init (condition,attr)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;pthread_cond_destroy (condition)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;pthread_condattr_init (attr)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;pthread_condattr_destroy (attr)&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;
注意：
&lt;/p&gt;
&lt;ol class="org-ol"&gt;
&lt;li&gt;创建条件变量可以用 &lt;code&gt;pthread_cond_t myconvar = PTHREAD_COND_INITIALIZER;&lt;/code&gt; 也可以用 &lt;code&gt;pthread_cond_init()&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-org0f30990" class="outline-4"&gt;
&lt;h4 id="org0f30990"&gt;等待和通信&lt;/h4&gt;
&lt;div class="outline-text-4" id="text-org0f30990"&gt;
&lt;ol class="org-ol"&gt;
&lt;li&gt;&lt;code&gt;pthread_cond_wait (condition,mutex)&lt;/code&gt; 阻止线程直到某个条件被通信过来，应该在加锁时使用，会在等待时自动释放锁，当获得信号时又会把锁加回来&lt;/li&gt;
&lt;li&gt;&lt;code&gt;pthread_cond_signal (condition)&lt;/code&gt; 用来向其它等待中的线程传递信号，应该在加锁时使用，在操作后传信号，最后解锁&lt;/li&gt;
&lt;li&gt;&lt;code&gt;pthread_cond_broadcast (condition)&lt;/code&gt; 用来向多个线程传递信号&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;
注意：
&lt;/p&gt;
&lt;ol class="org-ol"&gt;
&lt;li&gt;等待锁时应该使用 &lt;code&gt;while&lt;/code&gt; 循环判断而不是 &lt;code&gt;if&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;
&lt;/li&gt;&lt;/ol&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;</description><category>C</category><category>multithreading</category><category>parallel</category><category>pthread</category><guid>https://chimez.github.io/posts/pthread/</guid><pubDate>Thu, 01 Jul 2021 13:24:50 GMT</pubDate></item></channel></rss>