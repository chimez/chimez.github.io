<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="../assets/xml/rss.xsl" media="all"?><rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>chimez's blog (关于 python 的文章)</title><link>https://chimez.github.io/</link><description></description><atom:link href="https://chimez.github.io/categories/python.xml" rel="self" type="application/rss+xml"></atom:link><language>zh_cn</language><copyright>Contents © 2023 &lt;a href="mailto:chimez@163.com"&gt;chimez&lt;/a&gt; </copyright><lastBuildDate>Tue, 24 Oct 2023 10:00:27 GMT</lastBuildDate><generator>Nikola (getnikola.com)</generator><docs>http://blogs.law.harvard.edu/tech/rss</docs><item><title>TeNPy 调研</title><link>https://chimez.github.io/posts/tenpy-diao-yan/</link><dc:creator>chimez</dc:creator><description>&lt;p&gt;
DMRG / MPS / 张量网络的开源库有很多，例如 &lt;a href="https://github.com/tenpy/tenpy.git"&gt;TeNPy&lt;/a&gt;, &lt;a href="https://itensor.org/"&gt;ITensor&lt;/a&gt;, &lt;a href="https://github.com/jutho/TensorKit.jl"&gt;TensorKit&lt;/a&gt;, &lt;a href="https://bitbucket.org/aweichselbaum/workspace/projects/QS"&gt;QSpace&lt;/a&gt;, &lt;a href="https://github.com/g1257/dmrgpp"&gt;DMRG++&lt;/a&gt;, &lt;a href="https://uni10.gitlab.io/"&gt;uni10&lt;/a&gt;, &lt;a href="https://github.com/cmendl/pytenet"&gt;PyTeNet&lt;/a&gt;, &lt;a href="https://github.com/jcmgray/quimb"&gt;quimb&lt;/a&gt;, &lt;a href="https://github.com/dsuess/mpnum"&gt;mpnum&lt;/a&gt;, &lt;a href="https://green.physics.lsa.umich.edu/alps_legacy/index.php"&gt;ALPS project&lt;/a&gt;, &lt;a href="https://github.com/issp-center-dev/TeNeS"&gt;TeNeS&lt;/a&gt;, &lt;a href="https://syten.eu/"&gt;SyTen&lt;/a&gt;, 等等。
这个系列文章将会从这些库中选择几个来学习和分析一下。
&lt;/p&gt;


&lt;div id="org7f18ff3" class="figure"&gt;
&lt;p&gt;&lt;img src="https://imgs.xkcd.com/comics/standards.png" alt="standards.png"&gt;
&lt;/p&gt;
&lt;p&gt;&lt;span class="figure-number"&gt;Figure 1: &lt;/span&gt;让我们再造个轮子🤣&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;
&lt;a href="https://github.com/tenpy/tenpy"&gt;TeNPy&lt;/a&gt;由&lt;a href="https://johannes-hauschild.de/"&gt;Johannes Hauschild&lt;/a&gt;主要开发并维护，Hauschild 的博士导师是 Frank Pollmann，现在在到处做博后。
考虑到 Hauschild 一作的文章没有几个，发表情况并不是很好，所以某种程度上他是在全职做 TeNPy 的开发。
&lt;/p&gt;


&lt;div id="outline-container-org3a2100c" class="outline-2"&gt;
&lt;h2 id="org3a2100c"&gt;安装&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-org3a2100c"&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;# 安装依赖
pip install -U pip numpy scipy cython setuptools wheel build
# 下载源码
git clone https://github.com/tenpy/tenpy.git
# 安装
cd tenpy
pip install -e .
# 测试
cd tests
pip install pytest
pytest
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-orgb3ade9e" class="outline-2"&gt;
&lt;h2 id="orgb3ade9e"&gt;代码层级&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-orgb3ade9e"&gt;
&lt;p&gt;
TeNPy 的代码层级如图&lt;a href="https://chimez.github.io/posts/tenpy-diao-yan/#org66fbfdf"&gt;2&lt;/a&gt;。
&lt;/p&gt;

&lt;ul class="org-ul"&gt;
&lt;li&gt;&lt;code&gt;tenpy.simulations&lt;/code&gt; 是程序的入口，提供运行程序（进行读取参数、运行计算、执行测量、保存结果和中间过程等等）的功能&lt;/li&gt;
&lt;li&gt;&lt;code&gt;tenpy.algorithms&lt;/code&gt; 中实现了多种算法，包括 DMRG、iDMRG、TEBD和TDVP&lt;/li&gt;
&lt;li&gt;&lt;code&gt;tenpy.models&lt;/code&gt; 中实现了各种模型包括自旋、费米、波色和各种晶格结构。二维晶格通过映射到一维来实现。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;tenpy.networks&lt;/code&gt; 中实现了 MPS 和 MPO 类型&lt;/li&gt;
&lt;li&gt;&lt;code&gt;tenpy.linalg&lt;/code&gt; 中实现了带有守恒量的张量以及迭代对角化算法 Lanczos 和 Arnoldi&lt;/li&gt;
&lt;li&gt;&lt;code&gt;tenpy.tools&lt;/code&gt; 中包括一些需要用到其它功能&lt;/li&gt;
&lt;/ul&gt;


&lt;div id="org66fbfdf" class="figure"&gt;
&lt;p&gt;&lt;img src="https://tenpy.readthedocs.io/en/latest/_images/overview.png" alt="overview.png"&gt;
&lt;/p&gt;
&lt;p&gt;&lt;span class="figure-number"&gt;Figure 2: &lt;/span&gt;TeNPy 的代码层级&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-org7eab418" class="outline-2"&gt;
&lt;h2 id="org7eab418"&gt;&lt;code&gt;tenpy.linalg.np_conserved.Array&lt;/code&gt;&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-org7eab418"&gt;
&lt;p&gt;
TeNPy 的基本数据结构是 &lt;code&gt;tenpy.linalg.np_conserved.Array&lt;/code&gt;, 带有守恒荷的张量。
TeNPy 采用带有箭头的 MPS 记号来表示一个张量。
张量的每个指标有若干可能的量子数，这些信息记录在 &lt;code&gt;Array.legs&lt;/code&gt; 属性里。
对于一个有 \(n\) 个指标的张量,  &lt;code&gt;Array.legs&lt;/code&gt; 是长度为 \(n\) 的数组，每个元素都是 &lt;code&gt;tenpy.linalg.charges.LegCharge&lt;/code&gt; , 这里记录了这个指标所有可能的荷以及它是入指标还是出指标。
张量的属性 &lt;code&gt;Array.qtotal&lt;/code&gt; 记录总量子数，只有那些和等于总量子数的块才会被保存。
每个保存的张量块的数据是数组 &lt;code&gt;Array._data&lt;/code&gt; 的一个元素，它对于的量子数则是矩阵 &lt;code&gt;Array._qdata&lt;/code&gt; 的一行。
&lt;/p&gt;

&lt;pre class="example" id="orga2ed335"&gt;
class Array{
    legs   : List[LegCharge],
    qtotal : Charge,
    _data  : List[numpy.ndarray],
    _qdata : numpy.ndarray[len(​_data), len(legs)],
}
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-orgb5cbdd2" class="outline-2"&gt;
&lt;h2 id="orgb5cbdd2"&gt;&lt;code&gt;tenpy.networks.site.Site&lt;/code&gt;&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-orgb5cbdd2"&gt;
&lt;p&gt;
&lt;code&gt;tenpy.networks.site.Site&lt;/code&gt; 是一个格点或者一个物理指标所需要的数据。
它保存了物理指标所需要的信息 &lt;code&gt;LegCharge&lt;/code&gt;, 以及作用在一个格点上的所有局域算符 &lt;code&gt;Site.ops&lt;/code&gt;, 写模型的哈密顿量所需要的所有算符都是从这里得到的。
除了一般的算符之外还有 Jordan-Wigner 变换（如果需要）要用到的信息。
&lt;/p&gt;

&lt;p&gt;
TeNPy 中实现的 &lt;code&gt;Site&lt;/code&gt; 有如下这些
&lt;/p&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;&lt;code&gt;BosonSite&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ClockSite&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;FermionSite&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;GroupedSite&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;SpinHalfFermionSite&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;SpinHalfHoleSite&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;SpinHalfSite&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;SpinSite&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-org0c77e0b" class="outline-2"&gt;
&lt;h2 id="org0c77e0b"&gt;&lt;code&gt;tenpy.networks.mps.MPS&lt;/code&gt;&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-org0c77e0b"&gt;
&lt;p&gt;
对于 \(n\) 格点的链， &lt;code&gt;tenpy.networks.mps.MPS&lt;/code&gt; 就是 \(n\) 个 &lt;code&gt;Site&lt;/code&gt; 和 \(n\) 个 &lt;code&gt;Array&lt;/code&gt;, 这些 &lt;code&gt;Array&lt;/code&gt; 都是三阶张量.
TeNPy 的 MPS 表示记录了每个块的形式（左正则、右正则、对称形式或者叫 Vidal 的 \(\Gamma \Lambda\) 形式）以及需要的奇异值。
&lt;/p&gt;

&lt;pre class="example" id="org73e356f"&gt;
class MPS{
    sites: List[Site],
    _B: List[Array],
    _S: List[numpy.ndarray[1d]],
    form: List[form],
}
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-org2b304d2" class="outline-2"&gt;
&lt;h2 id="org2b304d2"&gt;&lt;code&gt;tenpy.networks.mpo.MPO&lt;/code&gt;&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-org2b304d2"&gt;
&lt;p&gt;
&lt;code&gt;tenpy.networks.mpo.MPO&lt;/code&gt; 与 MPS 表示类似，只不过每个块现在是四阶张量。
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-orgda739bb" class="outline-2"&gt;
&lt;h2 id="orgda739bb"&gt;&lt;code&gt;tenpy.models.model.Model&lt;/code&gt;&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-orgda739bb"&gt;
&lt;p&gt;
&lt;code&gt;tenpy.models.model.Model&lt;/code&gt; 用来表示模型的哈密顿量，需要指定元胞格点的信息 &lt;code&gt;Site&lt;/code&gt; 以及晶格结构如何映射到一维链 &lt;code&gt;tenpy.models.lattice.Lattice&lt;/code&gt;.
TeNPy 提供的构造模型的方法是通过 &lt;code&gt;add_onsite&lt;/code&gt;, &lt;code&gt;add_coupling&lt;/code&gt; 等设置哈密顿量里的各项，然后根据需要自动构造 MPO。
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-orgb44c429" class="outline-2"&gt;
&lt;h2 id="orgb44c429"&gt;DMRG 算法&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-orgb44c429"&gt;
&lt;p&gt;
TeNPy 的抽象层次是
&lt;/p&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;由 &lt;code&gt;tenpy.algorithms.algorithm.Algorithm&lt;/code&gt; 提供运行、重启等功能&lt;/li&gt;
&lt;li&gt;然后由 &lt;code&gt;tenpy.algorithms.mps_common.Sweep&lt;/code&gt; 提供扫描的抽象&lt;/li&gt;
&lt;li&gt;每个扫描步骤则使用 &lt;code&gt;tenpy.algorithms.dmrg.DMRGEngine&lt;/code&gt; 它可以是 &lt;code&gt;SingleSiteDMRGEngine&lt;/code&gt; 或者 &lt;code&gt;TwoSiteDMRGEngine&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;</description><category>python</category><guid>https://chimez.github.io/posts/tenpy-diao-yan/</guid><pubDate>Wed, 18 Oct 2023 03:03:14 GMT</pubDate></item><item><title>setuptools</title><link>https://chimez.github.io/posts/setuptools/</link><dc:creator>chimez</dc:creator><description>&lt;div id="outline-container-org1386730" class="outline-2"&gt;
&lt;h2 id="org1386730"&gt;setuptools: python 的打包工具&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-org1386730"&gt;
&lt;p&gt;
&lt;a href="https://setuptools.pypa.io"&gt;setuptools&lt;/a&gt; 是 pypa 的项目。
&lt;/p&gt;
&lt;/div&gt;

&lt;div id="outline-container-org19ac31c" class="outline-3"&gt;
&lt;h3 id="org19ac31c"&gt;基本使用&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-org19ac31c"&gt;
&lt;/div&gt;
&lt;div id="outline-container-org2f98132" class="outline-4"&gt;
&lt;h4 id="org2f98132"&gt;&lt;code&gt;pyproject.toml&lt;/code&gt;&lt;/h4&gt;
&lt;div class="outline-text-4" id="text-org2f98132"&gt;
&lt;p&gt;
PEP 517 要求所有 python 项目需要一个配置文件 &lt;code&gt;pyproject.toml&lt;/code&gt; 其中描述项目的基本信息和依赖等。
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    [build-system]
    requires = ["setuptools", "wheel"]
    build-backend = "setuptools.build_meta"
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;


&lt;div id="outline-container-org69a2ff1" class="outline-4"&gt;
&lt;h4 id="org69a2ff1"&gt;&lt;code&gt;setup.cfg&lt;/code&gt; or &lt;code&gt;setup.py&lt;/code&gt;&lt;/h4&gt;
&lt;div class="outline-text-4" id="text-org69a2ff1"&gt;
&lt;p&gt;
&lt;code&gt;setup.cfg&lt;/code&gt; 是 setuptools 的 DSL，而 &lt;code&gt;setup.py&lt;/code&gt; 用一般的 python 代码。
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    &lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;setuptools&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;setup&lt;/span&gt;

    &lt;span class="n"&gt;setup&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;'mypackage'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;version&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;'0.0.1'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;packages&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'mypackage'&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
        &lt;span class="n"&gt;install_requires&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;
            &lt;span class="s1"&gt;'requests'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="s1"&gt;'importlib; python_version == "2.6"'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="p"&gt;],&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;ul class="org-ul"&gt;
&lt;li&gt;&lt;code&gt;packages&lt;/code&gt; 指定 setuptools 要处理的包，可以使用 &lt;code&gt;find_packages&lt;/code&gt;, &lt;code&gt;find_namespace_packages&lt;/code&gt; 来自动找到所有包&lt;/li&gt;
&lt;li&gt;&lt;code&gt;install_requires&lt;/code&gt; 指定安装包需要的依赖, setuptools 可以自动从 pypa 安装依赖&lt;/li&gt;
&lt;li&gt;&lt;code&gt;setup_requires&lt;/code&gt; 指定依赖，但 setuptools 不会自动安装它&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;


&lt;div id="outline-container-org526fc83" class="outline-3"&gt;
&lt;h3 id="org526fc83"&gt;开发模式&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-org526fc83"&gt;
&lt;p&gt;
使用开发模式，可以完成构建而不需要将文件复制到包目录。
&lt;/p&gt;

&lt;ul class="org-ul"&gt;
&lt;li&gt;开发模式安装 &lt;code&gt;setup.py develop&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;开发模式卸载 &lt;code&gt;setup.py develop --uninstall&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;开发模式与 PEP 517 不兼容，所以用 pip 安装的方式是 &lt;code&gt;pip install --editable .&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-orgd50da85" class="outline-3"&gt;
&lt;h3 id="orgd50da85"&gt;cython&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-orgd50da85"&gt;
&lt;p&gt;
setuptools 会自动检查 cython 是否安装，如果没有，就会忽略所有 &lt;code&gt;.pyx&lt;/code&gt; 文件。
&lt;/p&gt;

&lt;p&gt;
PEP 517 要求在 &lt;code&gt;pyproject.toml&lt;/code&gt; 中加入
&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;   [build-system]
   requires=[..., "cython"]
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
为了兼容性，推荐在 &lt;code&gt;setup.py&lt;/code&gt; 中也加入依赖 &lt;code&gt;setup_requires = ['cython', ...]&lt;/code&gt;
&lt;/p&gt;

&lt;p&gt;
&lt;code&gt;setup.py&lt;/code&gt;
&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;   &lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;setuptools&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;setup&lt;/span&gt;
   &lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;Cython.Build&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;cythonize&lt;/span&gt;

   &lt;span class="n"&gt;setup&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
       &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;'Hello world app'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
       &lt;span class="n"&gt;ext_modules&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;cythonize&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"hello.pyx"&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
       &lt;span class="n"&gt;zip_safe&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="kc"&gt;False&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
       &lt;span class="n"&gt;setup_requires&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'cython'&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
   &lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;</description><category>cython</category><category>python</category><guid>https://chimez.github.io/posts/setuptools/</guid><pubDate>Wed, 06 Oct 2021 12:00:12 GMT</pubDate></item><item><title>reStructuredText</title><link>https://chimez.github.io/posts/restructuredtext/</link><dc:creator>chimez</dc:creator><description>&lt;div id="outline-container-org7fc6f93" class="outline-2"&gt;
&lt;h2 id="org7fc6f93"&gt;reStructuredText&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-org7fc6f93"&gt;
&lt;p&gt;
reST, 文件后缀 &lt;code&gt;*.rst&lt;/code&gt; 是类似 markdown 的标记语言，是 python 的 &lt;img src="https://chimez.github.io/sphinx-documentation-generator.org" alt="Sphinx"&gt; 默认语言。
&lt;/p&gt;
&lt;/div&gt;

&lt;div id="outline-container-org03c9ae0" class="outline-3"&gt;
&lt;h3 id="org03c9ae0"&gt;基本语法&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-org03c9ae0"&gt;
&lt;/div&gt;
&lt;div id="outline-container-orgd233c33" class="outline-4"&gt;
&lt;h4 id="orgd233c33"&gt;段落&lt;/h4&gt;
&lt;div class="outline-text-4" id="text-orgd233c33"&gt;
&lt;p&gt;
与 python 类似，reST 中用缩进表示不同的层级。
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-orgec5c14d" class="outline-4"&gt;
&lt;h4 id="orgec5c14d"&gt;行内标记&lt;/h4&gt;
&lt;div class="outline-text-4" id="text-orgec5c14d"&gt;
&lt;pre class="example" id="org70bd637"&gt;
*something*               | 斜体
**something**             | 粗体
``code``                  | 行内代码
`title &amp;lt;http://to.link&amp;gt;`_ | 外部链接
`my link`_                | 分开的链接
.. _my link: http::/a.link
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-orgc8710ec" class="outline-4"&gt;
&lt;h4 id="orgc8710ec"&gt;列表&lt;/h4&gt;
&lt;div class="outline-text-4" id="text-orgc8710ec"&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    1. 编号列表
    2. 编号列表

    * 无编号列表
    * 无编号列表

    #. 还是编号列表
    #. 还是编号列表


    * 列表可以嵌套

      * 但是要空一行
      * 并且缩进
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-orga2253fe" class="outline-4"&gt;
&lt;h4 id="orga2253fe"&gt;引用块&lt;/h4&gt;
&lt;div class="outline-text-4" id="text-orga2253fe"&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    引用块，末尾用双冒号::

      空一行

      并且缩进

    空一行就结束
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-orgb2ba9fe" class="outline-4"&gt;
&lt;h4 id="orgb2ba9fe"&gt;表格&lt;/h4&gt;
&lt;div class="outline-text-4" id="text-orgb2ba9fe"&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    完整的表格

    +------------------------+------------+----------+----------+
    | Header row, column 1   | Header 2   | Header 3 | Header 4 |
    | (header rows optional) |            |          |          |
    +========================+============+==========+==========+
    | body row 1, column 1   | column 2   | column 3 | column 4 |
    +------------------------+------------+----------+----------+
    | body row 2             | ...        | ...      |          |
    +------------------------+------------+----------+----------+

    简化的表格

    =====  =====  =======
    A      B      A and B
    =====  =====  =======
    False  False  False
    True   False  False
    False  True   False
    True   True   True
    =====  =====  =======
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-org8a6e22c" class="outline-4"&gt;
&lt;h4 id="org8a6e22c"&gt;标题&lt;/h4&gt;
&lt;div class="outline-text-4" id="text-org8a6e22c"&gt;
&lt;pre class="example" id="org565faa8"&gt;
# | parts
* | chapters
= | sections
- | subsections
^ | subsubsections
" | paragraphs
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-orgbc102c0" class="outline-3"&gt;
&lt;h3 id="orgbc102c0"&gt;指令&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-orgbc102c0"&gt;
&lt;p&gt;
reST 支持很多指令，这里是常用的几个
&lt;/p&gt;
&lt;/div&gt;

&lt;ul class="org-ul"&gt;
&lt;li&gt;&lt;a id="org49dfe76"&gt;&lt;/a&gt;&lt;code&gt;image&lt;/code&gt; 图片&lt;br&gt;&lt;/li&gt;

&lt;li&gt;&lt;a id="orgca1cc8a"&gt;&lt;/a&gt;&lt;code&gt;[#footnote]_&lt;/code&gt; 脚注&lt;br&gt;&lt;/li&gt;

&lt;li&gt;&lt;a id="org45a538a"&gt;&lt;/a&gt;&lt;code&gt;..&lt;/code&gt; 注释&lt;br&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;

&lt;div id="outline-container-orgfefb176" class="outline-3"&gt;
&lt;h3 id="orgfefb176"&gt;角色&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-orgfefb176"&gt;
&lt;p&gt;
reST 使用 &lt;code&gt;:rolename:`content`&lt;/code&gt; 语法来做一些复杂的行内标记
&lt;/p&gt;
&lt;/div&gt;

&lt;div id="outline-container-orgece0e5e" class="outline-4"&gt;
&lt;h4 id="orgece0e5e"&gt;&lt;code&gt;:ref:&lt;/code&gt; 交叉引用&lt;/h4&gt;
&lt;/div&gt;

&lt;div id="outline-container-orgf87f3a1" class="outline-4"&gt;
&lt;h4 id="orgf87f3a1"&gt;&lt;code&gt;:math:&lt;/code&gt; 数学公式&lt;/h4&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;</description><category>doc</category><category>python</category><category>rst</category><guid>https://chimez.github.io/posts/restructuredtext/</guid><pubDate>Mon, 16 Aug 2021 02:46:27 GMT</pubDate></item><item><title>Sphinx: Documentation Generator</title><link>https://chimez.github.io/posts/sphinx-documentation-generator/</link><dc:creator>chimez</dc:creator><description>&lt;div id="outline-container-orgcc2ae68" class="outline-2"&gt;
&lt;h2 id="orgcc2ae68"&gt;Sphinx: 文档生成&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-orgcc2ae68"&gt;
&lt;p&gt;
&lt;a href="https://www.sphinx-doc.org/en/master/usage/quickstart.html"&gt;sphinx/getting started&lt;/a&gt;
&lt;/p&gt;
&lt;/div&gt;

&lt;div id="outline-container-orga2b48e4" class="outline-3"&gt;
&lt;h3 id="orga2b48e4"&gt;创建与配置项目&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-orga2b48e4"&gt;
&lt;/div&gt;
&lt;div id="outline-container-orgccd568b" class="outline-4"&gt;
&lt;h4 id="orgccd568b"&gt;&lt;code&gt;sphinx-quickstart&lt;/code&gt;&lt;/h4&gt;
&lt;div class="outline-text-4" id="text-orgccd568b"&gt;
&lt;p&gt;
使用这个命令，快速创建项目。跟随指导做一些选项。
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-org5c21a9a" class="outline-4"&gt;
&lt;h4 id="org5c21a9a"&gt;生成文档&lt;/h4&gt;
&lt;div class="outline-text-4" id="text-org5c21a9a"&gt;
&lt;p&gt;
使用命令 &lt;code&gt;sphinx-build -b html sourcedir builddir&lt;/code&gt; 或者 &lt;code&gt;make html&lt;/code&gt;
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-org9c7b3f9" class="outline-4"&gt;
&lt;h4 id="org9c7b3f9"&gt;基本配置&lt;/h4&gt;
&lt;div class="outline-text-4" id="text-org9c7b3f9"&gt;
&lt;p&gt;
基本配置在 &lt;code&gt;conf.py&lt;/code&gt; 文件中。这个文件就是一个python 脚本，可以执行各种python函数和导入其它库等。
&lt;/p&gt;

&lt;p&gt;
配置参考&lt;a href="https://www.sphinx-doc.org/en/master/usage/configuration.html"&gt;configuration&lt;/a&gt;
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-orgf60df45" class="outline-3"&gt;
&lt;h3 id="orgf60df45"&gt;写文档&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-orgf60df45"&gt;
&lt;/div&gt;
&lt;div id="outline-container-orgaa91ba5" class="outline-4"&gt;
&lt;h4 id="orgaa91ba5"&gt;文档结构&lt;/h4&gt;
&lt;div class="outline-text-4" id="text-orgaa91ba5"&gt;
&lt;ol class="org-ol"&gt;
&lt;li&gt;&lt;code&gt;index.rst&lt;/code&gt; 文件是文档的欢迎页面，其中包括
&lt;ol class="org-ol"&gt;
&lt;li&gt;目录树 &lt;code&gt;toctree&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-orgcac1ea5" class="outline-4"&gt;
&lt;h4 id="orgcac1ea5"&gt;reStructuredText directives&lt;/h4&gt;
&lt;div class="outline-text-4" id="text-orgcac1ea5"&gt;
&lt;p&gt;
rst 指令的格式中包括
&lt;/p&gt;
&lt;ol class="org-ol"&gt;
&lt;li&gt;参数：在指令名后面的冒号之后，每个指令可以有若干个参数&lt;/li&gt;
&lt;li&gt;选项：在参数之后，选项的形式是 &lt;code&gt;名-值&lt;/code&gt; 的列表，一行一个&lt;/li&gt;
&lt;li&gt;内容：在参数之后空一行&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;

&lt;ul class="org-ul"&gt;
&lt;li&gt;&lt;a id="org49a8a6c"&gt;&lt;/a&gt;&lt;code&gt;toctree&lt;/code&gt; 目录&lt;br&gt;
&lt;div class="outline-text-5" id="text-org49a8a6c"&gt;
&lt;p&gt;
参考：&lt;a href="https://www.sphinx-doc.org/en/master/usage/restructuredtext/directives.html#toctree-directive"&gt;directives/toctree-directive&lt;/a&gt;
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;     .. toctree::
        :maxdepth: 2

        intro
        strings
        datatypes
        numeric
        (many more documents listed here)
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;

&lt;ul class="org-ul"&gt;
&lt;li&gt;&lt;a id="org8bc44af"&gt;&lt;/a&gt;内容&lt;br&gt;
&lt;div class="outline-text-6" id="text-org8bc44af"&gt;
&lt;p&gt;
内容中每一行就是要链接到的文件名, 可以用 &lt;code&gt;Net Title &amp;lt;filename&amp;gt;&lt;/code&gt; 重新指定显示的标题
&lt;/p&gt;
&lt;/div&gt;
&lt;/li&gt;

&lt;li&gt;&lt;a id="org4d1a789"&gt;&lt;/a&gt;选项&lt;br&gt;
&lt;div class="outline-text-6" id="text-org4d1a789"&gt;
&lt;table border="2" cellspacing="0" cellpadding="6" rules="groups" frame="hsides"&gt;


&lt;colgroup&gt;
&lt;col class="org-left"&gt;

&lt;col class="org-left"&gt;
&lt;/colgroup&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th scope="col" class="org-left"&gt;选项&lt;/th&gt;
&lt;th scope="col" class="org-left"&gt;作用&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class="org-left"&gt;&lt;code&gt;:numbered:&lt;/code&gt;&lt;/td&gt;
&lt;td class="org-left"&gt;给目录编号&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="org-left"&gt;&lt;code&gt;:caption: Table of Contents&lt;/code&gt;&lt;/td&gt;
&lt;td class="org-left"&gt;目录的标题&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="org-left"&gt;&lt;code&gt;:name: mastertoc&lt;/code&gt;&lt;/td&gt;
&lt;td class="org-left"&gt;设置 &lt;code&gt;ref&lt;/code&gt; 用的名字&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="org-left"&gt;&lt;code&gt;:titlesonly:&lt;/code&gt;&lt;/td&gt;
&lt;td class="org-left"&gt;只显示文件标题&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="org-left"&gt;&lt;code&gt;:glob:&lt;/code&gt;&lt;/td&gt;
&lt;td class="org-left"&gt;可以使用 &lt;code&gt;*&lt;/code&gt; 匹配很多文件&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="org-left"&gt;&lt;code&gt;:hidden:&lt;/code&gt;&lt;/td&gt;
&lt;td class="org-left"&gt;链接，但不显示&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="org-left"&gt;&lt;code&gt;:includehidden:&lt;/code&gt;&lt;/td&gt;
&lt;td class="org-left"&gt;只链接一级标题，隐藏其它的&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="org-left"&gt;&lt;code&gt;:maxdepth: 2&lt;/code&gt;&lt;/td&gt;
&lt;td class="org-left"&gt;目录层级深度&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;

&lt;div id="outline-container-orgd55e34b" class="outline-4"&gt;
&lt;h4 id="orgd55e34b"&gt;Domains&lt;/h4&gt;
&lt;div class="outline-text-4" id="text-orgd55e34b"&gt;
&lt;p&gt;
为了对应 python/c++ 中的名字空间，防止函数名冲突，要把函数的文档写在 domain 里。
&lt;/p&gt;

&lt;p&gt;
参考 &lt;a href="https://www.sphinx-doc.org/en/master/usage/restructuredtext/domains.html"&gt;domains&lt;/a&gt;
&lt;/p&gt;
&lt;/div&gt;

&lt;ul class="org-ul"&gt;
&lt;li&gt;&lt;a id="org918e580"&gt;&lt;/a&gt;基本语法&lt;br&gt;
&lt;div class="outline-text-5" id="text-org918e580"&gt;
&lt;p&gt;
可以一次生成两个函数
&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;     .. py:function:: spam(eggs)
                      ham(eggs)

        Spam or ham the foo.
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
如果一个函数很长，可以折行并加上 &lt;code&gt;:noindex:&lt;/code&gt;
&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;     .. py:function:: filterwarnings(action, message='', category=Warning, \
                                     module='', lineno=0, append=False)
        :noindex:
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
默认的 domain 是 python，可以用 &lt;code&gt;.. default-domain:: name&lt;/code&gt; 修改
&lt;/p&gt;
&lt;/div&gt;
&lt;/li&gt;

&lt;li&gt;&lt;a id="orga423a65"&gt;&lt;/a&gt;交叉引用&lt;br&gt;
&lt;div class="outline-text-5" id="text-orga423a65"&gt;
&lt;p&gt;
基本语法是 &lt;code&gt;:role:`title &amp;lt;target&amp;gt;`&lt;/code&gt; 这会引用 &lt;code&gt;target&lt;/code&gt; 但显示的是 &lt;code&gt;title&lt;/code&gt;
&lt;/p&gt;
&lt;ol class="org-ol"&gt;
&lt;li&gt;前面加 &lt;code&gt;!&lt;/code&gt; 不生成引用&lt;/li&gt;
&lt;li&gt;前面加 波浪线 &lt;code&gt;\~&lt;/code&gt; 只会显示最后一个元素的引用 &lt;code&gt;:py:meth:`\~Queue.Queue.get`&lt;/code&gt; 只显示 &lt;code&gt;get&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a id="orgdd9395b"&gt;&lt;/a&gt;C++&lt;br&gt;
&lt;div class="outline-text-5" id="text-orgdd9395b"&gt;
&lt;p&gt;
参考 &lt;a href="https://www.sphinx-doc.org/en/master/usage/restructuredtext/domains.html#cpp-domain"&gt;domains/cpp-domain&lt;/a&gt;     
&lt;/p&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;


&lt;div id="outline-container-org38a3b5e" class="outline-3"&gt;
&lt;h3 id="org38a3b5e"&gt;Autodoc: 注释文档&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-org38a3b5e"&gt;
&lt;p&gt;
通过 autodoc 可以从源码的注释生成文档。需要在 &lt;code&gt;conf.py&lt;/code&gt; 的 &lt;code&gt;extensions&lt;/code&gt; 中加入 &lt;code&gt;'sphinx.ext.autodoc'&lt;/code&gt; . 之后就可以利用 &lt;code&gt;autofunction&lt;/code&gt; &lt;code&gt;automodule&lt;/code&gt; 等指令，将注释作为文档导入。
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;


&lt;div id="outline-container-org308215b" class="outline-3"&gt;
&lt;h3 id="org308215b"&gt;breathe&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-org308215b"&gt;
&lt;p&gt;
&lt;a href="https://breathe.readthedocs.io/en/latest/index.html"&gt;breathe&lt;/a&gt; 是通过 doxygen 生成 c/c++ 的文档的工具
&lt;/p&gt;
&lt;/div&gt;

&lt;div id="outline-container-org48d19b1" class="outline-4"&gt;
&lt;h4 id="org48d19b1"&gt;基本使用&lt;/h4&gt;
&lt;div class="outline-text-4" id="text-org48d19b1"&gt;
&lt;p&gt;
设置 &lt;code&gt;conf.py&lt;/code&gt;
&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    &lt;span class="n"&gt;breathe_projects_source&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="s2"&gt;"my_proj"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"../src"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;"oneheader.h"&lt;/span&gt;&lt;span class="p"&gt;]),&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="n"&gt;breathe_default_project&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"my_proj"&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
就可以在 &lt;code&gt;index.rst&lt;/code&gt; 中使用
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    .. autodoxygenfile:: oneheader.h
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;</description><category>Documents</category><category>python</category><guid>https://chimez.github.io/posts/sphinx-documentation-generator/</guid><pubDate>Mon, 16 Aug 2021 02:00:41 GMT</pubDate></item><item><title>cython</title><link>https://chimez.github.io/posts/cython/</link><dc:creator>chimez</dc:creator><description>&lt;div id="outline-container-org9e97e42" class="outline-2"&gt;
&lt;h2 id="org9e97e42"&gt;Cython&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-org9e97e42"&gt;
&lt;/div&gt;
&lt;div id="outline-container-orgd0fab38" class="outline-3"&gt;
&lt;h3 id="orgd0fab38"&gt;基本概念&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-orgd0fab38"&gt;
&lt;/div&gt;
&lt;div id="outline-container-orgce20ccd" class="outline-4"&gt;
&lt;h4 id="orgce20ccd"&gt;文件&lt;/h4&gt;
&lt;div class="outline-text-4" id="text-orgce20ccd"&gt;
&lt;ol class="org-ol"&gt;
&lt;li&gt;&lt;code&gt;.pyx&lt;/code&gt; 是 &lt;code&gt;cython&lt;/code&gt; 语法的源文件&lt;/li&gt;
&lt;li&gt;&lt;code&gt;.pyd&lt;/code&gt; (windows) 是 windows 平台上编译后的文件，对应 linux 平台的 &lt;code&gt;*.so&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;.pyd&lt;/code&gt; (源文件) 是外部声明，即对 &lt;code&gt;.h&lt;/code&gt; 头文件的重新封装&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-orge8c94e3" class="outline-4"&gt;
&lt;h4 id="orge8c94e3"&gt;库&lt;/h4&gt;
&lt;div class="outline-text-4" id="text-orge8c94e3"&gt;
&lt;ol class="org-ol"&gt;
&lt;li&gt;&lt;code&gt;Cython.Build&lt;/code&gt; python 端调用，用于编译&lt;/li&gt;
&lt;li&gt;&lt;code&gt;cython.parallel&lt;/code&gt; cython 端调用，并行 &lt;code&gt;prange&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;
所有 c 库在 &lt;a href="https://github.com/cython/cython/tree/master/Cython/Includes"&gt;Cython/Includes&lt;/a&gt; 中
&lt;/p&gt;
&lt;ol class="org-ol"&gt;
&lt;li&gt;&lt;code&gt;libc&lt;/code&gt; cython 端调用， c 标准库&lt;/li&gt;
&lt;li&gt;&lt;code&gt;libcpp&lt;/code&gt; cython 端调用， c++ stl 库&lt;/li&gt;
&lt;li&gt;&lt;code&gt;numpy&lt;/code&gt; cython 端调用，numpy 支持&lt;/li&gt;
&lt;li&gt;&lt;code&gt;posix&lt;/code&gt; cython 端调用，posix 库&lt;/li&gt;
&lt;li&gt;&lt;code&gt;openmp&lt;/code&gt; cython 端调用，并行&lt;/li&gt;
&lt;li&gt;&lt;code&gt;cpython&lt;/code&gt; cython 端调用， python 的 c 接口&lt;/li&gt;
&lt;li&gt;&lt;code&gt;cython&lt;/code&gt; cython 端调用，控制特殊行为&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-org0ab0263" class="outline-4"&gt;
&lt;h4 id="org0ab0263"&gt;语法&lt;/h4&gt;
&lt;div class="outline-text-4" id="text-org0ab0263"&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    from libc.math cimport log2 # 引入 c 函数
    cdef int x # 声明变量类型
    cdef int [:,:] x # 声明变量是 numpy 的 2d 向量
    ctypedef struct queue: # 声明类型
        pass

    ctypedef fused my_type: # 泛型
        int
        double
        long long

    # 类的定义，注意使用 __cinit__
    cdef class A:
        cdef int a
        def __cinit__(self):
            self.a = 1

    &amp;lt;void*&amp;gt;value # 类型转换成指针

    # 定义 c 函数，异常时返回 -1
    cdef int func(int x) execpt? -1:
        pass
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-org4565b12" class="outline-4"&gt;
&lt;h4 id="org4565b12"&gt;文件注解&lt;/h4&gt;
&lt;div class="outline-text-4" id="text-org4565b12"&gt;
&lt;ol class="org-ol"&gt;
&lt;li&gt;&lt;code&gt;# distutils: language=c++&lt;/code&gt; 使用 &lt;code&gt;c++&lt;/code&gt; 编译&lt;/li&gt;
&lt;li&gt;&lt;code&gt;# distutils: sources = c-algorithms/src/queue.c&lt;/code&gt; 指定静态链接的源文件&lt;/li&gt;
&lt;li&gt;&lt;code&gt;# distutils: include_dirs = c-algorithms/src/&lt;/code&gt; 指定头文件目录&lt;/li&gt;
&lt;li&gt;&lt;code&gt;# distutils: extra_compile_args=-fopenmp&lt;/code&gt; 指定编译器参数&lt;/li&gt;
&lt;li&gt;&lt;code&gt;# distutils: extra_link_args=-fopenmp&lt;/code&gt; 指定链接参数&lt;/li&gt;
&lt;li&gt;&lt;code&gt;# cython: infer_types=True&lt;/code&gt; 自动推断类型，只作用于一级缩进的变量&lt;/li&gt;
&lt;li&gt;&lt;code&gt;# cython: profile=True&lt;/code&gt; 开启 profile&lt;/li&gt;
&lt;li&gt;&lt;code&gt;# cython: linetrace=True&lt;/code&gt; 开启 profile 行追踪&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-org07de030" class="outline-4"&gt;
&lt;h4 id="org07de030"&gt;函数注解&lt;/h4&gt;
&lt;div class="outline-text-4" id="text-org07de030"&gt;
&lt;ol class="org-ol"&gt;
&lt;li&gt;&lt;code&gt;@cython.boundscheck(False)&lt;/code&gt; 关闭数组边界检查&lt;/li&gt;
&lt;li&gt;&lt;code&gt;@cython.wraparound(False)&lt;/code&gt; 关闭负指标&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-org5fbf539" class="outline-3"&gt;
&lt;h3 id="org5fbf539"&gt;编译&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-org5fbf539"&gt;
&lt;/div&gt;
&lt;div id="outline-container-orgadde2fc" class="outline-4"&gt;
&lt;h4 id="orgadde2fc"&gt;基本结构&lt;/h4&gt;
&lt;div class="outline-text-4" id="text-orgadde2fc"&gt;
&lt;p&gt;
&lt;code&gt;setup.py&lt;/code&gt;
&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    &lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;setuptools&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;setup&lt;/span&gt;
    &lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;Cython.Build&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;cythonize&lt;/span&gt;

    &lt;span class="n"&gt;setup&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="n"&gt;ext_modules&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;cythonize&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"helloworld.pyx"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
&lt;code&gt;helloworld.pyx&lt;/code&gt;
&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    &lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"Hello World"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
执行命令
&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    python setup.py build_ext --inplace
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
这编译得到的 &lt;code&gt;helloworld.so&lt;/code&gt; 或 &lt;code&gt;helloworld.pyd&lt;/code&gt;
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-org0f7b105" class="outline-4"&gt;
&lt;h4 id="org0f7b105"&gt;动态链接&lt;/h4&gt;
&lt;div class="outline-text-4" id="text-org0f7b105"&gt;
&lt;p&gt;
&lt;a href="https://cython.readthedocs.io/en/latest/src/tutorial/external.html#dynamic-linking"&gt;参考&lt;/a&gt;
&lt;/p&gt;

&lt;p&gt;
需要指明 &lt;code&gt;libraries&lt;/code&gt; 参数
&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    &lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;setuptools&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Extension&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;setup&lt;/span&gt;
    &lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;Cython.Build&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;cythonize&lt;/span&gt;

    &lt;span class="n"&gt;ext_modules&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
        &lt;span class="n"&gt;Extension&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"demo"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                  &lt;span class="n"&gt;sources&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;"demo.pyx"&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
                  &lt;span class="n"&gt;libraries&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;"m"&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;  &lt;span class="c1"&gt;# Unix-like specific&lt;/span&gt;
                  &lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;]&lt;/span&gt;

    &lt;span class="n"&gt;setup&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"Demos"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
          &lt;span class="n"&gt;ext_modules&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;cythonize&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ext_modules&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-orge37e032" class="outline-4"&gt;
&lt;h4 id="orge37e032"&gt;静态链接&lt;/h4&gt;
&lt;div class="outline-text-4" id="text-orge37e032"&gt;
&lt;p&gt;
使用注解 
&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    # distutils: sources = c-algorithms/src/queue.c
    # distutils: include_dirs = c-algorithms/src/

    pass
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-org0488a8e" class="outline-3"&gt;
&lt;h3 id="org0488a8e"&gt;使用 c 库&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-org0488a8e"&gt;
&lt;/div&gt;
&lt;div id="outline-container-orge08828b" class="outline-4"&gt;
&lt;h4 id="orge08828b"&gt;外部声明&lt;/h4&gt;
&lt;div class="outline-text-4" id="text-orge08828b"&gt;
&lt;p&gt;
使用头文件, 外部声明可以放在 &lt;code&gt;.pyd&lt;/code&gt; 文件中
&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    cdef extern from "math.h":
        double sin(double x)
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-org25e59ee" class="outline-4"&gt;
&lt;h4 id="org25e59ee"&gt;异常处理&lt;/h4&gt;
&lt;div class="outline-text-4" id="text-org25e59ee"&gt;
&lt;ol class="org-ol"&gt;
&lt;li&gt;&lt;code&gt;except? -1&lt;/code&gt; 语法表示当发生任何错误时，返回 &lt;code&gt;-1&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;execpt *&lt;/code&gt; 表示返回时调用 &lt;code&gt;PyErr_Occurred()&lt;/code&gt; ，当函数返回 &lt;code&gt;void&lt;/code&gt; 并且需要传递错误时使用这个&lt;/li&gt;
&lt;/ol&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    cdef int pop(self) except? -1:
        if cqueue.queue_is_empty(self._c_queue):
            raise IndexError("Queue is empty")
        return &amp;lt;Py_ssize_t&amp;gt;cqueue.queue_pop_head(self._c_queue)

    cdef int spam() except *:
        ...
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-orgd2ee531" class="outline-3"&gt;
&lt;h3 id="orgd2ee531"&gt;使用 numpy&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-orgd2ee531"&gt;
&lt;p&gt;
numpy 的 &lt;code&gt;ndarray&lt;/code&gt; 在 cython 中用做 typed memoryview
&lt;/p&gt;
&lt;/div&gt;

&lt;div id="outline-container-org192254a" class="outline-4"&gt;
&lt;h4 id="org192254a"&gt;基本例子&lt;/h4&gt;
&lt;div class="outline-text-4" id="text-org192254a"&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    import numpy as np

    DTYPE = np.intc


    cdef int clip(int a, int min_value, int max_value):
        return min(max(a, min_value), max_value)


    def compute(int[:, :] array_1, int[:, :] array_2, int a, int b, int c):

        cdef Py_ssize_t x_max = array_1.shape[0]
        cdef Py_ssize_t y_max = array_1.shape[1]
        assert tuple(array_1.shape) == tuple(array_2.shape)

        result = np.zeros((x_max, y_max), dtype=DTYPE)
        cdef int[:, :] result_view = result

        cdef int tmp
        cdef Py_ssize_t x, y

        for x in range(x_max):
            for y in range(y_max):

                tmp = clip(array_1[x, y], 2, 10)
                tmp = tmp * a + array_2[x, y] * b
                result_view[x, y] = tmp + c

        return result
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-org34a5353" class="outline-3"&gt;
&lt;h3 id="org34a5353"&gt;并行&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-org34a5353"&gt;
&lt;ol class="org-ol"&gt;
&lt;li&gt;使用 &lt;code&gt;prange&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;
使用 &lt;code&gt;nogil&lt;/code&gt;
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;      from cython.parallel import prange
      cdef int func(int x) nogil:
          cdef int i
          cdef int y
          for i in prange(x, nogil=True):
              y += i 
          return y
&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;</description><category>cython</category><category>python</category><guid>https://chimez.github.io/posts/cython/</guid><pubDate>Thu, 05 Aug 2021 12:47:25 GMT</pubDate></item><item><title>joblib</title><link>https://chimez.github.io/posts/joblib/</link><dc:creator>chimez</dc:creator><description>&lt;div id="outline-container-orgd57640c" class="outline-2"&gt;
&lt;h2 id="orgd57640c"&gt;joblib: 简单的并行&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-orgd57640c"&gt;
&lt;p&gt;
&lt;a href="https://joblib.readthedocs.io/"&gt;joblib&lt;/a&gt;是一个易用的，无依赖的 python 库，主要用来很方便的做并行。
&lt;/p&gt;
&lt;/div&gt;

&lt;div id="outline-container-org052b9d1" class="outline-3"&gt;
&lt;h3 id="org052b9d1"&gt;简单的并行&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-org052b9d1"&gt;
&lt;p&gt;
对一个 &lt;code&gt;for&lt;/code&gt; 循环并行化，基本上只需要两个函数 &lt;code&gt;Parallel&lt;/code&gt; 和 &lt;code&gt;delayed&lt;/code&gt; ，用 &lt;code&gt;delayed&lt;/code&gt; 包裹要并行的函数，并用列表推导式生成所有参数，再把这些东西扔给 &lt;code&gt;Parallel&lt;/code&gt; 函数，返回的就是并行后的结果了。
&lt;/p&gt;

&lt;p&gt;
基本上相当于 &lt;code&gt;multiprocessing.Pool.map&lt;/code&gt;
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;   &lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;joblib&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Parallel&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;delayed&lt;/span&gt;
   &lt;span class="n"&gt;Parallel&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n_jobs&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)(&lt;/span&gt;&lt;span class="n"&gt;delayed&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sqrt&lt;/span&gt;&lt;span class="p"&gt;)(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
&lt;code&gt;Parallel&lt;/code&gt; 函数的参数用来指定并行的后端 &lt;code&gt;backend&lt;/code&gt; 、每批次执行的任务数、并行线程数等等
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;


&lt;div id="outline-container-org1bead3a" class="outline-2"&gt;
&lt;h2 id="org1bead3a"&gt;Tips&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-org1bead3a"&gt;
&lt;/div&gt;
&lt;div id="outline-container-org76eae8b" class="outline-3"&gt;
&lt;h3 id="org76eae8b"&gt;读取时避免锁&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-org76eae8b"&gt;
&lt;p&gt;
使用 &lt;code&gt;multiprocessing.shared_memory&lt;/code&gt; 创建共享内存，并把内存地址名作为参数传递
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;</description><category>parallel</category><category>python</category><guid>https://chimez.github.io/posts/joblib/</guid><pubDate>Sun, 06 Jun 2021 05:34:10 GMT</pubDate></item><item><title>Extending Python with C</title><link>https://chimez.github.io/posts/extending-python-with-c/</link><dc:creator>chimez</dc:creator><description>&lt;div id="outline-container-orga1cd8f4" class="outline-2"&gt;
&lt;h2 id="orga1cd8f4"&gt;用 C 扩展 Python&lt;/h2&gt;
&lt;/div&gt;</description><category>C</category><category>ffi</category><category>python</category><guid>https://chimez.github.io/posts/extending-python-with-c/</guid><pubDate>Mon, 03 May 2021 11:16:46 GMT</pubDate></item><item><title>Performant Python</title><link>https://chimez.github.io/posts/performant-python/</link><dc:creator>chimez</dc:creator><description>&lt;div id="outline-container-orgd95e738" class="outline-2"&gt;
&lt;h2 id="orgd95e738"&gt;Python 性能&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-orgd95e738"&gt;
&lt;/div&gt;
&lt;div id="outline-container-orge42d724" class="outline-3"&gt;
&lt;h3 id="orge42d724"&gt;计算机结构&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-orge42d724"&gt;
&lt;p&gt;
简单来说，计算机由计算单元、储存单元和二者之间的通信构成。
&lt;/p&gt;
&lt;/div&gt;

&lt;div id="outline-container-org5517989" class="outline-4"&gt;
&lt;h4 id="org5517989"&gt;计算单元&lt;/h4&gt;
&lt;div class="outline-text-4" id="text-org5517989"&gt;
&lt;p&gt;
计算单元一般是 CPU 和 GPU 等。
&lt;/p&gt;

&lt;p&gt;
计算单元重要的两个参数是
&lt;/p&gt;
&lt;ol class="org-ol"&gt;
&lt;li&gt;每周期指令 (instructions per cycle, IPC): 每个时钟周期执行的指令数&lt;/li&gt;
&lt;li&gt;时钟速度：每秒的时钟周期&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;
如果提高时钟速度了，当然运行速度会变快。另一种方法是增加每个指令的计算量，通过向量化的方式，可以在一个指令中同时处理多个数据，即 SIMD(single instruction multiple data).
&lt;/p&gt;

&lt;p&gt;
由于物理和技术限制，时钟速度的增加基本停止了，所以增加同一时间内运算量的方法就是增加更多的 CPU， 即并行化。
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-orgba7e1f3" class="outline-4"&gt;
&lt;h4 id="orgba7e1f3"&gt;Amdahl'a law&lt;/h4&gt;
&lt;div class="outline-text-4" id="text-orgba7e1f3"&gt;
&lt;p&gt;
经验定律：并行程序的加速上限取决于不能并行化的最小单元。
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-org52ac7f0" class="outline-4"&gt;
&lt;h4 id="org52ac7f0"&gt;存储单元&lt;/h4&gt;
&lt;div class="outline-text-4" id="text-org52ac7f0"&gt;
&lt;p&gt;
存储单元包括：机械硬盘、固态硬盘、RAM、L1/L2 等。主要的区别就是速度。一般来说速度越快容量越小。
&lt;/p&gt;

&lt;p&gt;
存储单元速度通常比计算单元慢，所以主要的优化手段就是异步 I/O 和预先缓存，保证计算设备进行计算的时候数据已经准备好了。
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-orgf5b5959" class="outline-4"&gt;
&lt;h4 id="orgf5b5959"&gt;总线&lt;/h4&gt;
&lt;div class="outline-text-4" id="text-orgf5b5959"&gt;
&lt;p&gt;
计算单元和存储单元通过总线连接。
总线最重要的参数是总线宽度和总线频率。
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-orgd7bff08" class="outline-2"&gt;
&lt;h2 id="orgd7bff08"&gt;从源码安装 python&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-orgd7bff08"&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;openssl 通过 &lt;code&gt;--with-openssl&lt;/code&gt; 指定&lt;/li&gt;
&lt;li&gt;sqlite 通过修改 &lt;code&gt;setup.py&lt;/code&gt; 中的 &lt;code&gt;sqlite_inc_paths&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;
libffi 通过 &lt;code&gt;CPPFLAGS&lt;/code&gt;, &lt;code&gt;LDFLAGS&lt;/code&gt; 指定
&lt;/p&gt;

&lt;p&gt;
参考编译选项
&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;  ./configure --prefix=$HOME/app/python --enable-optimizations --with-openssl=$HOME/app/openssl --enable-shared PKG_CONFIG_LIBDIR=$PKG_CONFIG_PATH LIBFFI_INCLUDEDIR=/vol7/home/zhongpg/app/libffi/include --with-system-ffi=/vol7/home/zhongpg/app/libffi/lib64 CPPFLAGS="-I /vol7/home/zhongpg/app/libffi/include" LDFLAGS="-L/vol7/home/zhongpg/app/libffi/lib64"
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-org9c310d3" class="outline-2"&gt;
&lt;h2 id="org9c310d3"&gt;从源码安装 numpy, scipy&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-org9c310d3"&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;numpy 依赖
&lt;ul class="org-ul"&gt;
&lt;li&gt;cython: &lt;code&gt;pip install cython&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;

&lt;li&gt;scipy 依赖
&lt;ul class="org-ul"&gt;
&lt;li&gt;pybind11: &lt;code&gt;pip install "pybind11[global]"&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;pythran: &lt;code&gt;pip install pythran&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;执行 &lt;code&gt;git submodule update --init&lt;/code&gt; 来自动下载一些包&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;
设置 &lt;code&gt;site.cfg&lt;/code&gt;
&lt;/p&gt;

&lt;p&gt;
执行安装
&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;  python3 setup.py build -j 10 install
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;</description><category>python</category><guid>https://chimez.github.io/posts/performant-python/</guid><pubDate>Fri, 23 Apr 2021 14:03:52 GMT</pubDate></item><item><title>PyTables</title><link>https://chimez.github.io/posts/pytables/</link><dc:creator>chimez</dc:creator><description>&lt;div id="outline-container-org468c0a4" class="outline-2"&gt;
&lt;h2 id="org468c0a4"&gt;PyTables: 分层数据集&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-org468c0a4"&gt;
&lt;p&gt;
&lt;a href="https://www.pytables.org"&gt;PyTables&lt;/a&gt; 是基于 HDF5 格式构建的数据集，比 pandas 更底层，比 h5py 更高层。适合用在存储比 csv 表格更复杂更大的数据，同时又不想自己实现一些基本的数据操作的情况中，并且经过简单的处理就能用 pandas 进行进一步数据分析。
&lt;/p&gt;
&lt;/div&gt;


&lt;div id="outline-container-org21f2acc" class="outline-3"&gt;
&lt;h3 id="org21f2acc"&gt;安装&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-org21f2acc"&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;   # 使用 conda
   conda install pytables
   # 或者 pip
   python3 -m pip install tables
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
测试
&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;   &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;tables&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nn"&gt;tb&lt;/span&gt;

   &lt;span class="n"&gt;tb&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;test&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-orgabea914" class="outline-3"&gt;
&lt;h3 id="orgabea914"&gt;基本使用&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-orgabea914"&gt;
&lt;p&gt;
pytables 的基本逻辑是
&lt;/p&gt;
&lt;/div&gt;

&lt;div id="outline-container-orga67803a" class="outline-4"&gt;
&lt;h4 id="orga67803a"&gt;创建一个 HDF5 文件&lt;/h4&gt;
&lt;div class="outline-text-4" id="text-orga67803a"&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    &lt;span class="n"&gt;f&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;tb&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;open_file&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"filename.h5"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;mode&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"w"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;title&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"file title"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;filters&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;tb&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Filters&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;complevel&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;9&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

    &lt;span class="c1"&gt;# 别忘了还要关闭它&lt;/span&gt;
    &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;close&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-org8b1cab8" class="outline-4"&gt;
&lt;h4 id="org8b1cab8"&gt;在文件中创建任意层的数据集&lt;/h4&gt;
&lt;div class="outline-text-4" id="text-org8b1cab8"&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    &lt;span class="n"&gt;g&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;create_group&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"/parent/group"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"group_name"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;title&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"group title"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-orgfbee49e" class="outline-4"&gt;
&lt;h4 id="orgfbee49e"&gt;在数据集中创建若干个数据表&lt;/h4&gt;
&lt;div class="outline-text-4" id="text-orgfbee49e"&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    &lt;span class="c1"&gt;# 需要创建对数据的描述&lt;/span&gt;
    &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;data_description&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;tb&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;IsDescription&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;tb&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;StringCol&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;idn&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;tb&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Int64Col&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;sub_data&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;tb&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;IsDescription&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
            &lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;tb&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;StringCol&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="n"&gt;id2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;tb&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Float64Col&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;shape&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

    &lt;span class="c1"&gt;# 然后创建空的数据表       &lt;/span&gt;
    &lt;span class="n"&gt;t&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;create_table&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;g&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"table_name"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;data_description&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="c1"&gt;# 在里面循环添加记录&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;row&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;"name"&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"a"&lt;/span&gt;
        &lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;row&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;"idn"&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;
        &lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;row&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;"sub_data"&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s1"&gt;'asd_&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;random&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;rand&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
        &lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;row&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

    &lt;span class="c1"&gt;# 最后刷新一下缓存，确保数据都写入到磁盘&lt;/span&gt;
    &lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;flush&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;


&lt;div id="outline-container-orgd6d7826" class="outline-2"&gt;
&lt;h2 id="orgd6d7826"&gt;遇到的问题&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-orgd6d7826"&gt;
&lt;/div&gt;
&lt;div id="outline-container-org38e43a5" class="outline-3"&gt;
&lt;h3 id="org38e43a5"&gt;在不支持 &lt;code&gt;flock&lt;/code&gt; 的集群上运行&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-org38e43a5"&gt;
&lt;p&gt;
需要设置环境变量
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;   export HDF5_USE_FILE_LOCKING=FALSE
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;</description><category>python</category><guid>https://chimez.github.io/posts/pytables/</guid><pubDate>Mon, 01 Mar 2021 03:23:19 GMT</pubDate></item><item><title>h5py</title><link>https://chimez.github.io/posts/h5py/</link><dc:creator>chimez</dc:creator><description>&lt;div id="outline-container-org7743f49" class="outline-2"&gt;
&lt;h2 id="org7743f49"&gt;h5py: 储存数据&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-org7743f49"&gt;
&lt;p&gt;
&lt;a href="https://www.h5py.org/"&gt;h5py&lt;/a&gt; 是 HDF5 库的 python 封装，基本提供了所有对应的 C API，因此适合用在简单并底层的应用中，特别适合对 HDF5 文件有定制的应用中。
&lt;/p&gt;
&lt;/div&gt;

&lt;div id="outline-container-orgbd676a2" class="outline-3"&gt;
&lt;h3 id="orgbd676a2"&gt;存&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-orgbd676a2"&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;   &lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="n"&gt;h5py&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;File&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'data.h5'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'w'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;hf&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
       &lt;span class="n"&gt;hf&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;create_dataset&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"mat1"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;mat1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;compression&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"gzip"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
       &lt;span class="n"&gt;hf&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;create_dataset&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"mat2"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;mat2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;compression&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"gzip"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

       &lt;span class="n"&gt;g&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;hf&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;create_group&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"index"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
       &lt;span class="n"&gt;g&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;create_dataset&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"mat1"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;mat1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;compression&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"gzip"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;


&lt;div id="outline-container-orgefcbfb8" class="outline-3"&gt;
&lt;h3 id="orgefcbfb8"&gt;取&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-orgefcbfb8"&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;   &lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="n"&gt;h5py&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;File&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'data.h5'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'r'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;hf&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
       &lt;span class="n"&gt;mat1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;array&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;hf&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'mat1'&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
       &lt;span class="n"&gt;mat2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;array&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;hf&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'mat2'&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;

       &lt;span class="n"&gt;g&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;hf&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'index'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
       &lt;span class="n"&gt;g_mat1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;array&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;g&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'mat1'&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;</description><category>python</category><guid>https://chimez.github.io/posts/h5py/</guid><pubDate>Sun, 28 Feb 2021 14:11:33 GMT</pubDate></item></channel></rss>